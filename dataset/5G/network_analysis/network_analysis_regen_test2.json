[
    {
        "instruction": "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.",
        "input": "Open the CSV file 'data.csv' and create a pandas dataframe. Automatically detect relevant columns for measuring number of users ('numpoints','geotype') and make sure to include this information in the figure's title. Define colors for plotting.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\nnum_points_column = [col for col in df.columns if 'numpoints' in col.lower()][0]\ngeotype_column = [col for col in df.columns if 'geotype' in col.lower()][0]\ndf_grouped = df.groupby(geotype_column).sum().reset_index()\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive']\ncolors *= (len(df_grouped[geotype_column]) // len(colors) + 1)\n\nplt.figure(figsize=(10, 6))\nfor i, row in df_grouped.iterrows():\n    plt.bar(row[geotype_column], row[num_points_column], color=colors[i], label=row[geotype_column])\n\nplt.title('Number of Users Connected to the 5G Network by Geotype')\nplt.xlabel('Geotype')\nplt.ylabel('Number of Users')\nplt.xticks(rotation=45)\nplt.legend(title='Geotype', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Write Python code to load a a CSV file 'data.csv', dynamically identify CQI columns for each UE, create a box plot for CQI assessment, and find and display outliers in a DataFrame. Ensure that the box plot shows the CQI values for each UE.": 0.21212121212121213,
            "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('capacity', 'cost', 'area'), and perform 5G performance analysis by geotype. Generate plots for each KPI (Key Performance Indicator) by geotype.": 0.2105263157894737,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of jitter and CQI for each UE, and create separate bar plots to visualize the means for each UE. Ensure that each metric (jitter and CQI) has a separate plot, and label the plots appropriately.": 0.1971830985915493,
            "Write Python code to load a a CSV file 'data.csv', define the QoS metrics to analyze (Jitter, CQI, Throughput), calculate the average and standard deviation for each metric, and create bar plots with error bars for each metric to visualize the results.": 0.18749999999999997,
            "Load the dataset from a CSV file 'data.csv'. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.": 0.1846153846153846,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a scatter plot to visualize the jitter data for each UE. Additionally, identify and emphasize the outliers in the plot using a different marker or color.": 0.1846153846153846,
            "Write Python code to load a CSV file 'data.csv'automatically detect relevant columns by keyword ('capacity', 'spectrum', 'small.cells', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Group by 'geotype' and calculate the mean per user capacity increase for each geotype. Plot the per user capacity increase by geotype.": 0.18421052631578946,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a box plot to visualize the jitter volatility for each UE. Ensure that each UE has a separate box in the plot, and label the plot appropriately.": 0.18181818181818182,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of traffic volume for each UE and for each application category ('web-rtc', 'sipp', 'web-server'), and create separate bar plots to visualize the means for each UE. Ensure that each UE has a separate plot, and label the plots appropriately.": 0.18181818181818182,
            "Write Python code to load a CSV file 'data.csv' define services, and create box plots to analyze traffic volume for each service across different UEs. Iterate over services to create separate box plots. Ensure each box plot has appropriate labels.": 0.16129032258064516
        },
        "avg_similarity_score": 0.15020488372892277
    },
    {
        "instruction": "Use pandas and matplotlib to find the distribution of min.latency across all 5G-equipped postcodes, expressed as a percentage of all postcodes.",
        "input": "Open the CSV file 'data.csv' and create a pandas dataframe. Automatically detect relevant columns ('min_latency', 'numpoints') and use this column data to identify and calculate the min.latency distribution across all 5G-equipped postcodes. Define colors for plotting.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\nmin_latency_column = [col for col in df.columns if 'min_latency' in col.lower()][0]\nnum_points_column = [col for col in df.columns if 'numpoints' in col.lower()][0]\ndf['percentage_distribution'] = df[num_points_column] / df[num_points_column].sum()\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive']\ncolors *= (len(df[min_latency_column]) // len(colors) + 1)\n\nplt.figure(figsize=(10, 6))\nfor i, row in df.iterrows():\n    plt.bar(row[min_latency_column], row['percentage_distribution'] * 100, color=colors[i], label=str(row[min_latency_column]))\n\nplt.title('Distribution of Min.Latency Across 5G-Equipped Postcodes (percentage of all postcodes)')\nplt.xlabel('Min. Latency (ms)')\nplt.ylabel('Percentage of All Postcodes')\nplt.xticks(rotation=45)\nplt.legend(title='Latency', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.": 0.2727272727272727,
            "Write Python code to load a a CSV file 'data.csv', dynamically identify columns for each application ('web-rtc', 'sipp', 'web-server'), and perform a Throughput Analysis by summing the data throughput for each application across all UEs. Plot the results in a bar chart.": 0.14705882352941177,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a scatter plot to visualize the jitter data for each UE. Additionally, identify and emphasize the outliers in the plot using a different marker or color.": 0.11940298507462685,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values for traffic volume, jitter, and CQI for each UE, and create separate bar plots to visualize the means. Ensure each metric has a separate plot, and label the plots appropriately.": 0.11764705882352941,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a box plot to visualize the jitter volatility for each UE. Ensure that each UE has a separate box in the plot, and label the plot appropriately.": 0.11764705882352941,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of jitter and CQI for each UE, and create separate bar plots to visualize the means for each UE. Ensure that each metric (jitter and CQI) has a separate plot, and label the plots appropriately.": 0.1095890410958904,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.10714285714285714,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison. Separate the data into two groups based on 'spectrum_limitations' and plot separately for 'all_spectrum' and 'Limited Spectrum Bands'.": 0.10526315789473685,
            "Write Python code to load a CSV file 'data.csv' define a function to find and plot peaks in traffic volume for each UE and service, and call the function for 3 UEs and 3 services ('web-rtc', 'sipp', 'web-server'). Ensure each UE has a separate figure, and label the peaks accordingly.": 0.10526315789473685,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of traffic volume for each UE and for each application category ('web-rtc', 'sipp', 'web-server'), and create separate bar plots to visualize the means for each UE. Ensure that each UE has a separate plot, and label the plots appropriately.": 0.10126582278481013
        },
        "avg_similarity_score": 0.09816977873425084
    },
    {
        "instruction": "Use pandas to analyze the data from 'data.csv' and measure the percentage of 5G user equipment (UE) traffic where uplink throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.",
        "input": "Read the CSV file 'data.csv' into a pandas DataFrame. Select the user equipment's uplink throughput and calculate the percentage for each where throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ngreater_than_70pct = []\nfor i in range(1, 4):\n    gt70Pct = sum(df[f'UE{i}-UL Throughput (Mbps)'] > 0.7)/len(df) * 100\n    greater_than_70pct.append(gt70Pct)\nplt.pie(greater_than_70pct, labels=['UE1', 'UE2', 'UE3'], autopct='%1.1f%%')\nplt.title('Uplink Throughput Greater than 0.7 Mbps')\nplt.show()",
        "most_similar_instructions": {
            "Use pandas and matplotlib to find the distribution of min.latency across all 5G-equipped postcodes, expressed as a percentage of all postcodes.": 0.24137931034482762,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.2058823529411765,
            "Load the dataset from a CSV file 'data.csv'. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.": 0.20253164556962025,
            "Write Python code to load a a CSV file 'data.csv', dynamically identify columns for each application ('web-rtc', 'sipp', 'web-server'), and perform a Throughput Analysis by summing the data throughput for each application across all UEs. Plot the results in a bar chart.": 0.2,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a box plot to visualize the jitter volatility for each UE. Ensure that each UE has a separate box in the plot, and label the plot appropriately.": 0.2,
            "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('spectrum.capacity', 'small.cells.capacity', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Plot the per user capacity increase and mark the threshold where small cells are needed.": 0.19047619047619044,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of jitter and CQI for each UE, and create separate bar plots to visualize the means for each UE. Ensure that each metric (jitter and CQI) has a separate plot, and label the plots appropriately.": 0.18823529411764708,
            "Write Python code to load a CSV file 'data.csv' define applications, and plot the traffic volume for each UE and application. Iterate over UEs and applications to create separate plots. Ensure each plot has appropriate labels and a legend.": 0.18666666666666665,
            "Write Python code to load a CSV file 'data.csv' define a function to find and plot peaks in traffic volume for each UE and service, and call the function for 3 UEs and 3 services ('web-rtc', 'sipp', 'web-server'). Ensure each UE has a separate figure, and label the peaks accordingly.": 0.1818181818181818,
            "Write Python code to load a CSV file 'data.csv' categorize columns into traffic, jitter, and CQI, and plot the results for each category. Create subplots for Traffic Volume, Jitter, and CQI analyses, and plot each relevant column in the corresponding subplot.": 0.1818181818181818
        },
        "avg_similarity_score": 0.17188182356680815
    },
    {
        "instruction": "Compare the user equipment performance across different time frames. Examine the performance each time interval and identify any outliers.",
        "input": "Load the dataset. Compare the user equipment performance across different time frames. Examine the performance each time interval and identify any outliers.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ntime_columns = [col for col in df.columns if 'timeframe' in col]\nperformance_columns = [col for col in df.columns if 'performance' in col]\n\n# Create a dataframe with timeframes and their corresponding performance metrics\ndf_time_performance = df[time_columns + performance_columns]\n\n# Calculate the mean and standard deviation of the performance metric in each timeframe\ndf_time_performance_mean_std = df_time_performance.groupby('timeframe').agg(['mean', 'std'])\n\n# Create a dataframe with the outliers in each time frame\ndf_time_performance_outliers = df_time_performance[(df_time_performance < (df_time_performance_mean_std - 3 * df_time_performance_mean_std['performance']['std'])) | \n                                                  (df_time_performance > (df_time_performance_mean_std + 3 * df_time_performance_mean_std['performance']['std']))\n                                                 ].count().groupby('timeframe').sum()\n\n# Plot the mean and standard deviation and outliers\nplt.figure()\nwidth = 0.3\nplt.bar(df_time_performance_mean_std.index, df_time_performance_mean_std['performance']['mean'], width=width, color='b', label='mean')\nplt.bar(df_time_performance_mean_std.index + width, df_time_performance_mea_std['performance']['std'], width=width, color='g', label='standard deviation')\nplt.bar(df_time_performance_outliers.index + (2 * width), df_time_performance_outliers['performance'], width=width, color='r', label='outliers')\nplt.title('User Equipment Performance in Different Time Frames')\nplt.xlabel('Timeframe')\nplt.ylabel('Performance')\nplt.legend()\nplt.show()",
        "most_similar_instructions": {
            "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.": 0.15,
            "Use pandas to analyze the data from 'data.csv' and measure the percentage of 5G user equipment (UE) traffic where uplink throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.": 0.14814814814814814,
            "Write Python code to load a a CSV file 'data.csv', define the QoS metrics to analyze (Jitter, CQI, Throughput), calculate the average and standard deviation for each metric, and create bar plots with error bars for each metric to visualize the results.": 0.12903225806451613,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a scatter plot to visualize the jitter data for each UE. Additionally, identify and emphasize the outliers in the plot using a different marker or color.": 0.12698412698412698,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values for traffic volume, jitter, and CQI for each UE, and create separate bar plots to visualize the means. Ensure each metric has a separate plot, and label the plots appropriately.": 0.125,
            "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('spectrum.capacity', 'small.cells.capacity', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Plot the per user capacity increase and mark the threshold where small cells are needed.": 0.1176470588235294,
            "Write Python code to load a a CSV file 'data.csv', calculate the mean values of jitter and CQI for each UE, and create separate bar plots to visualize the means for each UE. Ensure that each metric (jitter and CQI) has a separate plot, and label the plots appropriately.": 0.11594202898550725,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the investment cost per user, and plot the results by 'geotype' for comparison. Ensure all necessary columns are found, convert relevant columns to numeric, handle NaN values, and calculate the investment cost per user.": 0.11594202898550725,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.11538461538461539,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison. Separate the data into two groups based on 'spectrum_limitations' and plot separately for 'all_spectrum' and 'Limited Spectrum Bands'.": 0.11111111111111112
        },
        "avg_similarity_score": 0.10121333033307514
    },
    {
        "instruction": "Obtain insights on the traffic pattern of 5G network data by using descriptive statistical methods. Perform hypothesis testing to identify any anomalies in traffic flow.",
        "input": "Load the dataset. Obtain insights on the traffic pattern of 5G network data by using descriptive statistical methods. Perform hypothesis testing to identify any anomalies in traffic flow.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the dataset\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\n# Obtain the relevant columns\ntraffic_columns = [col for col in df.columns if 'traffic' in col]\n\n# Calculate the descriptive statistics and hypothesis testing\ndescriptive_stats = df[traffic_columns].describe()\ntraffic_anomalies = df[traffic_columns][df[traffic_columns] > ((descriptive_stats['mean'] + 3 * descriptive_stats['std'])|(descriptive_stats['mean'] - 3 * descriptive_stats['std']))]\n\n# Visualize the descriptive statistics\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(descriptive_stats['mean'])\nax.plot(descriptive_stats['min'])\nax.plot(descriptive_stats['max'])\nax.legend(['Mean', 'Min', 'Max'], loc='upper right')\nax.set_title('Mean, Min and Max of Traffic Flow in 5G Network Data')\nplt.show()\n\n# Visualize the anomalies\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(traffic_anomalies)\nax.legend(traffic_anomalies.columns, loc='upper right')\nax.set_title('Traffic Anomalies in 5G Network Data')\nplt.show()",
        "most_similar_instructions": {
            "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.": 0.17391304347826086,
            "Generate Python code to calculate and visualize 5G network performance KPIs: Capacity Utilization, Cost Efficiency, and Service Penetration. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.": 0.15625,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.1379310344827586,
            "Compare the user equipment performance across different time frames. Examine the performance each time interval and identify any outliers.": 0.13636363636363635,
            "Use pandas to analyze the data from 'data.csv' and measure the percentage of 5G user equipment (UE) traffic where uplink throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.": 0.13333333333333333,
            "Generate Python code to calculate and visualize 5G network performance KPIs: Total Network Capacity, Capacity per Area, Capacity per Point, Cost per Capacity, Cost per Area, and Surplus per Area. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.": 0.13157894736842105,
            "Use pandas and matplotlib to find the distribution of min.latency across all 5G-equipped postcodes, expressed as a percentage of all postcodes.": 0.12499999999999997,
            "Write Python code to load a a CSV file 'data.csv', dynamically identify columns related to traffic, jitter, and CQI, apply an anomaly detection function using Interquartile Range (IQR) to each category of metrics (traffic, jitter, and CQI), store anomalies in separate columns with '_Anomaly' suffix, count anomalies for each column, and print the anomaly counts.": 0.1234567901234568,
            "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a scatter plot to visualize the jitter data for each UE. Additionally, identify and emphasize the outliers in the plot using a different marker or color.": 0.11594202898550725,
            "Load the dataset from a CSV file 'data.csv'. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.": 0.11594202898550725
        },
        "avg_similarity_score": 0.10017916228765524
    },
    {
        "instruction": "Analyze an isolated user equipment performance on 5G network data by computing regression and correlation coefficients.",
        "input": "Load the dataset. Analyze an isolated user equipment performance on 5G network data by computing regression and correlation coefficients.",
        "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import pearsonr\nimport seaborn as sns\n\n# Load the dataset\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\n# Obtain the relevant columns\nperformance_columns = [col for col in df.columns if 'performance' in col]\n\n# Compute the correlation and regression coefficients\ncorrelations = {}\nfor col in performance_columns:\n    correlations[col] = pearsonr(df['UE'], df[col])\n\n# Plot the correlation matrix\nax = sns.heatmap(correlations)\nplt.title('Correlations between Isolated User Equipment Performance and other Features')\nplt.show()\n\n# Plot the regression coefficients\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(list(correlations.keys()), [correlations[key][0] for key in correlations.keys()])\nax.set_title('Regression Coefficients')\nplt.xlabel('Feature')\nplt.ylabel('Correlation Coefficient')\nplt.show()",
        "most_similar_instructions": {
            "Obtain insights on the traffic pattern of 5G network data by using descriptive statistical methods. Perform hypothesis testing to identify any anomalies in traffic flow.": 0.24390243902439027,
            "Compare the user equipment performance across different time frames. Examine the performance each time interval and identify any outliers.": 0.22857142857142856,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.12244897959183672,
            "Use pandas to analyze the data from 'data.csv' and measure the percentage of 5G user equipment (UE) traffic where uplink throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.": 0.11764705882352938,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison. Separate the data into two groups based on 'spectrum_limitations' and plot separately for 'all_spectrum' and 'Limited Spectrum Bands'.": 0.11594202898550725,
            "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('capacity', 'cost', 'area'), and perform 5G performance analysis by geotype. Generate plots for each KPI (Key Performance Indicator) by geotype.": 0.11538461538461539,
            "Write Python code to load a CSV file 'data.csv'automatically detect relevant columns by keyword ('capacity', 'spectrum', 'small.cells', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Group by 'geotype' and calculate the mean per user capacity increase for each geotype. Plot the per user capacity increase by geotype.": 0.11267605633802816,
            "Generate Python code to calculate and visualize 5G network performance KPIs: Capacity Utilization, Cost Efficiency, and Service Penetration. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.": 0.1090909090909091,
            "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.": 0.1081081081081081,
            "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('spectrum.capacity', 'small.cells.capacity', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Plot the per user capacity increase and mark the threshold where small cells are needed.": 0.0923076923076923
        },
        "avg_similarity_score": 0.08952283636458176
    },
    {
        "instruction": "Generate detailed reports of the 5G network data by using clustering and classification.",
        "input": "Load the dataset. Generate detailed reports of the 5G network data by using clustering and classification.",
        "output": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\n# Define the features\nfeatures = [col for col in df.columns if col not in ['timestamp','UE']]\n\n# Perform K-means clustering\nkmeans = KMeans(n_clusters=2).fit(df[features])\ncluster_labels = kmeans.labels_\n\n# Perform train-test split\nX_train, X_test, y_train, y_test = train_test_split(df[features], cluster_labels, test_size=0.2, random_state=0)\n\n# Perform logistic regression\nlogistic_regression = LogisticRegression()\nlogistic_regression.fit(X_train, y_train)\n\n# Generate the detailed reports\naccuracy = logistic_regression.score(X_test, y_test)\ncoefficients = logistic_regression.coef_\nintercepts = logistic_regression.intercept_\ncluster_centers = kmeans.cluster_centers_\nreport = 'Accuracy: {0} \\nCoefficients: {1} \\nIntercepts: {2} \\nCluster Centers: {3}'.format(accuracy, coefficients, intercepts, cluster_centers)\nprint(report)",
        "most_similar_instructions": {
            "Analyze an isolated user equipment performance on 5G network data by computing regression and correlation coefficients.": 0.3448275862068966,
            "Obtain insights on the traffic pattern of 5G network data by using descriptive statistical methods. Perform hypothesis testing to identify any anomalies in traffic flow.": 0.3157894736842105,
            "Using pandas and matplotlib, generate a figure that plots the number of users connected to the 5G network for each geotype.": 0.2941176470588235,
            "Generate Python code to calculate and visualize 5G network performance KPIs: Capacity Utilization, Cost Efficiency, and Service Penetration. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.": 0.15384615384615385,
            "Load the dataset from a CSV file 'data.csv'. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.": 0.14035087719298245,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.": 0.13043478260869568,
            "Use pandas to analyze the data from 'data.csv' and measure the percentage of 5G user equipment (UE) traffic where uplink throughput is greater than 0.7 Mbps. Output a pie chart displaying the results.": 0.12500000000000003,
            "Compare the user equipment performance across different time frames. Examine the performance each time interval and identify any outliers.": 0.125,
            "Generate Python code to calculate and visualize 5G network performance KPIs: Total Network Capacity, Capacity per Area, Capacity per Point, Cost per Capacity, Cost per Area, and Surplus per Area. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.": 0.125,
            "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison. Separate the data into two groups based on 'spectrum_limitations' and plot separately for 'all_spectrum' and 'Limited Spectrum Bands'.": 0.12121212121212122
        },
        "avg_similarity_score": 0.11535061172705943
    }
]