[
    {
        "instruction": "Identify the MOASes that announce AS 2497 and determine the path inflation.",
        "input": "ASN: 2497\nFilter: path \"_2497_\"",
        "output": "import pybgpstream\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-10-01 00:00:00\",\n    until_time=\"2020-10-31 00:00:00\",\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\",\n    filter=\"path \\\"_2497_\\\"\"\n)\n\nas_paths = []\n\nfor rec in stream.records():\n    for elem in rec:\n      if elem.type == \"A\":\n        as_paths.append(elem.fields[\"as-path\"].split()[0])\n\nmoases = Counter(as_paths).most_common()\n\n# Calculate path inflation\npath_inflation = 0\nfor moas in moases:\n    path_inflation += (moas[1] - 1)\n\nprint(f\"MOASes: {moases}\")\nprint(f\"Path inflation for AS 2497: {path_inflation}\")",
        "most_similar_instructions": {
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.16393442622950824,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.12903225806451613,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.11999999999999998,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.11764705882352941,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.11111111111111112,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.1095890410958904,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.1081081081081081,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.10714285714285714,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.10526315789473685
        },
        "avg_similarity_score": 0.09679643109434523
    },
    {
        "instruction": "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.",
        "input": "Collectors: route-views2, route-views3, route-views4, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\n\nas_path_lengths = []\npreference_values = []\n\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-10-01 00:00:00\",\n    until_time=\"2020-10-31 00:00:00\",\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\nfor rec in stream.records():\n    for elem in rec:\n        as_path_lengths.append(len(elem.fields[\"as-path\"].split()))\n        preference_values.append(elem.fields[\"preference\"])\n\n# Perform time-series analysis\nprint(f\"AS Path lengths: {as_path_lengths}\")\nprint(f\"Preference values: {preference_values}\")",
        "most_similar_instructions": {
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.13559322033898305,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.12698412698412698,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.12307692307692307,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.12121212121212123,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.12121212121212122,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.11428571428571428,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.11267605633802817,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.10958904109589042,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.10869565217391305,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.1075268817204301
        },
        "avg_similarity_score": 0.10367113588343933
    },
    {
        "instruction": "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.",
        "input": "Prefix: ayde-11\nIP Version: 4\nFilter: path \"_111_\"",
        "output": "import pybgpstream\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-10-01 00:00:00\",\n    until_time=\"2020-10-31 00:00:00\",\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\",\n    filter=\"prefix ayde-11 and ipversion 4 and path \\\"_111_\\\"\"\n)\n\nas_paths = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_paths.append(elem.fields[\"as-path\"])\n\ntop_10_paths = Counter(as_paths).most_common(10)\n\n# Calculate number of transits\ntransits = []\nfor path in top_10_paths:\n    transits.append(len(path[0].split()) - 2)\n\nprint(f\"Top 10 AS paths with the highest number of transits for IPv4 prefix ayde-11 originated from AS 111: {top_10_paths}\")\nprint(f\"Number of transits: {transits}\")",
        "most_similar_instructions": {
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.24242424242424246,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.22857142857142856,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.18181818181818182,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.17391304347826086,
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.16091954022988506,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.16,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.15873015873015875,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.15384615384615383,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.15151515151515152,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.1408450704225352
        },
        "avg_similarity_score": 0.1294144251328824
    },
    {
        "instruction": "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.",
        "input": "Collectors: zebra\nFilter: peer 10.0.0.1 or peer 10.0.0.2",
        "output": "import pybgpstream\n\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-10-01 00:00:00\",\n    until_time=\"2020-10-31 00:00:00\",\n    collectors=[\"zebra\"],\n    record_type=\"updates\",\n    filter=\"peer 10.0.0.1 or peer 10.0.0.2\"\n)\n\nfor rec in stream.records():\n    for elem in rec:\n        print(elem.fields[\"prefix\"], elem.fields[\"as-path\"], elem.fields[\"peer-asn\"])",
        "most_similar_instructions": {
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.23255813953488372,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.13513513513513511,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.12987012987012989,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify and display BGP announcements where the suspicious prefix 216.58.192.0/19 is announced by ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a time series plot showing the number of suspicious announcements over time.": 0.12987012987012989,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.12820512820512822,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.12048192771084337,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.11363636363636363,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.11267605633802816,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.09999999999999999
        },
        "avg_similarity_score": 0.0961369764508651
    },
    {
        "instruction": "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.",
        "input": "ASN: 15487\nCollectors: route-views2, rrc01, ris-ripe",
        "output": "import pybgpstream\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-10-01 00:00:00\",\n    until_time=\"2020-10-31 00:00:00\",\n    collectors=[\"route-views2\", \"rrc01\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\ncommunities = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if \"15487\" in elem.fields[\"as-path\"]:\n            communities.append(elem.fields[\"communities\"])\n\n# Generate report\nprint(f\"AS 15487 communities: {Counter(communities).most_common(10)}\")\nprint(f\"Total number of announcements: {len(communities)}\")",
        "most_similar_instructions": {
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2580645161290323,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.25,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.2,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.2,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.1764705882352941,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.16326530612244897,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.16216216216216217,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.15,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.14814814814814814
        },
        "avg_similarity_score": 0.1455307109599202
    },
    {
        "instruction": "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.",
        "input": "Time window: February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC\nCollector: route-views.jj\nRecord Type: ribs, updates\nASN: 33636",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = \"2021-02-12 12:00:00 UTC\"\nend_time = \"2021-02-12 13:59:59 UTC\"\n\n# Initializing BGPStream with a filter to collect information from route-views.jj\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.jj\"],\n    record_type=\"updates\"\n)\n\n# Store BGP information in a dictionary \nbgp_info = defaultdict(dict)\nbgp_info['as_path'] = []\nbgp_info['local_preference'] = []\nbgp_info['origin'] = []\nbgp_info['med'] = []\nbgp_info['communities'] = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.peer_asn == 33636:\n            # AS Path\n            as_path = elem.fields[\"as-path\"].split()\n            bgp_info['as_path'].append(as_path)\n            # Local Preference\n            local_preference = elem.fields[\"local-pref\"]\n            bgp_info['local_preference'].append(local_preference)\n            # Origin\n            origin = elem.fields[\"origin\"]\n            bgp_info['origin'].append(origin)\n            # MED\n            med = elem.fields[\"med\"]\n            bgp_info['med'].append(med)\n            # BGP Communities\n            communities = elem.fields[\"communities\"].split(' ')\n            bgp_info['communities'].append(communities)\n\n# Studying the communities of prefixes belonging to AS33636 \nprint('AS Path length:', bgp_info['as_path'])\nprint('Local Preference:', bgp_info['local_preference'])\nprint('Origin:', bgp_info['origin'])\nprint('MED:', bgp_info['med'])\nprint('Communities:', bgp_info['communities'])",
        "most_similar_instructions": {
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.2992125984251969,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.28346456692913385,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.21333333333333335,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.1875,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.1732283464566929,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.16216216216216214,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.15267175572519082,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.14893617021276595,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.14814814814814817,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.14400000000000002
        },
        "avg_similarity_score": 0.1399021103272287
    },
    {
        "instruction": "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).",
        "input": "Time window: February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC\nCollectors: route-views2, route-views4\nRecord Type: ribs\nPeer ASN: 7018",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2021-02-13 10:00:00 UTC\"\nend_time = \"2021-02-13 12:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views4\"],\n    record_type=\"ribs\"\n)\n\n# Store count of collected MOAS prefixes\nmoas_prefixes = set()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            if elem.peer_asn == 7018:\n                moas_prefix = elem.fields[\"prefix\"]\n                moas_prefixes.add(moas_prefix)\n\n# Analyzing the MOAS (Multiple Origin AS) prefixes propagated by AS7018 \nprint('Total Number of MOAS Prefixes Collected:', len(moas_prefixes))",
        "most_similar_instructions": {
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.4666666666666667,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.43333333333333335,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.39999999999999997,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3636363636363636,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3064516129032258,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.30158730158730157,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.18333333333333332,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.18181818181818182,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.1782178217821782
        },
        "avg_similarity_score": 0.18521263994559278
    },
    {
        "instruction": "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).",
        "input": "Time window: February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates\nSource ASN: 13273\nDestination ASN: 28715",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2021-02-14 06:00:00 UTC\"\nend_time = \"2021-02-14 11:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Store counts of AS path length in a dictionary \nas_path_length = {\n    '13273': {}, \n    '28715': {}\n}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            if (elem.peer_asn == 13273 and elem.fields[\"as-path\"].split()[-1] == \"28715\") or (elem.peer_asn == 28715 and elem.fields[\"as-path\"].split()[0] == \"13273\"):\n                as_path = elem.fields[\"as-path\"].split()\n                as_path_length[str(elem.peer_asn)][elem.fields[\"prefix\"]] = len(as_path)\n\n# Calculate the AS path inflation\nAS13273_count = len(as_path_length['13273'])\nAS28715_count = len(as_path_length['28715'])\nAS13273_total_length = sum(as_path_length['13273'].values())\nAS28715_total_length = sum(as_path_length['28715'].values())\nprint('AS13273 Mean AS Path Length:', AS13273_total_length / AS13273_count)\nprint('AS28715 Mean AS Path Length:', AS28715_total_length / AS28715_count)",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.625,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.423728813559322,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.4077669902912622,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.4067796610169492,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.35294117647058826,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.32258064516129026,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3114754098360656,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.18644067796610167,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.18181818181818182,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.1818181818181818
        },
        "avg_similarity_score": 0.19814373666054907
    },
    {
        "instruction": "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.",
        "input": "Time window: February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC\nCollector: route-views2\nRecord Type: updates",
        "output": "import pybgpstream\nimport pandas as pd\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2021-02-15 09:00:00 UTC\"\nend_time = \"2021-02-15 13:59:59 UTC\"\n\n# Initialize BGPStream with a filter to collect information from route-views2\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\n# Access and store live information in a pandas dataframe\ndf = pd.DataFrame()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            df = df.append(\n                {\n                    \"prefix\": elem.fields[\"prefix\"], \n                    \"time\": rec.time,\n                    \"peer_asn\": elem.peer_asn, \n                    \"as_path\": elem.fields[\"as-path\"],\n                    \"origin\": elem.fields[\"origin\"],\n                    \"local_preference\": elem.fields[\"local-pref\"],\n                    \"med\": elem.fields[\"med\"],\n                    \"communities\": elem.fields[\"communities\"]\n                }, \n                ignore_index=True\n            )\n\n# Access live stream data\nprint(df)",
        "most_similar_instructions": {
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.4090909090909091,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.37777777777777777,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.3711340206185567,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.26785714285714285,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.25,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.2352941176470588,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.23214285714285715,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.21505376344086025,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.19047619047619044
        },
        "avg_similarity_score": 0.18161480495639062
    },
    {
        "instruction": "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.",
        "input": "Time window: February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC\nCollectors: route-views.eqix\nRecord Type: updates\nOrigin: MOAS",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2021-02-11 00:00:00 UTC\"\nend_time = \"2021-02-11 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"route-views.eqix\",\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.origin_as != \"<noinput>\":\n            if elem.origin in 'moas':\n                #Analyze the effect of MOAS prefixes on overall BGP network stability\n                #Your code to analyze BGP network stability",
        "most_similar_instructions": {
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.4666666666666667,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.4666666666666667,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.42857142857142855,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.3619047619047619,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.3333333333333333,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.31111111111111117,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.2644628099173553,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.24193548387096772,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.23809523809523808,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.23404255319148937
        },
        "avg_similarity_score": 0.1954799643794661
    },
    {
        "instruction": "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.",
        "input": "Time window: February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC\nCollectors: all the route-views collectors\nRecord Type: updates\nASN: 65530",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2021-02-11 00:00:00 UTC\"\nend_time = \"2021-02-11 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Store the counts of BGP communities\nbgp_comm_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields['as-path'].split()[-1] == \"65530\":\n            bgp_comm = elem.fields['communities']\n            if bgp_comm:\n                bgp_comm_count[bgp_comm] += 1\n\n# Computing distribution of BGP communities for ASN 65530\ncomm_distribution = {}\ntotal = sum(bgp_comm_count.values())\nfor comm in bgp_comm_count:\n    comm_distribution[comm] = bgp_comm_count[comm]/total\n\n# Studying BGP communities\n#Your code to study BGP communities",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.54,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.47540983606557374,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.47540983606557374,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.39252336448598135,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.38,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.32653061224489793,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3252032520325203,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3174603174603175,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.31249999999999994,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.30434782608695654
        },
        "avg_similarity_score": 0.24317613820430778
    },
    {
        "instruction": "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.",
        "input": "Time window: April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC\nCollectors: rrc00\nRecord Type: updates (Announcement)",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2020-04-01 00:00:00 UTC\"\nend_time = \"2020-04-01 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"rrc00\",\n    record_type=\"updates\"\n)\n\n# Access live data sources\n#Your code to access live data sources",
        "most_similar_instructions": {
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.37837837837837834,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3170731707317074,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.30952380952380953,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.29999999999999993,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.29268292682926833,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.28846153846153844,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.28846153846153844,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.2545454545454546,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.23529411764705882,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.23076923076923075
        },
        "avg_similarity_score": 0.20422667992842397
    },
    {
        "instruction": "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.",
        "input": "Time window: April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC\nCollectors: route-views, bgp.he.net, route-views.eqix\nRecord Type: updates\nPrefix: 22.83.164.0/22\nSource ASN: 52657",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2020-04-01 00:00:00 UTC\"\nend_time = \"2020-04-01 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"bgp.he.net\", \"route-views.eqix\"],\n    record_type=\"updates\"\n)\n\n# Measure AS path inflation on prefix 22.83.164.0/22\npath_lengths = Counter()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields['prefix'] == \"22.83.164.0/22\":\n            as_path = elem.fields['as-path'].split()\n            if as_path[0] == \"52657\":\n                path_lengths[elem.type] += len(as_path)\n\n# Analyze the path inflation\n#Your code to analyze the path inflation",
        "most_similar_instructions": {
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.4367816091954023,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.36190476190476195,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.33009708737864074,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.272,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.256,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.25263157894736843,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.24528301886792453,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.24,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.2376237623762376,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.23333333333333334
        },
        "avg_similarity_score": 0.1989530567309856
    },
    {
        "instruction": "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.",
        "input": "Time window: April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC\nCollectors: all route-views collectors\nRecord Type: updates\nASN: 13414",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-04-18 00:00:00 UTC\"\nend_time = \"2020-04-18 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Separate BGP announcements into valid and invalid\nvalid_prefix_updates = []\ninvalid_prefix_updates = []\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields['as-path'].split()[-1] == \"13414\":\n            if elem.is_valid_announcement():\n                valid_prefix_updates.append(elem.fields['prefix'])\n            else:\n                invalid_prefix_updates.append(elem.fields['prefix'])\n\n# Listen live to any subsequent announcements\n#Your code to listen to live announcements",
        "most_similar_instructions": {
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.5940594059405941,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.4444444444444445,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.40384615384615385,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.38016528925619836,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.38016528925619836,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.3614457831325301,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.3232323232323232,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.30927835051546393,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.30188679245283023,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.29508196721311475
        },
        "avg_similarity_score": 0.2385518027891673
    },
    {
        "instruction": "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.",
        "input": "Time window: April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC\nCollectors: bgp.as6453.net, route-views.eqix\nRecord Type: updates (Withdrawal)",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-04-21 00:00:00 UTC\"\nend_time = \"2020-04-21 05:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"bgp.as6453.net\", \"route-views.eqix\"],\n    record_type=\"updates\"\n)\n\n# Access live data sources\n#Your code to access live data sources",
        "most_similar_instructions": {
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.5306122448979591,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.5194805194805195,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.4042553191489362,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.3764705882352941,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3440860215053763,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.3368421052631579,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.2608695652173913,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.24999999999999994,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.24719101123595505,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.2434782608695652
        },
        "avg_similarity_score": 0.22190744406456483
    },
    {
        "instruction": "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.",
        "input": "Time window: 2020-01-15 16:00:00 UTC,\nCollector: rrc05\nRecord Type: updates\nPrefix of Interest: 192.168.0.0/16",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-01-15 16:00:00\"\nend_time = <noinput>\n\ntarget_prefix = \"192.168.0.0/16\"\n\n# Initialize BGPStream with the specified collector\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc05\"],\n    record_type=\"updates\"\n)\n\n# Track other ASes and the lengths of their AS Paths\nas_paths = {}\n\n# Process BGP records\nfor rec in stream:\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == target_prefix:\n            as_path = elem.fields[\"as-path\"].split()\n            asn = as_path[-1]\n            if asn in as_paths:\n                as_paths[asn] = max(as_paths[asn], len(as_path))\n            else:\n                as_paths[asn] = len(as_path)\n\naverage_as_path_length = 0\nfor asn, as_path_length in as_paths.values():\n    average_as_path_length += as_path_length\n\naverage_as_path_length /= len(as_paths)\n\nprint(\"The average AS path length for prefix 192.168.0.0/16 over the specified timeframe is %f ASes.\" %average_AS_path_length)",
        "most_similar_instructions": {
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.28888888888888886,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.275,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.2716049382716049,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.2558139534883721,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.24324324324324326,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.23529411764705882,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.2298850574712644,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.22857142857142854,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2272727272727273,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.22680412371134023
        },
        "avg_similarity_score": 0.19665845044416264
    },
    {
        "instruction": "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.",
        "input": "Time window: 2020-03-20 16:00:00 UTC to 2020-03-20 17:00:00 UTC\nCollector: routeviews2 \nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-03-20 16:00:00\"\nend_time = \"2020-03-20 17:00:00\"\n\n# Initialize BGPStream with the specified collector\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"routeviews2\"],\n    record_type=\"updates\"\n)\n\n# Track prefixes and their ASes\nprefix_ases = {}\n\n# Process BGP records\nfor rec in stream:\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            as_path = elem.fields[\"as-path\"].split()\n            # Check if MOAS\n            if len(as_path) > 1:\n                # Store in prefixes map\n                if prefix in prefix_ases:\n                    prefix_ases[prefix].add(as_path[-1])\n                else:\n                    prefix_ases[prefix] = set([as_path[-1]])\n\n# Count MOAS prefixes\nmoas_prefixes_count = 0\nfor prefix, ases in prefix_ases.items():\n    if len(ases) > 1:\n        moas_prefixes_count += 1\n\nprint(\"Number of MOAS prefixes during the specified timeframe: %d.\" %moas_prefixes_count)",
        "most_similar_instructions": {
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.5,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.2777777777777778,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.24657534246575344,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.24444444444444446,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.23376623376623376,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.22857142857142854,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.225,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.2222222222222222,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.21951219512195122,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.21686746987951808
        },
        "avg_similarity_score": 0.18992702078275242
    },
    {
        "instruction": "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.",
        "input": "Time window: 2020-04-03 14:00:00 UTC to 2020-04-03 15:00:00 UTC\nCollector: routeviews, ripe\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-04-03 14:00:00\"\nend_time = \"2020-04-03 15:00:00\"\n\n# Initialize BGPStream with multiple collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"routeviews\", \"ripe\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Do something with the collected BGP records\n        <noinput>",
        "most_similar_instructions": {
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3934426229508197,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3376623376623376,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.30303030303030304,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.28985507246376807,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.2702702702702703,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.2564102564102564,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.2545454545454546,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.2285714285714286,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.2222222222222222,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.2181818181818182
        },
        "avg_similarity_score": 0.1891724148350693
    },
    {
        "instruction": "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.",
        "input": "Time window: 2020-06-12 16:00:00 UTC to 2020-06-12 17:00:00 UTC\nCollector: rrc13\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-06-12 16:00:00\"\nend_time = \"2020-06-12 17:00:00\"\n\n# Initialize BGPStream with the specified collector\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc13\"],\n    record_type=\"updates\"\n)\n\n# Track prefixes and their communities\nprefix_communities = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            # Store community in prefixes map\n            if prefix in prefix_communities:\n                prefix_communities[prefix].add(elem.fields[\"communities\"])\n            else:\n                prefix_communities[prefix] = set([elem.fields[\"communities\"]])\n\n# Show statistics\nprint(\"Number of prefixes in the specified timeframe: %d.\" %len(prefix_communities))\nprint(\"Number of distinct communities associated with these prefixes: %d.\" %len(set.union(*prefix_communities.values())))",
        "most_similar_instructions": {
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.4137931034482759,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.4126984126984127,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.2727272727272727,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.24324324324324326,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.23255813953488372,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.22222222222222224,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.21739130434782605,
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.20833333333333331,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.20588235294117646,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2040816326530612
        },
        "avg_similarity_score": 0.17243333772335906
    },
    {
        "instruction": "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.",
        "input": "Time window: Last week\nProjects: route-views",
        "output": "import pybgpstream\nimport networkx as nx\nfrom datetime import datetime, timedelta\n\n# Define the time window around the incident\nend_time = datetime.utcnow().strftime('%Y-%m-%d 00:00:00') # Current time\nstart_time = (datetime.utcnow() - timedelta(days=7)).strftime('%Y-%m-%d 23:59:59') # Last week\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"route-views\"],\n    record_type=\"moas\"\n)\n\n# Create a Networkx graph\nG = nx.Graph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        src_asn = elem.fields[\"as-path\"].split(' ')[-1] # Source ASN\n        origin_asn = elem.fields[\"as-path\"].split(' ')[0] # Origin ASN\n        if src_asn != origin_asn: # Ignore if Source ASN is same as Origin ASN\n            if not G.has_edge(src_asn, origin_asn): # Check if edge exists already\n                G.add_edge(src_asn, origin_asn)\n\n# Visualize the graph\nplt.figure(figsize=(10, 6))\npos = nx.spring_layout(G, k=4.)\nnx.draw(G, pos, with_labels=True, font_size=14, font_color=\"green\", node_color=\"blue\", node_size=500, arrowsize=20, width=0.5)\nplt.title(\"MOAS Prefixes Topology Analysis - Last Week\")\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.17777777777777778,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.15789473684210528,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.15151515151515152,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.14545454545454545,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.13793103448275862,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.12765957446808512,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.12121212121212122,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.11594202898550726,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.11320754716981131,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.1111111111111111
        },
        "avg_similarity_score": 0.09091441519217444
    },
    {
        "instruction": "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.",
        "input": "Time window: Last month\nProjects: route-views\nASN of interest: 65501 and 65500",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\n# Define the time window around the incident\nend_time = datetime.utcnow().strftime('%Y-%m-%d 00:00:00') # Current time\nstart_time = (datetime.utcnow() - timedelta(days=30)).strftime('%Y-%m-%d 23:59:59') # Last month\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"route-views\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the length of paths \n# Key is timestamp and value is path length\npath_lengths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields[\"peer-asn\"] == 65501 or elem.fields[\"peer-asn\"] == 65500: # Check for consistent peer ASNs\n            path_length = len(elem.fields['as-path'].split(' ')) # Path length\n            timestamp_hour = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00') # Timestamp\n            if timestamp_hour not in path_lengths:\n                path_lengths[timestamp_hour] = 0\n            path_lengths[timestamp_hour] += path_length\n\n# Visualize the length of paths\ntimestamps = sorted(path_lengths.keys())\nlengths = [path_lengths[ts] for ts in timestamps]\n\nplt.figure(figsize=(15, 7))\nplt.plot(timestamps, lengths, marker='o', color='red', linestyle='-')\nplt.xlabel('Timestamp (Hourly)')\nplt.ylabel('Length of Paths between ASN 65501 and ASN 65500')\nplt.title('Length of BGP Paths between ASN 65501 and ASN 65500 - Last Month')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.18181818181818182,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.1764705882352941,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.1724137931034483,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.1686746987951807,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.16666666666666666,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.1643835616438356,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.16216216216216214,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.16161616161616163,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.16
        },
        "avg_similarity_score": 0.1275582301184602
    },
    {
        "instruction": "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.",
        "input": "Collector: rrc00\nProject: route-views\nASN of interest: 65501\nFilter: path \"_65501_\"",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collector=\"rrc00\",\n    projects=[\"route-views\"],\n    record_type=\"updates\",\n    filter=\"path _65501_\"\n)\n\n# Dictionary to store the count of AS Path Inflation of Carefit ASN 65501\ninflation_counts = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        path_length = len(elem.fields['as-path'].split(' ')) # Path length\n       as_path_str = ' '.join(elem.fields['as-path'].split(' ')) # AS Path string\n        if path_length >= 5 and as_path_str.endswith(\"65501\"): # Inflated paths should be longer than 5 ASN and should end with Carefit ASN 65501\n            if path_length not in inflation_counts:\n                inflation_counts[path_length] = 0\n            inflation_counts[path_length] += 1\n\n# Visualize the number of inflation paths\npath_lengths = sorted(inflation_counts.keys())\ninflation_count = [inflation_counts[x] for x in path_lengths]\n\nplt.figure(figsize=(12, 6))\nplt.bar(path_lengths, inflation_count)\nplt.xlabel('Length of the Path (AS Chains)')\nplt.ylabel('Count of Inflated Paths')\nplt.title('AS Path Inflation Analysis of Carefit ASN 65501')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3703703703703704,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.33333333333333337,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.30769230769230765,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.27450980392156865,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.27118644067796616,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2608695652173913,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.25,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.23529411764705885,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.22580645161290322,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.21621621621621623
        },
        "avg_similarity_score": 0.1811173247557824
    },
    {
        "instruction": "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.",
        "input": "Time window: January 5, 2017, 00:00:00 to January 5, 2017, 23:59:59\nCollectors: route-views2",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2017-01-05 00:00:00\"\nend_time = \"2017-01-05 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"ribs\"\n)\n\n# Process the BGP records\npeer_routes = defaultdict(list)\nfor rec in stream.records():\n    for elem in rec:\n if elem.type == \"R\":  # Check for BGP RIB entries\n    peer_ip = elem.peer_address\n    route_pref = elem.fields['med']\n    peer_routes[peer_ip].append(route_pref)\n\n# Create a DataFrame\ndf = pd.DataFrame(list(peer_routes.items()), columns=('peer_ip', 'route_prefs'))\n\n# Visualize the route-preference between all the peers\nlabels = df['peer_ip'].tolist()\ndata = df['route_prefs'].tolist()\n\nplt.figure(figsize=(8, 5))\nplt.boxplot(data, labels=labels, showmeans=True, patch_artist=True)\nplt.title(\"Route-Preference Between RouteViews peers\")\nplt.xlabel(\"Peer IP address\")\nplt.ylabel(\"Route Preference (MED)\")\nplt.xticks(rotation=90, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2692307692307692,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2631578947368421,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2380952380952381,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.23188405797101452,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.2278481012658228,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.22580645161290325,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.21505376344086022,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.21333333333333332,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.21176470588235297
        },
        "avg_similarity_score": 0.1800436463524766
    },
    {
        "instruction": "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.",
        "input": "Time window: January 5, 2017, 00:00:00 to January 5, 2017, 23:59:59\nCollectors: route-views2, kdl",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = \"2017-01-05 00:00:00\"\nend_time = \"2017-01-05 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"kdl\"],\n    record_type=\"updates\",\n    filter=\"type mpm\",\n    )\n\n# Dictionary to store the longest AS paths\nlongest_paths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n if elem.type == \"A\":  # Check for BGP announcements\n  as_path_length = len(elem.fields[\"as-path\"].split(' '))\n  longest_paths[elem.fields[\"as-path\"]] = as_path_length\n\n# Print the top 10 longest AS paths\nprint(\"Top 10 Longest AS Paths:\")\nfor i, (as_path, path_length) in enumerate(sorted(longest_paths.items(), key=lambda x: x[1], reverse=True)[:10], start=1):\n    print(f\"{i}. {as_path}: {path_length} ASNs\")\n\n# Visualize the top 10 longest AS paths\nlabels = list()\ndata = list()\nfor as_path, path_length in sorted(longest_paths.items(), key=lambda x: x[1], reverse=True)[:10]:\n    labels.append(as_path)\n    data.append(path_length)\n\nplt.figure(figsize=(12, 6))\nplt.bar(labels, data, color='green')\nplt.title('Top 10 Longest AS Paths')\nplt.xlabel('AS Path')\nplt.ylabel('Number of ASes')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.2962962962962962,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2745098039215686,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.2716049382716049,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.2716049382716049,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.24489795918367344,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.23333333333333334,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.22641509433962265,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.22448979591836735,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.21686746987951808,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.21505376344086022
        },
        "avg_similarity_score": 0.17925944728298057
    },
    {
        "instruction": "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.",
        "input": "Time window: January 5, 2017, 00:00:00 to January 5, 2017, 23:59:59\nCollectors: route-views2",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2017-01-05 00:00:00\"\nend_time = \"2017-01-05 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\",\n    )\n\n# Dictionary to store the BGP community per view\nbgp_comm_per_view = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP updates\n  view_name = elem.fields['view-name']\n  bgp_comm_str = elem.fields['bgp-community']\n  bgp_comm_list = bgp_comm_str.split(':')\n  bgp_comm_len = len(bgp_comm_list)\n  bgp_comm_per_view[view_name] += bgp_comm_len\n\n# Visualize the BGP communities per view\nview_names = sorted(bgp_comm_per_view.keys())\ncounts = [bgp_comm_per_view[view_name] for view_name in view_names]\n\nplt.figure(figsize=(8, 5))\nplt.bar(view_names, counts, color='#ffe0b2')\nplt.title('BGP Communities per View')\nplt.xlabel('View Name')\nplt.ylabel('Number of BGP Communities')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.4878048780487805,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.4680851063829787,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.35714285714285715,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.32142857142857145,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.31818181818181823,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.3125,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.31111111111111117,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.2686567164179105,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.2465753424657534,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.22222222222222224
        },
        "avg_similarity_score": 0.2019363179068623
    },
    {
        "instruction": "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.",
        "input": "Time window: January 5, 2017, 00:00:00 to January 5, 2017, 23:59:59\nCollectors: route-views2",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2017-01-05 00:00:00\"\nend_time = \"2017-01-05 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\",\n    )\n\n# Dictionary to store the AS path lengths\nas_path_lengths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n if elem.type == \"A\":  # Check for BGP updates\n  as_path_length = len(elem.fields[\"as-path\"].split(' '))\n  as_path_lengths[as_path_length] += 1\n\n# Visualize the AS Path length distribution\npath_lengths = sorted(as_path_lengths.keys())\ncounts = [as_path_lengths[path_len] for path_len in path_lengths]\n \nplt.figure(figsize=(8, 5))\nplt.bar(path_lengths, counts, color='#ffffbb')\nplt.title('AS Path Length Distribution')\nplt.xlabel('Path Length')\nplt.ylabel('Number of Paths')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.3793103448275862,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.28571428571428575,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.27999999999999997,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.27272727272727276,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2631578947368421,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.25,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.22580645161290322,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2222222222222222,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.21333333333333332,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.1851851851851852
        },
        "avg_similarity_score": 0.16448492959461003
    },
    {
        "instruction": "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.",
        "input": "Time Window: November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.\nCollectors: route-views.sg, route-views.eqix\nRecord Type: updates\nMOAS Prefix(es): 192.0.2.0/24",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2020-11-30 00:00:00 UTC\"\nend_time = \"2020-11-30 05:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.sg\", \"route-views.eqix\"],\n    record_type=\"updates\"\n)\n\n# Store list of AS paths\nas_paths = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            prefix = elem.fields[\"prefix\"]\n            if prefix == \"192.0.2.0/24\":\n                # Store advertising ASN and the AS path\n                advertising_asn = as_path[0]\n                as_paths[advertising_asn].append(as_path)\n\n# Calculate path inflation from - to originating ASN\ninflation_counts = defaultdict(list)\nfor orig_asn, as_path_list in as_paths.items():\n    for as_path in as_path_list:\n        inflation_count = len(as_path) - 1\n        inflation_counts[orig_asn].append(inflation_count)\n\n# Calculate the average path inflation per origin ASN\ninflation_averages = {asn:sum(counts)/len(counts) for asn, counts in inflation_counts.items()}\n\n# Extract ASN and their inflation values for plotting\nasns, inflation_values = zip(*inflation_averages.items())\n\n# Visualizing AS path inflation\nplt.figure(figsize=(14, 6))\nplt.bar(asns, inflation_values)\nplt.xlabel('Advertising ASNs')\nplt.ylabel('Average AS Path Inflation')\nplt.title('Average AS Path Inflation (MOAS 192.0.2.0/24)')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.43589743589743585,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.41935483870967744,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.38554216867469876,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3835616438356164,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.3333333333333333,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.3291139240506329,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.3,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.2894736842105263,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.28070175438596495,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.26229508196721313
        },
        "avg_similarity_score": 0.1844876346809619
    },
    {
        "instruction": "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.",
        "input": "Time Window: October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.\nCollectors: route-views.sg, route-views.eqix\nRecord Type: ribs",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-10-10 15:00:00 UTC\"\nend_time = \"2020-10-10 16:00:00 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.sg\", \"route-views.eqix\"],\n    record_type=\"ribs\"\n)\n\n# Store AS communities\nas_communities = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec.elements:\n        # Store the AS number and the community\n        as_num = elem.fields.get('as-path').split()[-1]\n        as_comm = elem.fields.get('communities')\n        as_communities[as_num].append(as_comm)\n\n# Count the number of unique communities for each AS\nunique_communities = {asn: len(set(comms)) for asn, comms in as_communities.items()}\n\n# Extract ASN and their counts\nasns, counts = zip(*unique_communities.items())\n\n# Visualizing the community count\nplt.figure(figsize=(14, 6))\nplt.bar(asns, counts)\nplt.xlabel('ASN')\nplt.ylabel('Number of Unique Communities')\nplt.title('Number of Unique Communities per ASN')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.4067796610169492,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.4067796610169492,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.37142857142857144,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.3636363636363637,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3571428571428571,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.33333333333333337,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32653061224489793,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.2985074626865672,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2592592592592593,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2272727272727273
        },
        "avg_similarity_score": 0.17183936699291993
    },
    {
        "instruction": "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.",
        "input": "Time Window: September 10, 2020, 03:00:00 UTC, until September 10, 2020, 06:00:00 UTC\nCollectors: route-views.amsix\nRecord Type: updates",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2020-09-10 03:00:00 UTC\"\nend_time = \"2020-09-10 06:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.amsix\"],\n    record_type=\"updates\"\n)\n\n# Store counts of updates\nupdate_counts = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    # Increment update count \n    time_epoch = int(rec.time)\n    time_minute = (time_epoch // 60)*60\n    update_counts[time_minute] += 1\n\n# Extract timestamp and counts\ntimestamps, counts = zip(*update_counts.items())\n\n# Visualizing time series\nplt.figure(figsize=(14, 6))\nplt.plot(timestamps, counts)\nplt.xlabel('Epoch Time in Minutes')\nplt.ylabel('Number of BGP updates')\nplt.title('Number of BGP updates Received per Minute')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.4067796610169492,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3492063492063492,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.3333333333333333,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3170731707317074,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.3132530120481928,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3116883116883117,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.30303030303030304,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2950819672131148,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2903225806451613,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.2857142857142857
        },
        "avg_similarity_score": 0.18914476176964903
    },
    {
        "instruction": "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.",
        "input": "Time window: July 8th, 2019, 11:00-11:05 AM\nCollector: ris-bog\nRecord Type: ribs\nIP Version: 4\nPrefix: 8.7.0.0/16",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-07-08 11:00:00\"\nend_time = \"2019-07-08 11:05:00\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time, \n    until_time=end_time,\n    collectors=[\"ris-bog\"],\n    record_type='ribs',\n    filter='prefix 8.7.0.0/16 and ipversion 4'\n)\n\n# Query the results\n... (rest of the code)\n\n# Get a count of the unique ASes\nunique_ases = set()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == 'A': # Look for BGP announcements\n             as_path = elem.fields['as-path'].split()\n             origin_as = as_path[-1]\n             unique_ases.add(origin_as)\n\nprint(\"Number of ASN originating prefix: {}\".format(len(unique_ases)))",
        "most_similar_instructions": {
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.25974025974025977,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.23655913978494625,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.22916666666666669,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.22857142857142856,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.21875,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.21739130434782608,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.21666666666666667,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.21538461538461542,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.20289855072463767,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.19999999999999998
        },
        "avg_similarity_score": 0.15765119305515518
    },
    {
        "instruction": "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.",
        "input": "Time window: January 1, 2010, 00:00:00 to December 31, 2010, 23:59:59\nCollectors: route-views2, route-views3, route-views4, ris-ripe, bview\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2010-01-01 00:00:00\"\nend_time = \"2010-12-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\", \"bview\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store MOAS prefixes and related ASes\nmoas_prefixes = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Check for BGP announcements\n    if elem.type == \"A\":\n      prefix = elem.fields[\"prefix\"]\n        as_path = elem.fields[\"as-path\"].split()\n        origin_as = as_path[-1]\n    \n   # Event Correlation:\n   # If the prefix is not already in the dictionary then add it, otherwise update the `ases` list\n  if prefix not in moas_prefixes:\n  moas_prefixes[prefix] = {'ases': [origin_as]}\n  else: \n  moas_prefixes[prefix]['ases'].append(origin_as)\n  \n... (rest of the code to analyze the moas_prefixes)",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.24489795918367344,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.22222222222222224,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.21052631578947367,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.1818181818181818,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.17647058823529413,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.17142857142857143,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.1702127659574468,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.16666666666666669,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.16393442622950818,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.15151515151515152
        },
        "avg_similarity_score": 0.12906472326766918
    },
    {
        "instruction": "Collect all unannounced announcements from the RIS collector in London (rrc03).",
        "input": "Collector: rrc03\nType: announcements\nFilter: prefix any ''",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collectors=[\"rrc03\"],\n    record_type=\"announcements\",\n    filter=\"prefix any ''\"\n)\n\n# Process announcement records\nfor rec in stream.records():\n    for elem in rec:\n   as_path = elem.fields[\"as-path\"].split()\n   prefix = elem.fields[\"prefix\"]\n   print(prefix + \": \" + \" -> \".join(as_path))",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.20689655172413793,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2051282051282051,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.19230769230769232,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.1764705882352941,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.17142857142857143,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.1702127659574468,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.15384615384615385,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.14634146341463417,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.14285714285714285,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.14285714285714285
        },
        "avg_similarity_score": 0.10871594928592031
    },
    {
        "instruction": "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.",
        "input": "Time window: March 3, 2018, 00:00:00 to March 5, 2018, 00:00:00\nCollectors: rrc03, rrc04\nMOAS: Prefixes",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2018-03-03 00:00:00\"\nend_time = \"2018-03-05 00:00:00\"\n\n# Set MOAS Prefixes\nMOAS_prefixes = ['1.0.0.0/8', '2.0.0.0/8', '3.0.0.0/8', '4.0.0.0/8', '5.0.0.0/8', '6.0.0.0/8', \n    '7.0.0.0/8', '8.0.0.0/8', '9.0.0.0/8', '10.0.0.0/8', '11.0.0.0/8', '12.0.0.0/8', '13.0.0.0/8', \n    '14.0.0.0/8', '15.0.0.0/8', '16.0.0.0/8', '17.0.0.0/8', '18.0.0.0/8', '19.0.0.0/8', '",
        "most_similar_instructions": {
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.3157894736842105,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.21818181818181817,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.19999999999999998,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.19607843137254902,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.18461538461538463,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.15789473684210525,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.15584415584415584,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.14705882352941174,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.14492753623188406,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.14285714285714285
        },
        "avg_similarity_score": 0.12360014096674352
    },
    {
        "instruction": "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.",
        "input": "Time window: January 22, 2006, 00:00:00 to January 23, 2006, 00:00:00\nCollectors: route-views2, ris-ripe, bview\nProject: ris\nRecord Type: ribs\nFilter: peer 64399",
        "output": "import pybgpstream\n\nstart_time = \"2006-01-22 00:00:00\"\nend_time = \"2006-01-23 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"ris\",\n    collectors=[\"route-views2\", \"ris-ripe\", \"bview\"],\n    record_type=\"ribs\",\n    filter=\"peer 64399\"\n)\n\nipv4_prefixes_with_announcements = set()\ntotal_announcements = 0\ntotal_paths = 0\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"ip-version\"] == \"4\":\n            total_announcements += 1\n            total_paths += 1\n            prefix = elem.fields[\"prefix\"]\n            ipv4_prefixes_with_announcements.add(prefix)\n\nresults = []\nresults.append(f\"Total Number of Announcements: {total_announcements}\")\nresults.append(f\"Total Number of Paths: {total_paths}\")\nresults.append(\"\\nIPv4 Prefixes with Announcements:\")\n\nfor prefix in ipv4_prefixes_with_announcements:\n    results.append(prefix)\n\nwith open('as63934_announcements.txt', 'w') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.42424242424242425,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.3508771929824561,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.3495145631067961,
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.3300970873786408,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.3275862068965517,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.3018867924528302,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2921348314606742,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.28260869565217395,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.2777777777777778,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.2653061224489796
        },
        "avg_similarity_score": 0.2050456818440363
    },
    {
        "instruction": "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.",
        "input": "Time window: January 22, 2006, 00:00:00 to January 23, 2006, 00:00:00\nCollectors: route-views2, ris-ripe, bview\nProject: ris\nRecord Type: ribs\nFilter: MOAS 65547",
        "output": "import pybgpstream\n\nstart_time = \"2006-01-22 00:00:00\"\nend_time = \"2006-01-23 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"ris\",\n    collectors=[\"route-views2\", \"ris-ripe\", \"bview\"],\n    record_type=\"ribs\",\n    filter=\"moas 65547\"\n)\n\nas_path_lengths = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"R\":\n            as_path = elem.fields[\"as-path\"].split()\n            if as_path[-1] == \"65547\":\n                as_path_length = len(as_path) \n                as_path_lengths.append(as_path_length)\n\nwith open('as65547_as_path_lengths.txt', 'w') as output_file:\n    for length in as_path_lengths:\n        output_file.write(str(length))\n        output_file.write(\"\\n\")",
        "most_similar_instructions": {
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.5454545454545455,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.45098039215686275,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.3829787234042553,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3636363636363637,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.32075471698113206,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.31932773109243695,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.3168316831683169,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.3157894736842105,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.30769230769230765
        },
        "avg_similarity_score": 0.21229463826190456
    },
    {
        "instruction": "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.",
        "input": "Time window: <noinput>\nCollectors: route-views2, ris-ripe, bview\nProject: ris\nRecord Type: updates\nFilter: Peer 4668 and Ipversion 6",
        "output": "import pybgpstream\n\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    project=\"ris\",\n    collectors=[\"route-views2\", \"ris-ripe\", \"bview\"],\n    record_type=\"updates\",\n    filter=\"peer 4668 and ipversion 6\"\n)\n\nannouncement_data = defaultdict(lambda: {'types': [], 'communities': []})\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"ip-version\"] == \"6\":\n            prefix = elem.fields[\"prefix\"]\n            announcement_data[prefix][\"types\"].append(elem.fields[\"type\"])\n            announcement_data[prefix][\"communities\"].append(elem.fields[\"communities\"])\n\nresults = []\nfor prefix, data in announcement_data.items():\n    results.append(f\"Prefix {prefix}: Types - {','.join(data['types'])}, Communities - {','.join(data['communities'])}\")\n\nwith open('as4668_announcements.txt', 'w') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.2692307692307692,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.21212121212121213,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.20833333333333334,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.2,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.19607843137254902,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.18867924528301888,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.17910447761194026,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.17582417582417584,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.17391304347826086,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.16901408450704225
        },
        "avg_similarity_score": 0.1353102204844587
    },
    {
        "instruction": "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.",
        "input": "Time window: <noinput>\nCollectors: route-views2, ris-ripe, bview\nProject: ris\nRecord Type: updates\nFilter: Peer 9498",
        "output": "import pybgpstream\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    project=\"ris\",\n    collectors=[\"route-views2\", \"ris-ripe\", \"bview\"],\n    record_type=\"updates\",\n    filter=\"peer 9498\"\n)\n\ncommunities = defaultdict(lambda: {'size': 0, 'prefixes': []})\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            community_size = len(elem.fields[\"communities\"].split(':'))\n            community = elem.fields[\"communities\"]\n            prefix = elem.fields[\"prefix\"]\n            communities[community][\"size\"] = community_size\n            communities[community][\"prefixes\"].append(prefix)\n\ncommunity_counter = Counter({community: data[\"size\"] for community, data in communities.items()})\nmost_common_communities = community_counter.most_common()\n\nresults = []\nresults.append(f\"Total Unique Communities: {len(communities)}\")\nresults.append(\"\\nMost Common Communities:\")\nfor community, size in most_common_communities:\n    results.append(f\"Community: {community}, Size: {size}, Prefixes - {','.join(communities[community]['prefixes'])}\")\n\nwith open('as9498_communities.txt', 'a') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3076923076923077,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.27586206896551724,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2553191489361702,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.24242424242424243,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.24000000000000002,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.1978021978021978,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.18181818181818185,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.1794871794871795,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.17500000000000004,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.1714285714285714
        },
        "avg_similarity_score": 0.14561055370494755
    },
    {
        "instruction": "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.",
        "input": "Time window: April 22, 2021, to May 22, 2021\nCollectors: route-views2, route-views6\nRecord Type: updates\nPrefix of Interest: 72.4.0.0/16",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2021-04-22 00:00:00\"\nend_time = \"2021-05-22 23:59:59\"\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views6\"],\n    record_type=\"updates\",\n    filter=\"prefix 72.4.0.0/16\"\n    )\n\n# Collect data\nas_path_lengths = []\nfor elem in stream:\n    as_path_length = len(elem.fields['as-path'].split(' '))\n    as_path_lengths.append(as_path_length)\n\n# Compute and print the mean AS path inflaiton\nmean_as_path_inflation = sum(as_path_lengths) / len(as_path_lengths)\nprint(f\"Mean AS Path Inflation: {mean_as_path_inflation}\")",
        "most_similar_instructions": {
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.36781609195402293,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.34090909090909094,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.28571428571428575,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.2857142857142857,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.26785714285714285,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.2631578947368421,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.25974025974025977,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.25925925925925924,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.2558139534883721,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.2558139534883721
        },
        "avg_similarity_score": 0.17418833539636147
    },
    {
        "instruction": "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.",
        "input": "Time window: March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59\nCollectors: No input\nRecord Type: ribs\nOrigin AS: 65501",
        "output": "import pybgpstream\nimport pprint\n\n# Define the time window\nstart_time = \"2021-03-03 00:00:00\"\nend_time = \"2021-03-03 23:59:59\"\n\n# Initialize the BGPStream objec\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"ribs\"\n    )\n\n# Collect data\nmoas_prefixes = []\nfor elem in stream:\n    if elem.fields['origin-as'] == \"65501\":\n        moas_prefixes.append(elem.fields[\"prefix\"])\n\n# Print the MOAS prefixes\nprint(\"MOAS Prefixes:\")\npprint.pprint(moas_prefixes)",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.4675324675324675,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.456140350877193,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.3376623376623377,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.3333333333333333,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.3291139240506329,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.325,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.32142857142857145,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3055555555555556,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.303030303030303,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.30000000000000004
        },
        "avg_similarity_score": 0.19766448109126425
    },
    {
        "instruction": "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.",
        "input": "Time window: No input\nCollectors: rrc00\nRecord Type: ribs\nRegion of Interest: No input",
        "output": "import pybgpstream\nimport networkx as nx\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    collectors=['rrc00'],\n    record_type='ribs'\n    )\n\n# set up graph G object\nG = nx.Graph()\n\nfor elem in stream:\n    # get the AS paths for the BGP announcements\n    as_path = elem.fields['as-path'].split(' ')\n    # create the edges in the graph G\n    for i, asn in enumerate(as_path):\n        if i+1 < len(as_path):\n            G.add_edge(as_path[i], as_path[i+1])\n\n# compute the clustering and hub scores\nclustering_scores = nx.clustering(G)\nhub_scores = nx.degree_centrality(G)\n\n# analyze the clustering and hub scores to study the formation of the topology\n# ...",
        "most_similar_instructions": {
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.2597402597402597,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.2580645161290323,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.24561403508771928,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.23333333333333334,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.22413793103448276,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.22222222222222224,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.2222222222222222,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.21818181818181817,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.21052631578947367,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.20588235294117646
        },
        "avg_similarity_score": 0.17281945108141927
    },
    {
        "instruction": "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.",
        "input": "Time window: No input\nCollectors: CAIDA\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=None, \n    until_time=None,\n    collectors=[\"CAIDA\"], \n    record_type=\"updates\"\n)\n\n# iterate through the stream\nfor elem in stream:\n    if elem.type == \"A\":\n        # collect the data for Customer Configurations\n        # ...\n        # analyze the data to study updates\n        # ...",
        "most_similar_instructions": {
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.46511627906976744,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.36842105263157887,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.3333333333333333,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.32653061224489793,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.3043478260869565,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.30188679245283023,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.30188679245283023,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.2926829268292683,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.25000000000000006,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.24489795918367346
        },
        "avg_similarity_score": 0.16997418731995134
    },
    {
        "instruction": "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.",
        "input": "Time window: June 3, 2021, 00:00:00 to June 3, 2021, 23:59:59\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates\nPrefix of Interest: 75.125.0.0/16",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2021-06-03 00:00:00\"\nend_time = \"2021-06-03 23:59:59\"\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\",\n    filter=\"prefix 75.125.0.0/16\"\n)\n\n# Collect data\nas_comm = {}\nfor elem in stream:\n    as_path = elem.fields['as-path'].split(' ')\n    for asn in as_path:\n        if asn not in as_comm:\n            as_comm[asn] = elem.fields['communities'].split(' ')\n\n# Analyze the communities to study malicious activity in AS paths\n# ...",
        "most_similar_instructions": {
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.28,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.26865671641791045,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.24489795918367346,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.23809523809523808,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.23255813953488372,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.21428571428571427,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.21212121212121213,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.20338983050847456,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.20289855072463772,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.20000000000000004
        },
        "avg_similarity_score": 0.1517543192756179
    },
    {
        "instruction": "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.",
        "input": "Time window: No input\nCollectors: route-views2, route-views3\nRecord Type: ribs\nPrefix of Interest: 72.1.0.0/16",
        "output": "import pybgpstream\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[\"route-views2\", \"route-views3\"],\n    record_type=\"ribs\",\n    filter=\"prefix 72.1.0.0/16\"\n)\n\n# Collect data\nas_paths = {}\nfor elem in stream:\n    as_path = elem.fields['as-path'].split(' ')\n    for asn in as_path:\n        if asn not in as_paths:\n            as_paths[asn] = [elem.time]\n        else:\n            as_paths[asn].append(elem.time)\n\n# Analyze the data to study historical trends\n# ...",
        "most_similar_instructions": {
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.43478260869565216,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2857142857142857,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2641509433962264,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.2456140350877193,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.23076923076923078,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.22222222222222224,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.2105263157894737,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.18181818181818182,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.1818181818181818,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.17777777777777778
        },
        "avg_similarity_score": 0.13624676754092915
    },
    {
        "instruction": "Secure the border gateway protocol announcements related to the address range 73.7.0.0/24 by performing security analysis on the AS relationships.",
        "input": "Time window: No input\nCollectors: No input\nRecord Type: updates\nAddress Range: 73.7.0.0/24",
        "output": "import pybgpstream\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    record_type=\"updates\",\n    filter=\"prefix 73.7.0.0/24\"\n)\n\n# Collect data\nas_relationships = {}\nfor elem in stream:\n    if elem.type == \"A\":\n        as_path = elem.fields['as-path'].split(' ')\n        for i, asn in enumerate(as_path):\n            if i+1 < len(as_path):\n                if (asn, as_path[i+1]) not in as_relationships:\n                    as_relationships[(asn, as_path[i+1])] = 1\n                else:\n                    as_relationships[(asn, as_path[i+1])] += 1\n\n# Analyze the AS relationships to secure the BGP announcements \n# ...",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.25,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.22222222222222224,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.186046511627907,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.1846153846153846,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.1702127659574468,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.16666666666666666,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.1643835616438356,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.16216216216216217,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.1518987341772152
        },
        "avg_similarity_score": 0.11763858778044525
    },
    {
        "instruction": "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.",
        "input": "Time window: No input\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates\nPrefix of Interest: 64.233.161.0/24",
        "output": "import pybgpstream\n\n# Initialize the BGPStream object\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\",\n    filter=\"prefix 64.233.161.0/24\"\n)\n\n# Collect data\npeer_asns = set()\nfor elem in stream:\n    peer_asns.add(elem.fields['peer-asn'])\n\n# Analyze the configurations of the peers of the BGP announcements\n# to study their network reliability and detect malicious activity\n# ...",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.4210526315789474,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.3846153846153846,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.24390243902439024,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.23809523809523808,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.22727272727272727,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.22222222222222224,
            "Secure the border gateway protocol announcements related to the address range 73.7.0.0/24 by performing security analysis on the AS relationships.": 0.21739130434782608,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.21621621621621623,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.2121212121212121,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.20930232558139533
        },
        "avg_similarity_score": 0.16017217809547474
    },
    {
        "instruction": "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.",
        "input": "Prefix: 1.2.0.0/16, Collectors: rrc00, linx, route-views.oregon-ix",
        "output": "import pybgpstream\n\n# Define the prefix and the collectors\nprefix = \"1.2.0.0/16\"\ncollectors = [\"rrc00\", \"linx\", \"route-views.oregon-ix\"]\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=collectors,\n    record_type=\"updates\",\n    filter=\"prefix more {}\".format(prefix)\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields['prefix'] == prefix:\n            print(\"Timestamp: {}, Originating ASN: {}, AS Path: {}\".format(\n                datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'),\n                elem.fields[\"peer-asn\"],\n                elem.fields[\"as-path\"]\n            ))",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.34146341463414637,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2903225806451613,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.2553191489361702,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.2545454545454545,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.24242424242424243,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.22950819672131148,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify and display BGP announcements where the suspicious prefix 216.58.192.0/19 is announced by ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a time series plot showing the number of suspicious announcements over time.": 0.22499999999999995,
            "Secure the border gateway protocol announcements related to the address range 73.7.0.0/24 by performing security analysis on the AS relationships.": 0.20408163265306126,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.19753086419753085,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.18918918918918917
        },
        "avg_similarity_score": 0.14778339464289406
    },
    {
        "instruction": "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.",
        "input": "Collectors: route-views.bom01, route-views.equinix-jp, route-views.saopaulo, Start time: today's date, 00:00:00, End time: today's date, 23:59:59.",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Get start time and end time\ntoday = datetime.today()\nstart_time = (today - timedelta(days=1)).strftime('%Y-%m-%d %H:00:00')\nend_time = today.strftime('%Y-%m-%d %H:00:00')\n\n# Define the collectors\ncollectors = [\"route-views.bom01\", \"route-views.equinix-jp\", \"route-views.saopaulo\"]\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=collectors,\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            print(\"Time: {}, BGP Communities: {}\".format(\n                datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'),\n                elem.fields[\"communities\"]\n            ))",
        "most_similar_instructions": {
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2950819672131148,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.2857142857142857,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.21428571428571427,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.1923076923076923,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.1891891891891892,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.18666666666666668,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.1754385964912281,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.17391304347826086,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.16901408450704225,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.16842105263157894
        },
        "avg_similarity_score": 0.12779252315067902
    },
    {
        "instruction": "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.",
        "input": "ASN: 8187, Collector: rrc12",
        "output": "import pybgpstream\nimport networkx as nx\n\n# Define the source ASN\nasn = 8187\ncollector = \"rrc12\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[collector],\n    record_type=\"updates\",\n    filter=\"peer {}\".format(asn)\n)\n\n# Create directed graph object\ngraph = nx.DiGraph()\n\n# Create a graph node for the AS\ngraph.add_node(asn)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        as_path = set([int(asn) for asn in elem.fields['as-path'].split()])\n        # Remove the source ASN\n        as_path.remove(asn)\n        # Create an edge for each AS in the AS PATH\n        for asn in as_path:\n            graph.add_edge(asn, asn, asn)\n\n# Visualize the graph\noptions = {\n    'node_color': 'black',\n    'node_size': 50,\n    'width': 1\n}\nnx.draw_shell(graph, **options)\nplt.title(\"Visualizing PayPal ASN 8187's Relationship with Other ASes\")\nplt.show()",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.1951219512195122,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.19444444444444445,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.1818181818181818,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.17857142857142858,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.17777777777777776,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.1764705882352941,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.17391304347826086,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.16216216216216217,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.1568627450980392,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.15584415584415584
        },
        "avg_similarity_score": 0.11433335455309573
    },
    {
        "instruction": "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.",
        "input": "Prefix: 1.1.1.0/24; Collectors: rrc01, rrc02, rrc03, rrc04; Time:Last week's date range",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Get start time and end time\ntoday = datetime.today()\nstart_time = (today - timedelta(days=7)).strftime('%Y-%m-%d %H:00:00')\nend_time = today.strftime('%Y-%m-%d %H:00:00')\n\n# Define the collectors\ncollectors = [\"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\"]\n\n# Define the prefix\nprefix = \"1.1.1.0/24\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=collectors,\n    record_type=\"updates\",\n    filter=\"prefix more {}\".format(prefix)\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == prefix:\n            print(\"Time: {}, IP Version: {}, AS Path: {}, Communities: {}\".format(\n                datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'),\n                elem.fields[\"ip-version\"],\n                elem.fields[\"as-path\"],\n                elem.fields[\"communities\"]\n            ))",
        "most_similar_instructions": {
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.3859649122807018,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.3333333333333333,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.2962962962962963,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.2325581395348837,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.22580645161290322,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2142857142857143,
            "Secure the border gateway protocol announcements related to the address range 73.7.0.0/24 by performing security analysis on the AS relationships.": 0.21428571428571427,
            "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.": 0.21428571428571427,
            "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.": 0.20338983050847456,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.20289855072463767
        },
        "avg_similarity_score": 0.15639779897583891
    },
    {
        "instruction": "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.",
        "input": "Collectors: rrc01,rrc02,rrc03; Time window: November 26, 2020 00:00:00 to November 30, 2020, 23:59:59, Filter: ASPATH length > 20",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Get start time and end time\ntoday = datetime.today()\nstart_time = (today - timedelta(days=4)).strftime('%Y-%m-%d %H:00:00')\nend_time = today.strftime('%Y-%m-%d %H:00:00')\n\n# Define the collectors\ncollectors = [\"rrc01\", \"rrc02\", \"rrc03\"]\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=collectors,\n    record_type=\"updates\",\n    filter=\"path > 20\"\n)\n\n# Count the number of updates\nupdate_count = 0\n\n# Compute metrics\ninflation_ratio = 0.0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields['as-path'].split()\n            path_length = len(as_path)\n            update_count += 1\n            inflation_ratio += (path_length - 20)\n\n# Calculate the Average Path Inflation\naverage_inflation = inflation_ratio / update_count\n\n# Display results\nprint(f\"Average path inflation = {average_inflation :.2f}\")",
        "most_similar_instructions": {
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3582089552238806,
            "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.": 0.33333333333333326,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2711864406779661,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.2580645161290323,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.25,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2413793103448276,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.2285714285714286,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.21212121212121213,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.19607843137254902,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.19354838709677422
        },
        "avg_similarity_score": 0.1415815681515238
    },
    {
        "instruction": "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.",
        "input": "Time window: 2010-01-01 00:00:00 to 2018-12-31 23:59:59\nCollectors: route-views5, route-views6, route-views7",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nimport networkx as nx\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2010-01-01 00:00:00\"\nend_time = \"2018-12-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views5\", \"route-views6\", \"route-views7\"],\n    record_type=\"ribs\"\n)\n\n# Create a directed graph\ngraph = nx.DiGraph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n   AS_src = elem.fields['as-path'].split(' ')[0]\n   AS_dst = elem.fields['peer-asn']\n   # Create an edge in the BGP relationship graph\n   graph.add_edge(AS_src, AS_dst, timestamp=timestamp_day)\n\n# Analyze the graph using networkx\nd_degrees = nx.degrees(graph)\ne_density = nx.density(graph)\n\n# Visualize the results\nplt.title(\"Historical Trends of AS Relationship\")\nplt.xlabel(\"Degree of AS Nodes\")\nplt.ylabel(\"Density of AS Graph\")\nplt.plot(d_degrees, e_density)\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.2727272727272727,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.26666666666666666,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.24489795918367344,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.2413793103448276,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.22222222222222224,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.22222222222222224,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2127659574468085,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.21052631578947367,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.20833333333333331,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.20779220779220778
        },
        "avg_similarity_score": 0.1520804476614872
    },
    {
        "instruction": "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.",
        "input": "Time window: 2020-05-01 00:00:00 to 2020-05-31 23:59:59\nCollectors: route-views.jinx",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2020-05-01 00:00:00\"\nend_time = \"2020-05-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.jinx\"],\n    record_type=\"updates\"\n)\n\n# A dictionary to store the counts of path length for each prefix\npath_length_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n   prefix = elem.fields['prefix']\n   AS_path = elem.fields['as-path'].split(' ')\n   # Measure AS path inflation\n   path_length_count[prefix] += len(AS_path)\n\n# Visualize the results\nplt.hist(path_length_count.values())\nplt.title(\"AS Path Length Distribution\")\nplt.xlabel(\"Path Length\")\nplt.ylabel(\"BGP Updates\")\nplt.show()",
        "most_similar_instructions": {
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3076923076923077,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2962962962962963,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.27906976744186046,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2727272727272727,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.26315789473684204,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.25000000000000006,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.24615384615384614,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2424242424242424,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.23076923076923075,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.22580645161290325
        },
        "avg_similarity_score": 0.1414022558494773
    },
    {
        "instruction": "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.",
        "input": "Time window: 2020-05-01 00:00:00 to 2020-05-31 23:59:59\nCollectors: ris-route",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2020-05-01 00:00:00\"\nend_time = \"2020-05-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route\"],\n    record_type=\"updates\"\n)\n\n# Dictionaries to store the count of different types of community numbers in the BGP record\ncommunity_numbers = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n   # Count the number of community numbers in the BGP record\n   community_numbers[len(elem.fields['community-numbers'])] += 1\n\n# Visualize the results\nplt.bar(list(community_numbers.keys()), list(community_numbers.values()))\nplt.title(\"Community Number Distribution\")\nplt.xlabel(\"Number of Communities\")\nplt.ylabel(\"BGP Updates\")\nplt.show()",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.41860465116279066,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.41666666666666663,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.39999999999999997,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.368421052631579,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.31884057971014496,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.3103448275862069,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.30188679245283023,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.29508196721311475,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.2758620689655172
        },
        "avg_similarity_score": 0.2127958153867558
    },
    {
        "instruction": "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.",
        "input": "Time window: 2020-05-01 00:00:00 to 2020-05-31 23:59:59\nCollectors: ris-route\nFilter: MOAS prefixes",
        "output": "import pybgpstream\nimport networkx as nx\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2020-05-01 00:00:00\"\nend_time = \"2020-05-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route\"],\n    record_type=\"updates\",\n    filter=\"moas\"\n)\n\n# Create a graph\ngraph = nx.DiGraph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n   AS_src = elem.fields['as-path'].split(' ')[0]\n   AS_dst = elem.fields['peer-asn']\n   # Get the Origin As and router\n   origin_as = elem.fields['origin-as']\n   router = elem.fields['router-id']\n   # Add edge in graph with Origin AS and router as attributes\n   graph.add_edge(AS_src, AS_dst, timestamp=timestamp_day, origin_as=origin_as, router=router)\n\n# Analyze the graph using networkx\nd_clustering = nx.clustering(graph)\nd_betweenness = nx.betweenness_centrality(graph)\n\n# Visualize the results\nplt.title(\"Topology of the Internet\")\nplt.xlabel(\"Node Clustering\")\nplt.ylabel(\"Node Betweenness\")\nplt.scatter(d_clustering.values(), d_betweenness.values())\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.42105263157894735,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.2950819672131148,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2916666666666667,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.27586206896551724,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.2413793103448276,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.24000000000000002,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.23529411764705882,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.23076923076923075,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.22222222222222224,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.21052631578947367
        },
        "avg_similarity_score": 0.16276502325790396
    },
    {
        "instruction": "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.",
        "input": "Time window: 2020-05-01 00:00:00 to 2020-05-31 23:59:59\nCollectors: ris-route",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2020-05-01 00:00:00\"\nend_time = \"2020-05-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the counts of path length or preference for each AS\nas_path_length_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n   As_path = elem.fields['as-path']\n   # Count the path length or preference of each AS\n   for asn in As_path.split(' '):\n  as_path_length_count[asn] += 1\n\n# Visualize the results\nplt.hist(as_path_length_count.values())\nplt.title(\"AS Path Length or Preference Distribution\")\nplt.xlabel(\"Path Length or Preference\")\nplt.ylabel(\"BGP Updates\")\nplt.show()",
        "most_similar_instructions": {
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.4230769230769231,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.35897435897435903,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.3157894736842105,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.3018867924528302,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.2727272727272727,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.25,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.24000000000000002,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.2333333333333333,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.23255813953488372,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.22641509433962265
        },
        "avg_similarity_score": 0.1638211136098518
    },
    {
        "instruction": "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.",
        "input": "Time window: Previous 24 hours\nCollectors: rrc00 - rrc06\nFilters: ipversion 4, prefix length > 0, comm",
        "output": "import pybgpstream\nimport community\nimport datetime\n\n# Previous 24 hrs time\nend_time = str(datetime.datetime.now())\nstart_time = str(datetime.datetime.now() - datetime.timedelta(hours=24))\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\", \"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\", \"rrc06\"],\n    record_type=\"ribs\",\n    filter=\"ipversion 4 and prefix length > 0 and comm\"\n)\n\n# Dictionary to store the AS level community information\nas_level_community = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    communitites = rec.fields[\"as-path\"]\n    for c in communitites: \n  community_as_list = [int(as.split(':')[0]) for as in c.split(' ')]\n  community_as_level = community.as_level_grouping(community_as_list, min_size=2, max_size=3)\n  community_type = community.detect_as_set_type(community_as_list)\n  \n  # Update the AS level community information\n  for as_list in community_as_level:\n   as_group = '_'.join(str(asn) for asn in sorted(as_list))\n   if as_group not in as_level_community:\n    as_level_community[as_group] = {\n      \n    }\n  as_level_community[as_group][community_type] = as_level_community[as_group].get(community_type, 0) + 1\n\n# Print the AS-level communities\nfor as_group, community_counts in as_level_community.items():\n    print(f\"AS-level community {as_group}:\")\n    for community_type, count in community_counts.items():\n        print(f\"  Community type: {community_type}, Count: {count}\")",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.24000000000000005,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.21818181818181817,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2142857142857143,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.21428571428571427,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.21052631578947367,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.20833333333333334,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.20689655172413793,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.19999999999999998,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.19753086419753088,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.19718309859154928
        },
        "avg_similarity_score": 0.14617289483010776
    },
    {
        "instruction": "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.",
        "input": "Time window: May 1, 2018, 00:00:00 - May 2, 2018, 00:00:00\nCollectors: route-views2, route-views3, route-views4\nFilters: peer 20940 and moas",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2018-05-01 00:00:00\"\nend_time = \"2018-05-02 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    filter=\"peer 20940 and moas\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store the AS path data\nas_path_data = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  timestamp = elem.time\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  prefix = elem.fields[\"prefix\"]\n  peer_as = elem.fields[\"peer-asn\"]\n\n  # Store the AS path data\n  as_path_data[prefix] = {\n      \"prefix\": prefix,\n      \"peer_as\": peer_as,\n      \"origin_as\": origin_as,\n      \"time\": timestamp,\n      \"as_path\": as_path\n  }\n\n# Print the analysed path data\nprint(\"MOAS Prefixes from AS 20940 (topological analysis)\")\nfor prefix, path_data in as_path_data.items():\n    print(f\"Prefix: {prefix}\")\n    for key, value in path_data.items():\n  if key != \"as_path\":\n      print(f\"  {key}: {value}\")\n    else:\n      print(f\"  AS Path:  {' -> '.join(value)}\")\n    print()",
        "most_similar_instructions": {
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.29166666666666663,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2456140350877193,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.24489795918367346,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.2222222222222222,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.21818181818181817,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.20833333333333331,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.19999999999999998,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.1971830985915493,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.19047619047619047,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.18604651162790697
        },
        "avg_similarity_score": 0.1447118375376865
    },
    {
        "instruction": "Measure AS path inflation from multiple RouteViews collectors (route-views2, route-views3, route-views4) by filtering the records with a specific prefix that has a path length less than 4. Find the number of such records in the past 24 hours.",
        "input": "Time window: Previous 24 hours\nCollectors: route-views2, route-views3, route-views4\nFilters: path length less 4",
        "output": "import pybgpstream\nimport datetime\n\n# Previous 24 hrs time\nend_time = str(datetime.datetime.now())\nstart_time = str(datetime.datetime.now() - datetime.timedelta(hours=24))\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\",\n    filter=\"path length less 4\"\n)\n\n# Variable to store the number of records\ncount = 0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  count += 1\n\n# Print the number of records\nprint(f\"Number of Records with Path Length Less Than 4 in the past 24 hours: {count}\")",
        "most_similar_instructions": {
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.29545454545454547,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.26804123711340205,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2564102564102564,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.2542372881355932,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.247787610619469,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.24096385542168675,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.2352941176470588,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.23255813953488372,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.22535211267605634,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.21917808219178084
        },
        "avg_similarity_score": 0.15482793903174386
    },
    {
        "instruction": "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.",
        "input": "Project: route-views, ris\nRecord Type: updates\nPrefix: 179.192.0.0/10",
        "output": "import pybgpstream\nimport sqlite3\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"1970-01-01 00:00:00\",\n    until_time=\"2030-01-01 00:00:00\",\n    projects=[\"route-views\", \"ris\"],\n    record_type=\"updates\",\n    filter=\"prefix 179.192.0.0/10\"\n)\n\n# Store count of announcements per prefix/origin width in a dictionary\nannouncements = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            prefix = elem.fields[\"prefix\"]\n            peer_as = elem.fields[\"peer-asn\"]\n\n            key = (prefix, peer_as)\n            if key not in announcements:\n                announcements[key] = 0\n            announcements[key] += 1\n\n# Create SQLite database\nconn = sqlite3.connect('bgp_announcements.db')\nc = conn.cursor()\n\n# Create table for storing results\nc.execute(\"CREATE TABLE bgp_announcements (prefix TEXT, peer_as INTEGER, count INTEGER)\")\n\n# Insert data into table\nfor (prefix, peer_as), count in announcements.items():\n c.execute(f\"INSERT INTO bgp_announcements VALUES ('{prefix}', {peer_as}, {count})\")\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()",
        "most_similar_instructions": {
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.3050847457627119,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.2935779816513761,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.2903225806451613,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.2777777777777778,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.27184466019417475,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.2698412698412699,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.26506024096385544,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.25862068965517243,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.25
        },
        "avg_similarity_score": 0.1705068584308171
    },
    {
        "instruction": "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.",
        "input": "Time window: Last Month\nCollectors: ripe, route-views4\nRecord Type: ribs",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Calculate the start and end times for the past month\nnow = datetime.utcnow()\nstart_time = (now - timedelta(days=30)).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ripe\", \"route-views4\"],\n    record_type=\"ribs\"\n)\n\n# Collect the MOAS prefixes into a set\nmoas_prefixes = set()\n\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        if len(set(as_path)) > 1: # Check for MOAS prefixes\n            moas_prefixes.add(elem.fields[\"prefix\"])\n\n# Count the number of MOAS prefixes\nnum_moas_prefixes = len(moas_prefixes)\n\n# Calculate the MOAS prefix length inflation\ntotal_moas_length = 0\nfor prefix in moas_prefixes:\n    length = int(prefix.split(\"/\")[-1])\n    total_moas_length += length\n\nmoas_inflation = total_moas_length / num_moas_prefixes\n\nprint(f\"Number of MOAS prefixes observed during the past month: {num_moas_prefixes}\")\nprint(f\"MOAS prefix length inflation: {moas_inflation}\")",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.34615384615384615,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.32653061224489793,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.32653061224489793,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3188405797101449,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.3125,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.2916666666666667,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2727272727272727,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.27027027027027023,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.2692307692307692,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2608695652173913
        },
        "avg_similarity_score": 0.16597962641351854
    },
    {
        "instruction": "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.",
        "input": "Collectors: route-views.jinx,route-views.kixp\nRecord Type: ribs",
        "output": "import pybgpstream \n\n# setup stream to collect data from RouteViews\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views.jinx\", \"route-views.kixp\"],\n    record_type=\"ribs\"\n)\n\n# analyze AS paths of communities in the networks of RouteViews\ncommunities_as_paths = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n        community = elem.fields[\"community\"]\n        as_path = elem.fields[\"as-path\"].split()\n        if community not in communities_as_paths:\n            communities_as_paths[community].append(as_path)\n    \n# analyze geographical characteristics of communities\ncommunity_geo_stats = defaultdict(dict)\n\nfor community, as_paths in communities_as_paths.items():\n    geo_stats = {\"most_common_prefix\": None, \"longest_as_path_length\": 0}\n\n    for as_path in as_paths:\n        path_length = len(as_path)\n        if path_length > geo_stats[\"longest_as_path_length\"]:\n            geo_stats[\"longest_as_path_length\"] = path_length\n            geo_stats[\"most_common_prefix\"] = as_path[0]\n\n    community_geo_stats[community] = geo_stats\n\n# print the analysed results\nprint(\"Analysis results:\")\nfor community, geo_stats in community_geo_stats.items():\n    print(f\"Community {community}: longest AS path length: {geo_stats['longest_as_path_length']}, most common origin AS: {geo_stats['most_common_prefix']}\")",
        "most_similar_instructions": {
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.2857142857142857,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.27450980392156865,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.26666666666666666,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.26666666666666666,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.24489795918367344,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.24390243902439024,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.24000000000000002,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.24000000000000002,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.23255813953488372,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.22641509433962265
        },
        "avg_similarity_score": 0.15072115335692093
    },
    {
        "instruction": "Use PyBGPStream to access live stream data sources and study the communities over the past two years.",
        "input": "Time window: Last Two Years\nCollectors: route-views.jinx,route-views.kixp\nRecord Type: ribs",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Calculate the start and end times for the past two years\nnow = datetime.utcnow()\nstart_time = (now - timedelta(days=365*2)).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.jinx\", \"route-views.kixp\"],\n    record_type=\"ribs\"\n)\n\n# Collect communities into a dictionary\ncommunities = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n        community = elem.fields[\"community\"]\n        communities[community].append(elem.fields)\n\n# Perform studies on the collected communities\nnum_communities = len(communities)\n\n# Print the results of the study\nprint(f\"Number of communities observed over the past two years: {num_communities}\")",
        "most_similar_instructions": {
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.39999999999999997,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.37837837837837834,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.372093023255814,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3333333333333333,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.32,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.30769230769230765,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.3043478260869565,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.28571428571428575,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.26229508196721313,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.25641025641025644
        },
        "avg_similarity_score": 0.14461274256786505
    },
    {
        "instruction": "Analyze the network configuration and reliability over the past two weeks.",
        "input": "Time window: Last Two Weeks\nCollectors: route-views.jinx,route-views.kixp\nRecord Type: ribs",
        "output": "import pybgpstream \nfrom datetime import datetime, timedelta\n\n# Calculate the start and end times for the past two weeks\nnow = datetime.utcnow()\nstart_time = (now - timedelta(days=14)).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.jinx\", \"route-views.kixp\"],\n    record_type=\"ribs\"\n)\n\n# Calculate the number of active routers per AS\nactive_asn_routers = defaultdict(int)\n\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        asn = as_path[-1]\n        if asn not in active_asn_routers:\n            active_asn_routers[asn] = 0\n        active_asn_routers[asn] += 1\n\n# Calculate the number of changes in network configuration\nchanges_in_conf = 0\nfor asn in active_asn_routers:\n    if active_asn_routers[asn] > 1:\n        changes_in_conf += 1\n\n# Print the results of the analysis\nprint(f\"Number of active routers per AS observed over the past two weeks: {active_asn_routers}\")\nprint(f\"Number of changes in network configuration over the past two weeks: {changes_in_conf}\")",
        "most_similar_instructions": {
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.4242424242424242,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.35714285714285715,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.30303030303030304,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2608695652173913,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2285714285714286,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.2222222222222222,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.21621621621621623,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.21428571428571427,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.20689655172413793,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.2
        },
        "avg_similarity_score": 0.12944624501145444
    },
    {
        "instruction": "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.",
        "input": "Time window: March 11th, 2020 00:00 to March 11th, 2020 06:00 UTC\nCollectors: ripe,route-views.jinx\nRecord Type: updates",
        "output": "import pybgpstream \n\n# setup stream to collect data from RouteViews\nstart_time = \"2020-03-11 00:00:00\"\nend_time = \"2020-03-11 06:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ripe\", \"route-views.jinx\"],\n    record_type=\"updates\"\n)\n\n# analyze the topology changes\ntopology_changes = defaultdict(int)\n\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        asn = as_path[-1] # Get the origin ASN\n        topology_changes[asn] += 1\n\n# print the analysed results\nprint(\"Analysis results:\")\nfor asn, count in topology_changes.items():\n    print(f\"ASN {asn}: {count} topology changes\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.5116279069767442,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.5,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3728813559322034,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3571428571428571,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3428571428571428,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.3389830508474576,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.3389830508474576,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3043478260869565,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.29090909090909095,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.28571428571428575
        },
        "avg_similarity_score": 0.15360140470367228
    },
    {
        "instruction": "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.",
        "input": "Projects: ris\nRecord Type: ribs",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"ris\",\n    record_type=\"ribs\"\n)\n\n# Initialize the analysis\nas196488 = set()\nas12640 = set()\n\nfor rec in stream.records():\n    for elem in rec:\n     if elem.type == \"R\":\n    if elem.fields[\"as-path\"].split()[-1] == \"196488\":\n        as196488.add(elem.fields[\"prefix\"])\n    elif elem.fields[\"as-path\"].split()[-1] == \"12640\":\n        as12640.add(elem.fields[\"prefix\"])\n\n# Analyze the relationship\nprint(\"Analysis of Relationship Between AS196488 and AS12640 using RIS Prefixes:\")\ncommon_prefixes = as196488.intersection(as12640)\nshared_prefixes = len(common_prefixes)\nif shared_prefixes > 0:\n    print(f\"AS196488 and AS12640 share {shared_prefixes} prefixes.\")\nelse:\n    print(\"AS196488 and AS12640 do not share any prefixes.\")",
        "most_similar_instructions": {
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.3,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2777777777777778,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.27586206896551724,
            "Analyze the network configuration and reliability over the past two weeks.": 0.2608695652173913,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.22857142857142854,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.22727272727272727,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.22222222222222224,
            "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.": 0.2222222222222222,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.21621621621621623,
            "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.": 0.20512820512820512
        },
        "avg_similarity_score": 0.12947535996859197
    },
    {
        "instruction": "Access live stream data sources, measure AS path inflation, and visualize the results.",
        "input": "Projects: ris-route\nCollectors: rrc00, rrc01\nTime Window: April 26, 2017, 22:00:00 to April 26, 2017, 23:00:00\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2017-04-26 22:00:00\"\nend_time = \"2017-04-26 23:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"ris-route\"],\n    collectors=[\"rrc00\", \"rrc01\"],\n    record_type=\"updates\"\n)\n\nas_path_lengths = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            path_length = len(elem.fields[\"as-path\"].split())\n            timestamp_minute = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:00')\n            as_path_lengths[timestamp_minute].append(path_length)\n\ntimestamps = sorted(as_path_lengths.keys())\nmean_lengths = [sum(as_path_lengths[timestamp])/len(as_path_lengths[timestamp]) for timestamp in timestamps]\n\n# Visualize the paths lengths\nplt.plot(timestamps, mean_lengths)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Mean AS Path Length\")\nplt.show()\n\n# Output the Measure AS Path inflation results\nprint(\"Measure AS Path Inflation Results:\")\nmaximum_length = max(mean_lengths)\nmaximum_length_timestamp = timestamps[mean_lengths.index(maximum_length)]\n\nprint(f\"The maximum value of path length inflation is {maximum_length}, detected at {maximum_length_timestamp}.\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.4666666666666667,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4444444444444444,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3870967741935484,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3636363636363637,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3589743589743589,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.3589743589743589,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.3428571428571428,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3157894736842105,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.30769230769230776,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.30434782608695654
        },
        "avg_similarity_score": 0.14991870520839967
    },
    {
        "instruction": "Access live stream data sources and analyze the communities for AS1234.",
        "input": "Projects: routeviews\nCollectors: rrc00\nTime Window: April 26, 2017, 22:00:00 to April 26, 2017, 23:00:00\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2017-04-26 22:00:00\",\n    until_time=\"2017-04-26 23:00:00\",\n    projects=[\"routeviews\"],\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\nas1234_communities = set()\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            if elem.fields[\"as-path\"].split()[-1] == \"1234\":\n                community = elem.fields[\"communities\"]\n                try:\n                    as1234_communities.add(community)\n                except KeyError:\n                    pass\n\n# Output the community of AS1234\nprint(\"Communities of AS1234\")\nfor comm in as1234_communities:\n    print(comm)",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.5833333333333334,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.5714285714285714,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4705882352941176,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.45161290322580644,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.41379310344827586,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3888888888888889,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.37837837837837834,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.37837837837837834,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.3636363636363636,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3181818181818182
        },
        "avg_similarity_score": 0.1539707988280421
    },
    {
        "instruction": "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00",
        "input": "Projects: routeviews\nCollectors: rrc00\nTime Window: April 26, 2017, 22:00:00 to April 26, 2017, 23:00:00\nRecord Type: updates",
        "output": "import pybgpstream\nfrom collections import defaultdict, Counter\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2017-04-26 22:00:00\",\n    until_time=\"2017-04-26 23:00:00\",\n    projects=[\"routeviews\"],\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\nmoas_prefixes = defaultdict(int)\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            moas_prefix = \"\"\n            if origin_as == \"1234\":\n                for asn in as_path[:-1]:\n                    moas_prefix += f\" {asn}-\"\n            moas_prefix = moas_prefix[:-1]\n            moas_prefixes[moas_prefix] += 1\n\nprefix_counter = Counter(moas_prefixes)\n\ntop_prefixes = prefix_counter.most_common(5)\n\n# Summary Report\nprint(\"Summary Report:\")\nprint(\"\\nTop MOAS Prefixes Originated by AS1234:\")\nfor prefix, count in top_prefixes:\n    print(f\"{prefix}: {count} times\")",
        "most_similar_instructions": {
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.39603960396039606,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.3733333333333333,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.360655737704918,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.35443037974683544,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.34920634920634924,
            "Access live stream data sources and analyze the communities for AS1234.": 0.34782608695652173,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.32786885245901637,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3235294117647059,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.3125,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.29850746268656714
        },
        "avg_similarity_score": 0.19497691134170853
    },
    {
        "instruction": "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.",
        "input": "Projects: routeviews\nCollectors: rrc00\nTime Window: April 26, 2017, 22:00:00 to April 26, 2017, 23:00:00\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2017-04-26 22:00:00\",\n    until_time=\"2017-04-26 23:00:00\",\n    projects=[\"routeviews\"],\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\nas1234_communities = defaultdict(int)\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            if elem.fields[\"as-path\"].split()[-1] == \"1234\":\n                community = elem.fields[\"communities\"]\n                try:\n                    as1234_communities[community] += 1\n                except KeyError:\n                    pass\n\n# Output the community of AS1234\nprint(\"Communities of AS1234\")\nfor community, count in as1234_communities.items():\n    communities_to_check = [\"65501:65535\", \"65535:65535\", \"65501:65534\", \"65534:65534\"]\n    if community in communities_to_check:\n        print(f\"Potentially malicious activity detected: {community} ({count} times)\")\n    else:\n        print(f\"{community}: {count} times\")",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.32,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.24242424242424243,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.23076923076923075,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.2222222222222222,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.1935483870967742,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.18461538461538463,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.18181818181818182,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.18181818181818182,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.17142857142857143,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.16326530612244897
        },
        "avg_similarity_score": 0.0970106469363934
    },
    {
        "instruction": "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.",
        "input": "Collectors: route-views.jinx, route-views.sov\nASN: 64496",
        "output": "import pybgpstream \n\n# Initialize the BGPStream \nstream = pybgpstream.BGPStream( \n    project=\"route-views\", \n    collectors=[\"route-views.jinx\", \"route-views.sov\"], \n    record_type=\"updates\"\n) \n\n# Start the stream\nstream.start()\n\n# Processing and filtering the BGP records\nfor elem in stream.get_next():\n    # Prefix filtering\n    if elem.fields['as-path'].split(' ')[-1] == '64496':\n        # Printing the AS-level destinations\n        print(f\"Found AS-level destination: {elem.fields['prefix']}\")\n\n# Stop the stream\nstream.stop()",
        "most_similar_instructions": {
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.27906976744186046,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.27027027027027023,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.2580645161290323,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2553191489361702,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.23076923076923078,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2127659574468085,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.21052631578947367,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.20833333333333334,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.20833333333333334,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.20833333333333334
        },
        "avg_similarity_score": 0.1400641684591539
    },
    {
        "instruction": "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.",
        "input": "Time window: January 8, 2015\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nASN: 4234",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2015-01-08 00:00:00\"\nend_time = \"2015-01-08 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# List to store the MOAS prefixes\nmoas_prefixes = []\n\n# Iterate through all the BGP records\nfor elem in stream.get_next():\n    if elem.fields[\"as-path\"].split(' ')[-1] == \"4234\": # Check for the ASN\n        moas_prefixes.append(elem.fields[\"prefix\"])\n\n# Print the MOAS prefixes\nprint(\"MOAS prefixes:\")\nprint(\"\\n\".join(moas_prefixes))",
        "most_similar_instructions": {
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.4117647058823529,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.29166666666666663,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.2857142857142857,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.27586206896551724,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.27027027027027023,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.26666666666666666,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.2545454545454545,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.23529411764705882,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.23076923076923078,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.22222222222222224
        },
        "avg_similarity_score": 0.17031219543072956
    },
    {
        "instruction": "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.",
        "input": "Time window: July 11, 2017, 00:00:00 to July 11, 2017, 00:15:00\nCollectors: route-views2, ris-ripe",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2017-07-11 00:00:00\"\nend_time = \"2017-07-11 00:15:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Lists to store incoming and outgoing AS paths\nincoming_as_paths = []\noutgoing_as_paths = []\n\n# Iterate through all the BGP records\nfor rec in stream.get_next():\n    # Incoming AS-Paths \n    if rec.fields['origin-as'] != rec.fields['peer-asn']:\n        incoming_as_path = rec.fields['as-path'].split(' ')\n        if incoming_as_path not in incoming_as_paths:\n            incoming_as_paths.append(incoming_as_path)\n    # Outgoing AS-Paths\n    outgoing_as_path = rec.fields['as-path'].split(' ')\n    if outgoing_as_path not in outgoing_as_paths:\n        outgoing_as_paths.append(outgoing_as_path)\n\n# Calculate AS path inflation \ninflation_ratio = len(outgoing_as_paths) / len(incoming_as_paths)\n\nprint(f\"Incoming AS-Paths: {len(incoming_as_paths)}\")\nprint(f\"Outgoing AS-Paths: {len(outgoing_as_paths)}\")\nprint(f\"Inflation ratio: {inflation_ratio}\")",
        "most_similar_instructions": {
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.47058823529411764,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.41269841269841273,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.35000000000000003,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.3414634146341463,
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.3191489361702128,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.3132530120481928,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.3111111111111111,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.30927835051546393,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.2978723404255319,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.29629629629629634
        },
        "avg_similarity_score": 0.19045517780172902
    },
    {
        "instruction": "Study the AS communities associated with the RouteViews collector.",
        "input": "Collector: route-views2",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"route-views\",\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the analysis\ncommunity_data = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Community filtering\n        if 'communities' in elem.fields: # Check for the presence of communities\n            as_path = elem.fields['as-path'].strip().split(' ')\n            communities = elem.fields['communities'].strip().split(' ')\n\n            # Aggregate data\n            for community in communities:\n                if community not in community_data:\n                    community_data[community] = {}\n                    community_data[community]['ASes'] = set()\n                    community_data[community]['prefixes'] = []\n                for AS in as_path:\n                    community_data[community]['ASes'].add(AS)\n                community_data[community]['prefixes'].append(elem.fields['prefix'])\n\n# Print the results\nfor community in community_data:\n    print(f\"Community {community}:\")\n    print(f\"    ASes: {community_data[community]['ASes']}\")\n    print(f\"    Prefixes: {community_data[community]['prefixes']}\")",
        "most_similar_instructions": {
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.35714285714285715,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.33333333333333326,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.30769230769230765,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.28571428571428575,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.26666666666666666,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.2608695652173913,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.2564102564102564,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.25,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.25,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.24242424242424243
        },
        "avg_similarity_score": 0.13153562660548657
    },
    {
        "instruction": "Access a live AS relationship stream from RIS collectors for the ASN 237.",
        "input": "Collectors: ris-rrc00, ris-rrc01\nASN: 237",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"ris\",\n    collectors=[\"ris-rrc00\", \"ris-rrc01\"],\n    record_type=\"updates\"\n)\n\n# Start the stream\nstream.start()\n\n# Processing and filtering the BGP records\nfor elem in stream.get_next():\n    for as_path in elem.fields['as-path'].split(' '):\n        if as_path == '237':\n            origin_as = elem.fields['origin-as']\n            print(f'Found AS Relationship: {origin_as} -> 237')\n\n# Stop the stream\nstream.stop()",
        "most_similar_instructions": {
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3684210526315789,
            "Access live stream data sources and analyze the communities for AS1234.": 0.33333333333333337,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3225806451612903,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.32,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.3125,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3076923076923077,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.30303030303030304,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2926829268292683,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.2857142857142857,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.27777777777777773
        },
        "avg_similarity_score": 0.14814789761855227
    },
    {
        "instruction": "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.",
        "input": "Date: July 10, 2018\nCollector: route-views2",
        "output": "import pybgpstream\nimport bgpslurp\n\n# Define the time window around the incident\nstart_time = \"2018-07-10 00:00:00\"\nend_time = \"2018-07-10 23:59:59\"\n\n# Estimate the configuration and reliability\ncfg, rel = bgpslurp.estimate_config_and_reliability(\n    collector=\"route-views2\", \n    bgpstream=pybgpstream.BGPStream(\n        from_time=start_time,\n        until_time=end_time,\n        collectors=[\"route-views2\"],\n        record_type=\"updates\")\n)\n\n# Print the results\nprint(f\"Configuration for route-views2:\")\nfor router in cfg:\n    print(f\"    {router}: {cfg[router]} routes\")\n\nprint(f\"Reliability for route-views2:\")\nfor router in rel:\n    print(f\"    {router}: {rel[router]:.2f}% messages received\")",
        "most_similar_instructions": {
            "Analyze the network configuration and reliability over the past two weeks.": 0.37499999999999994,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.37209302325581395,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.36842105263157887,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2857142857142857,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.2777777777777778,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.2631578947368421,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.25,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.23728813559322035,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.22727272727272724,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.22222222222222224
        },
        "avg_similarity_score": 0.16288595516341345
    },
    {
        "instruction": "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.",
        "input": "Time window: <noinput>\nCollectors: rrc06, ris\nRecord Type: updates (Announcements)\nPrefix of Interest: 1.2.3.0/22\nAS Path filter: _4455_",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use data from RRC06 and RIS collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"rrc06\", \"ris\"],\n    record_type=\"updates\",\n    prefix=\"1.2.3.0/22\",\n    path=\"_4455_\"\n)\n\navg_inflation = 0\ntotal_path_length = 0\nnum_updates = 0\n\nfor elem in stream:\n    if elem.type == \"A\":\n   as_path = elem.fields[\"as-path\"].split(\" \")\n\n   total_path_length += len(as_path)\n   num_updates += 1\n\navg_inflation = total_path_length / num_updates\n\nprint(f\"Average AS Path inflation for the prefix 1.2.3.0/22 based on the filter '_4455_': {avg_inflation}\")",
        "most_similar_instructions": {
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3661971830985916,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.29999999999999993,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.28571428571428564,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.28125,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.27272727272727276,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.2711864406779661,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.27027027027027023,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.2608695652173913,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2580645161290323,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.25
        },
        "avg_similarity_score": 0.16897485749110974
    },
    {
        "instruction": "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.",
        "input": "Time window: <noinput>\nCollectors: rrc00, ris\nRecord Type: updates (Announcements)\nPrefix of Interest: 64.233.161.0/24",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use data from rrc00 and RIS collectors\nstream = pybgpstream.BGPStream(\n    project=\"rrc00,ris\",\n    record_type=\"updates\",\n    prefix=\"64.233.161.0/24\",\n)\n\ncommunity_counts = {}\n\nfor elem in stream:\n    if elem.type == \"A\":\n   community_list = elem.fields[\"communities\"].split(\":\")\n\n   for community in community_list:\n  if community not in community_counts:\n     community_counts[community] = 1\n  else:\n     community_counts[community] += 1\n\n# Analyzing the BGP Communities\nsorted_communities = {k: v for k, v in sorted(community_counts.items(), key=lambda item: item[1], reverse=True)}\n\nprint('BGP Communities of Prefix 64.233.161.0/24:')\nfor k, v in sorted_communities.items():\n    print(f\"{k}: {v}\")",
        "most_similar_instructions": {
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.4878048780487805,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.3773584905660377,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.34285714285714286,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.3225806451612903,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.3181818181818182,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.3137254901960784,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.2857142857142857,
            "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.": 0.27906976744186046,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.27906976744186046,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2727272727272727
        },
        "avg_similarity_score": 0.17445853260528857
    },
    {
        "instruction": "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.",
        "input": "Time window: <noinput>\nCollectors: sunset\nRecord Type: updates (Announcements)\nPrefix of Interest: 1.2.3.0/24",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use data from the RouteViews (sunset) project\nstream = pybgpstream.BGPStream(\n    project=\"sunset\",\n    record_type=\"updates\",\n)\n\nas_path_lengths = []\n\nfor elem in stream:\n    if elem.type == \"A\" and elem.fields[\"prefix\"] == \"1.2.3.0/24\":\n   as_path = elem.fields[\"as-path\"].split(\" \")\n   as_path_lengths.append(len(as_path))\n\n# Plotting the AS Path Lengths\nplt.figure(figsize=(12, 6))\nplt.hist(as_path_lengths, bins=range(min(as_path_lengths), max(as_path_lengths) + 2, 1))\n\nplt.title(\"AS Path Lengths for Prefix 1.2.3.0/24\")\nplt.xlabel(\"AS Path Length\")\nplt.ylabel(\"Frequency\")\nplt.show()",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.37499999999999994,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.34375,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3333333333333333,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2909090909090909,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.2857142857142857,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.26086956521739135,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.2580645161290323,
            "Study the AS communities associated with the RouteViews collector.": 0.2564102564102564,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.2545454545454545,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2439024390243902
        },
        "avg_similarity_score": 0.18310632881946426
    },
    {
        "instruction": "Print the AS Names associated with the BGP communities that announce the prefix 1.2.0.0/16 during the last 15 minutes. Filer primitive 'peer' is used for fetching the data.",
        "input": "Time window: <noinput>\nCollectors: <noinput>\nRecord Type: updates (Announcements)\nPrefix of Interest: 1.2.0.0/16\nFilter primitive: peer",
        "output": "import pybgpstream\nimport pyasn\n\n# Initialize the AS Name Resolver\nasndb = pyasn.pyasn('ipasn_db_latest.dat')\n\n# Initializing the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=pybgpstream.bgpstream_get_time_now() - 86400,\n    until_time=pybgpstream.bgpstream_get_time_now(),\n    collector=\"route-views2\",\n    record_type=\"updates\",\n    prefix=\"1.2.0.0/16\",\n    filter=\"peer\",\n)\n\ncommunities = {}\n\nfor elem in stream:\n    if elem.type == \"A\":\n   community_list = elem.fields[\"communities\"].split(\":\")\n   for community in community_list:\n  as_num = int(community.split(\"_\")[0])\n  as_name = asndb.lookup(as_num)[0]\n  if as_name not in communities:\n     communities[as_name] = 1\n  else:\n     communities[as_name] += 1\n\n# Printing the AS Names\nprint('AS Names associated with BGP Communities that announce the prefix 1.2.0.0/16:')\nfor name, count in communities.items():\n    print(f\"{name}: {count}\")",
        "most_similar_instructions": {
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.38709677419354843,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.3225806451612903,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.3157894736842105,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.2916666666666667,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.2745098039215686,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.27272727272727276,
            "Study the AS communities associated with the RouteViews collector.": 0.24390243902439024,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.23529411764705882,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2318840579710145,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.21875
        },
        "avg_similarity_score": 0.1416129509201106
    },
    {
        "instruction": "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".",
        "input": "Time window: <noinput>\nCollectors: ris, route-views\nRecord Type: updates (Announcements)\nPrefix of Interest: <noinput>\nFilter primitive: peer 16204",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use data from RIS and RouteViews collectors\nstream = pybgpstream.BGPStream(\n    project=\"ris,route-views\",\n    record_type=\"updates\",\n    filter=\"peer 16204\",\n)\n\nasn = 16204\nmoas_prefixes = {}\n\nfor elem in stream:\n    if elem.type == \"A\":\n   as_path = elem.fields[\"as-path\"].split(\" \")\n\n   if str(asn) in as_path and elem.fields[\"prefix\"] not in moas_prefixes:\n  moas_prefixes[elem.fields[\"prefix\"]] = elem.time\n\n# Printing the MOAS Prefixes\nprint(\"Maximum Origin AS (AS16204) prefixes:\")\nfor prefix, timestamp in moas_prefixes.items():\n    print(f\"{prefix} - {timestamp}\")",
        "most_similar_instructions": {
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.3181818181818182,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.3181818181818182,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.30769230769230765,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.3050847457627119,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.29508196721311475,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2909090909090909,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2909090909090909,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.2857142857142857,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.28070175438596495,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2692307692307692
        },
        "avg_similarity_score": 0.18830495553363075
    },
    {
        "instruction": "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.",
        "input": "Time window: last week\nCollectors: rrc00 - rrc08",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Get the start and end time of the last week \nstart_time = datetime.now().replace(hour=0,minute=0,second=0,microsecond=0) - timedelta(days=7)\nend_time = datetime.now().replace(hour=23,minute=59,second=59,microsecond=0)\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\",\"rrc01\",\"rrc02\",\"rrc03\",\"rrc04\",\"rrc05\",\"rrc06\",\"rrc07\",\"rrc08\"],\n    record_type=\"updates\"\n)\n\n# Get the BGP updates\nrecords = []\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\": # Check for BGP announcements\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            prefix = elem.fields[\"prefix\"]\n            records.append({\"prefix\": prefix, \"as_path\": ' -> '.join(as_path)})\n\n# DataFrame from the records\ndf = pd.DataFrame(records)\n\n# Filter only AS3078 announcements\ndf = df[df['as_path'].str.contains('3078')]\n\n# Show the results\ndf.head(10)",
        "most_similar_instructions": {
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.38805970149253727,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.37499999999999994,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.3636363636363636,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.3333333333333333,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.30985915492957744,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.3055555555555556,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.29545454545454547,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify and display BGP announcements where the suspicious prefix 216.58.192.0/19 is announced by ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a time series plot showing the number of suspicious announcements over time.": 0.28571428571428575,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.27027027027027023,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.2619047619047619
        },
        "avg_similarity_score": 0.188607109589373
    },
    {
        "instruction": "Study the communities assigned to AS64410 from the RouteViews collector.",
        "input": "Collector: route-views\nASN: 64410",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[\"route-views\"],\n    record_type=\"updates\"\n)\n\n# Dataframe to store the data\ndf = pd.DataFrame(columns=['as_path', 'communities'])\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            # Check for AS64410\n            if origin_as == \"64410\":\n                communities = elem.fields[\"communities\"].split()\n                # Store data in the dataframe\n                df = df.append({'as_path': ' -> '.join(as_path), 'communities': communities},  ignore_index=True)\n\n# Print the data\ndf.head(10)",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.631578947368421,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.32,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.29629629629629634,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2857142857142857,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.28571428571428564,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.27586206896551724,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.25806451612903225,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.25,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.24242424242424243
        },
        "avg_similarity_score": 0.14611825968136785
    },
    {
        "instruction": "Measure AS path inflation from the RouteViews collector.",
        "input": "Collector: route-views\nNoinput",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store data \ncount_paths_dict = defaultdict(int)\ncount_asns_dict = defaultdict(int)\ninflation_dict = defaultdict(float)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"A\":\n            # Get the Path Length \n            as_path = elem.fields[\"as-path\"].split()\n            path_length = len(as_path)\n\n            # Get the number of ASNs\n            asns = set(as_path)\n            num_asns = len(asns)\n\n            # Map Path Length to number of Paths \n            if path_length >= 0:\n                count_paths_dict[path_length] += 1\n            # Map number of ASNs to number of Paths \n            if num_asns >= 0:\n                count_asns_dict[num_asns] += 1\n\n\n# Get Paths with length greater than 0\npath_lengths = [path_length for path_length in count_paths_dict.keys() if path_length > 0]\n\n# Calculate Inflation Rates for each length\nfor path_length in path_lengths: \n    # Calculate Inflation Rate \n    inflation_rate = count_paths_dict[path_length] / count_asns_dict[path_length]\n    # Map Path Length to Inflation Rate \n    inflation_dict[path_length] = inflation_rate\n\n# Print the results\nprint(\"AS Path Length \u00b7 Inflation Rates\")\nfor path_length in path_lengths:\n    print(f\"{path_length:<2} \u00b7 {inflation_dict[path_length]:.3f}\")",
        "most_similar_instructions": {
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.5217391304347827,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4761904761904762,
            "Study the AS communities associated with the RouteViews collector.": 0.47058823529411764,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.4444444444444445,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3333333333333333,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.31578947368421056,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.3157894736842105,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.30769230769230765,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.3,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.29411764705882354
        },
        "avg_similarity_score": 0.13989694660117116
    },
    {
        "instruction": "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.",
        "input": "Collectors: route-views, ripe\nASN: 64215",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[\"route-views\",\"ripe\"],\n    record_type=\"ribs\"\n)\n\n# Dataframe to store the data\ndf = pd.DataFrame(columns=['peer_as', 'collector'])\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"R\":\n            as_path = elem.fields[\"as-path\"].split()\n            # Check if the last AS is 64215\n            if as_path[-1] == \"64215\":\n                df = df.append({'peer_as': as_path[-2], 'collector': rec.collector},  ignore_index=True)\n\n# Group by collector \ndf_grouped = df.groupby(['collector'])[\"peer_as\"].nunique()\n\n# Print the results\nprint(\"Collector \u00b7 Number of Neighbours\")\nfor collector in df_grouped.keys():\n    print (f\"{collector} \u00b7 {df_grouped[collector]:.0f}\")",
        "most_similar_instructions": {
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.3278688524590163,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.29411764705882354,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.2926829268292683,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.25925925925925924,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.25641025641025644,
            "Access live stream data sources and analyze the communities for AS1234.": 0.24242424242424246,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.23809523809523808,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.23809523809523808,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.23255813953488372,
            "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.": 0.23255813953488372
        },
        "avg_similarity_score": 0.16078632172410495
    },
    {
        "instruction": "Analyse security threats received by AS28376 from the RouteViews collector.",
        "input": "Collector: route-views\nASN: 28376",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Dataframe to store the data\ndf = pd.DataFrame(columns=['prefix', 'origin_as', 'origin_country'])\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            # Check if the last AS is 28376\n            if as_path[-1] == \"28376\":\n                # Get prefix\n                prefix = elem.fields[\"prefix\"]\n                # Get Origin AS Country\n                origin_as_country = elem.fields[\"as-org\"].split(\"-\")[-1]\n                # Append to dataframe\n                df = df.append({'prefix': prefix, 'origin_as': as_path[0], 'origin_country': origin_as_country},  ignore_index=True)\n\n# Print the results\ndf.head(10)",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.4444444444444445,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.4000000000000001,
            "Study the AS communities associated with the RouteViews collector.": 0.3157894736842105,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2857142857142857,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.28571428571428564,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.24242424242424243,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.186046511627907,
            "Visualize the PayPal ASN 8187's relationship with other ASes with the Python NetworkX library using data from the rrc12 Python BGPStream collector.": 0.18181818181818182,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.17647058823529413,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.17391304347826086
        },
        "avg_similarity_score": 0.10540340180302063
    },
    {
        "instruction": "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.",
        "input": "Time window: Last 7 days Collectors: rrc00, rrc01, rrc02, rrc03 AS of interest: AS6939",
        "output": "import pybgpstream\nimport datetime\nfrom collections import defaultdict\n\n# Define the time window around the incident\nend_time = datetime.datetime.now()\nstart_time = end_time - datetime.timedelta(days=7)\n\n#Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime('%Y-%m-%d %H:%M:%S'),\n    until_time=end_time.strftime('%Y-%m-%d %H:%M:%S'),\n    collectors=[\"rrc00\",\"rrc01\",\"rrc02\",\"rrc03\"],\n    record_type=\"updates\"\n)\n\n# Create a default dictionary to store\n# the origin ASes and their counts\norigins = defaultdict(lambda: 0)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  if elem.type == \"A\":  # Check for BGP announcements\n timestamp_hour = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00')\n origin_as = elem.fields[\"as-path\"].split()[-1]\n if elem.fields[\"peer-asn\"] == \"6939\":\n     origins[origin_as] += 1\n\nif len(origins) > 1:\n    print (\"Inflation was detected for AS6939\")\n\n# Print out the origin AS and count\nfor origin, count in origins.items():\nprint (\"%s AS: %s - %d\" % (origin, elem.fields[\"peer-asn\"], count))",
        "most_similar_instructions": {
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.28,
            "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.": 0.2692307692307692,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.23255813953488372,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.22950819672131148,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.22727272727272727,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.2222222222222222,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.21276595744680854,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.2105263157894737,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.20408163265306126,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.19444444444444445
        },
        "avg_similarity_score": 0.14974172112087597
    },
    {
        "instruction": "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.",
        "input": "Time window: 10 minutes Collector: ris-ripe AS of interest: AS25152 Prefixes: Top 5",
        "output": "import pybgpstream\nimport datetime\nfrom collections import Counter\n\n# Define the time window for the data collection loop\nend_time = datetime.datetime.now()\nstart_time = end_time - datetime.timedelta(minutes=10)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime('%Y-%m-%d %H:%M:%S'),\n    until_time=end_time.strftime('%Y-%m-%d %H:%M:%S'),\n    collector=\"ris-ripe\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store the top 5 AS paths based on number of announcements\ntop_paths_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  path_length = len(elem.fields[\"as-path\"].split())\n  path_pref = elem.fields[\"path-attrs\"][0][\"value\"]\n  origin_as = elem.fields[\"as-path\"].split()[-1]\n\n  # Check if the origin AS is AS25152\n  if origin_as == \"25152\":\n    # Update the Top 5 Paths Counter\n    path_stats = (path_length, path_pref)\n    top_paths_counter[path_stats] += 1\n\n# Print out the top 5 most commonly seen \n# path length and preference\ntop_five = top_paths_counter.most_common(5)\nfor path, count in top_five:\n    print (\"Path length: %d, Path preference: %d - %d\" % (path[0], path[1], count))\n\n# Visualize the path length and preference \n# for the top 5 BGP prefixes\nx, y, s = zip(*top_five)\nx, y = zip(*x)\nplt.scatter(x, y, s=s, color='blue')\nplt.xlabel('Path Length')\nplt.ylabel('Path Preference')\nplt.title('Path Length and Preference for the Top 5 BGP Prefixes announced by AS25152')\nplt.show()",
        "most_similar_instructions": {
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.33962264150943394,
            "Access live stream data sources and analyze the communities for AS1234.": 0.30769230769230765,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.30434782608695654,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.2933333333333334,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.2888888888888889,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.28125000000000006,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.27450980392156865,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2692307692307692,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.2692307692307692,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.2641509433962264
        },
        "avg_similarity_score": 0.1815445268877466
    },
    {
        "instruction": "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.",
        "input": "Time window: October 5, 2006, 07:00:00 to October 5, 2006, 10:00:00 Collectors: rrc00, rrc01, rrc02, rrc03 AS of interest: AS2131",
        "output": "import pybgpstream\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\nstart_time = \"2006-10-05 07:00:00\"\nend_time = \"2006-10-05 10:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\",\"rrc01\",\"rrc02\",\"rrc03\"],\n    record_type=\"updates\"\n)\n\n# Graph to store the AS topology\ngraph = nx.DiGraph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n\n  # Check if AS2131 appears in the path\n  if \"2131\" in as_path:\n      if not graph.has_node(\"2131\"):\n          # Add AS2131 as the source AS to the graph\n          graph.add_node(\"2131\", type=\"origin\")\n      else:\n          # Add nodes for the remaining AS in the path\n          for asn in as_path:\n      if graph.has_node(asn):\n          continue\n      else:\n          graph.add_node(asn, type=\"peer\")\n\n# Draw the graph\npos = nx.spring_layout(graph)\nplt.figure(figsize=(8, 8))\nnx.draw(graph, pos, node_color='lightblue',\n        with_labels=True, font_color='black',\n        font_weight='bold')\nplt.title('AS2131 Topology')\nplt.axis('off')\nplt.show()",
        "most_similar_instructions": {
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.4333333333333333,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.38888888888888884,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.3829787234042554,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.3508771929824561,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.34782608695652173,
            "Collect BGP announcement data for AS12389 from multiple RouteViews collectors for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00. Identify and report anomalies in BGP announcements for AS12389, specifically if the number of announcements exceeds a threshold of 1000 per minute. Additionally, provide a list of the top 5 prefixes originated by AS12389 during this time window.": 0.3469387755102041,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.3440860215053763,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.33663366336633666,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1841549842037809
    },
    {
        "instruction": "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).",
        "input": "ASN: 53514 Collectors: ris-routes,ris-nop,ris-b.",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\ncollectors = [\"ris-routes\", \"ris-b\", \"ris-nop\"]\nstream = pybgpstream.BGPStream(collectors=collectors, record_type=\"updates\")\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"as-path\"]:\n            as_path = elem.fields[\"as-path\"].split()\n            if \"53514\" in as_path:\n                print(\n                    f\"Prefix: {elem.fields['prefix']} | Origin-AS: {as_path[-1]} | Communities: {elem.fields['communities']}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.41025641025641024,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3636363636363636,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3555555555555555,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.35294117647058826,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.3428571428571428,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.33333333333333337,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3333333333333333,
            "Study the AS communities associated with the RouteViews collector.": 0.3225806451612903,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.29787234042553196
        },
        "avg_similarity_score": 0.17763175409760928
    },
    {
        "instruction": "Use PyBGPStream to analyze the topology of the Internet.",
        "input": "No input.",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(record_type=\"updates\")\n\n# Dictionary to store AS-level topology\nas_topology = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            as_topology[origin_as].extend(as_path[:-1])\n\n# Print the AS topology\nfor asn, peers in as_topology.items():\n    print(f\"AS {asn} peers: {', '.join(peers)}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.3846153846153846,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3448275862068966,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.33333333333333326,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.32,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.31578947368421056,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.30303030303030304,
            "Analyze the network configuration and reliability over the past two weeks.": 0.3,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.29411764705882354,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.28571428571428575,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.2857142857142857
        },
        "avg_similarity_score": 0.14567417959200077
    },
    {
        "instruction": "Using PyBGPStream library, measure AS path inflation for collector route-views.linx",
        "input": "Collector: route-views.linx",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(collectors=[route-views.linx], record_type=\"updates\")\n\n# Dictionary to store info about prefixes\nprefixes = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            as_path_length = len(elem.fields[\"as-path\"].split())\n            prefixes[prefix].append(as_path_length)\n\n# Calculate the average path length for each prefix\nfor prefix, path_lengths in prefixes.items():\n    avg_path_length = sum(path_lengths) / len(path_lengths)\n    print(f\"Average path length for prefix {prefix} is {avg_path_length}\")",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.5,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.4444444444444445,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.32,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.2580645161290323,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.25,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.25,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2448979591836735,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.23809523809523808,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.23529411764705885,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.21052631578947367
        },
        "avg_similarity_score": 0.09755290550021875
    },
    {
        "instruction": "Access live stream data sources from RIS collectors to study the relationships between different ASes.",
        "input": "Collectors: ris-routes,ris-nop,ris-b.",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\ncollectors = [\"ris-routes\", \"ris-b\", \"ris-nop\"]\nstream = pybgpstream.BGPStream(collectors=collectors, record_type=\"updates\")\n\n# Dictionary to store AS-level topology\nas_relations = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            for as_pair in zip(as_path[:-1], as_path[1:]):\n                as_relations[as_pair[0]].append(as_pair[1])\n\n# Print the relationships between ASes\nfor key, value in as_relations.items():\n    print(f\"AS {key} has relationships with the following ASes: {', '.join(value)}\")",
        "most_similar_instructions": {
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.5405405405405405,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.5,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4615384615384615,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4571428571428572,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.43749999999999994,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.42857142857142855,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4210526315789474,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.4,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.3902439024390244,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.3902439024390244
        },
        "avg_similarity_score": 0.16809292601158501
    },
    {
        "instruction": "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.",
        "input": "Time window: Past 24 hours Collectors: ris-b,ris-routes,ris-nop Prefix: 205.157.0.0/16",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Define the time window for the analysis\nnow = datetime.now()\nstart_time = (now - timedelta(hours=24)).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\ncollectors = [\"ris-b\", \"ris-routes\", \"ris-nop\"]\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=collectors, record_type=\"updates\")\n\n# Dictionary to store info about prefixes\nprefixes = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == \"205.157.0.0/16\":\n            as_path_length = len(elem.fields[\"as-path\"].split())\n            prefixes[elem.fields[\"prefix\"]].append(as_path_length)\n\n# Calculate the standard deviation of the path length for the prefix\npath_lengths = prefixes[\"205.157.0.0/16\"]\navg_path_length = sum(path_lengths) / len(path_lengths)\nsd_path_length = 0\n\nfor path_length in path_lengths:\n    sd_path_length += (path_length - avg_path_length)**2\n\nsd_path_length = (sd_path_length / len(path_lengths))**0.5\n\nprint(\n    f\"Average path length for prefix 205.157.0.0/16 is {avg_path_length} and the standard deviation of the path length is {sd_path_length}\")\n\nif sd_path_length > 5:\n    print(\"Anomalous path lengths detected!\")\nelse:\n    print(\"No anomalous path lengths detected.\")",
        "most_similar_instructions": {
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3846153846153846,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.303030303030303,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.28571428571428575,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.2692307692307693,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.26666666666666666,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.26666666666666666,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.25882352941176473,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.2545454545454545,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2545454545454545,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.2545454545454545
        },
        "avg_similarity_score": 0.17011099076116276
    },
    {
        "instruction": "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.",
        "input": "Collector: rrc02",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(collectors=[rrc02], record_type=\"updates\")\n\n# Dictionary to store info about prefixes\nprefixes = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            as_path_length = len(elem.fields[\"as-path\"].split())\n            origin_as = elem.fields[\"as-path\"].split()[-1]\n            pref_level = elem.fields[\"pref\"]\n            prefixes[prefix].append((origin_as, as_path_length, pref_level))\n\n# Calculate the preferred path length\nfor prefix, path_lengths in prefixes.items():\n    pref_length = max([length for asn, length, pref in path_lengths if pref == max([pref for asn, length, \n        pref in path_lengths])])\n    print(\n        f\"Preferred path length for prefix {prefix} is {pref_length} by AS {origin_as}\")",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.4166666666666667,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.35897435897435903,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.33333333333333337,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3243243243243243,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.3125,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.26666666666666666,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.2439024390243902,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.24,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.22727272727272724,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.22222222222222224
        },
        "avg_similarity_score": 0.11188185081149633
    },
    {
        "instruction": "Use PyBGPStream to analyze the security events associated with the collector rrc12.",
        "input": "Collector: rrc12",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(collectors=[rrc12], record_type=\"updates\")\n\n# Dictionary to store security events\nsecurity_events = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            origin_as = elem.fields[\"as-path\"].split()[-1]\n            security_events[origin_as].append([elem.fields[\"prefix\"], elem.fields[\"as-path\"]])\n\n# Print the security events\nfor asn, events in security_events.items():\n    print(f\"AS {asn} is responsible for the following security events:\")\n    for event in events:\n        print(f\"Prefix: {event[0]}, AS Path: {event[1]}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the topology of the Internet.": 0.5714285714285715,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.5185185185185186,
            "Study the AS communities associated with the RouteViews collector.": 0.4761904761904762,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.3448275862068966,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.29411764705882354,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.2926829268292683,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.2727272727272727,
            "Analyse security threats received by AS28376 from the RouteViews collector.": 0.2727272727272727,
            "Analyze the network configuration and reliability over the past two weeks.": 0.2608695652173913,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.25
        },
        "avg_similarity_score": 0.13664664734779292
    },
    {
        "instruction": "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.",
        "input": "Prefix: 192.219.32.0/22\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\",\n    filter=\"prefix exact 192.219.32.0/22\"\n)\n\nprefix = \"192.219.32.0/22\"\nas_paths = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            if elem.fields[\"prefix\"] == prefix:\n                as_path = elem.fields[\"as-path\"]\n                as_paths.append(as_path)\n\nprint(as_paths)",
        "most_similar_instructions": {
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.37837837837837834,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.3225806451612903,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.32142857142857145,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.3103448275862069,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.29032258064516125,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.2898550724637681,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.28571428571428564,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.28125000000000006,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.2745098039215686,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.2692307692307692
        },
        "avg_similarity_score": 0.1944635505991897
    },
    {
        "instruction": "Access the available BGPstream data sources.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Get a list of collectors\ncollectors = stream.collectors\n\nprint(collectors)",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.3529411764705882,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3157894736842105,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.28571428571428575,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.2608695652173913,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.23076923076923075,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.21428571428571427,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.21052631578947367,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.20689655172413793,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.20512820512820512,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.1935483870967742
        },
        "avg_similarity_score": 0.09017337137041227
    },
    {
        "instruction": "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.",
        "input": "Time window: July 1, 2015 to July 5, 2015\nCollector: rrc00\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2015-07-01 00:00:00\"\nend_time = \"2015-07-05 23:59:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\n# Get the top 20 prefixes\nprefixes = []\ncounts = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            prefix = elem.fields[\"prefix\"]\n            counts[prefix] += 1\n\nprefixes = counts.most_common(20)\n\n# Analyze the AS paths\nmoas_paths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            prefix = elem.fields[\"prefix\"]\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            if prefix in prefixes:\n                if origin_as not in moas_paths:\n                    moas_paths[origin_as] = {}\n                if prefix not in moas_paths[origin_as]:\n                    moas_paths[origin_as][prefix] = []\n                moas_paths[origin_as][prefix].append(as_path)\n\n# Output the leading AS paths for each prefix\nfor asn in moas_paths:\n    print(\"ASN:\", asn)\n    for prefix in moas_paths[asn]:\n        most_common_path = max(moas_paths[asn][prefix], key=lambda x:moas_paths[asn][prefix].count(x))\n        print(\"\\t Prefix:\", prefix, \"\\t Leading AS Path:\", most_common_path)",
        "most_similar_instructions": {
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.39999999999999997,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.34920634920634924,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3283582089552239,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.32727272727272727,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.26190476190476186,
            "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.": 0.25806451612903225,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.25,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.25,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.24615384615384614,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.2456140350877193
        },
        "avg_similarity_score": 0.15944036041414747
    },
    {
        "instruction": "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.",
        "input": "Time window: June 24, 2015 to June 30, 2015\nCollector: rrc00\nPrefix: 194.29.176.0/24\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2015-06-24 00:00:00\"\nend_time = \"2015-06-30 23:59:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\"],\n    record_type=\"updates\",\n    filter=\"prefix exact 194.29.176.0/24\"\n)\n\n# Store the AS paths\nas_paths = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            if elem.fields[\"prefix\"] == \"194.29.176.0/24\":\n                as_path = elem.fields[\"as-path\"].split()\n                as_paths.append(as_path)\n\n# Calculate path inflation\npath_lengths = []\nfor p in as_paths:\n    path_lengths.append(len(p))\n\n# Output the average path length\nprint(\"Average path length:\", sum(path_lengths) / float(len(path_lengths)))",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.41509433962264153,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.4,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3661971830985915,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3384615384615384,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.33333333333333337,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3333333333333333,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.3174603174603175,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.2894736842105263,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.2857142857142857,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.2807017543859649
        },
        "avg_similarity_score": 0.18770130990768294
    },
    {
        "instruction": "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.",
        "input": "Time window: One hour ago from now\nCollectors: route-view, ris-ripe\nRecord type: updates\nPeer: 19514, 21040",
        "output": "import pybgpstream\n\n# Calculate time for one hour ago\nfrom_time = datetime.now() - timedelta(hours=1)\nuntil_time = datetime.now()\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"route-view\", \"ris-ripe\"],\n    record_type=\"updates\",\n    peer=[\"19514\", \"21040\"]\n)\n\n# Initialize the sets to store the announced prefixes\nas_19514_prefixes = set()\nas_21040_prefixes = set()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # BGP announcement\n    as_path = elem.fields[\"as-path\"].split()\n    origin_as = as_path[-1]\n    prefix = elem.fields[\"prefix\"]\n\n    # Store the announced prefixes\n    if origin_as == \"19514\":\n     as_19514_prefixes.add(prefix)\n    elif origin_as == \"21040\":\n     as_21040_prefixes.add(prefix)\n\n# Calculate the differences between the prefixes\nas_19514_only = as_19514_prefixes.difference(as_21040_prefixes)\nas_21040_only = as_21040_prefixes.difference(as_19514_prefixes)\n\n# Print out the results\nprint(f\"Prefixes only announced by AS19514 in the last hour: {as_19514_only}\")\nprint(f\"Prefixes only announced by AS21040 in the last hour: {as_21040_only}\")",
        "most_similar_instructions": {
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.47619047619047616,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.43243243243243246,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4242424242424242,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.41025641025641024,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.39999999999999997,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.35294117647058826,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3404255319148936,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.33333333333333337,
            "Analyze the network configuration and reliability over the past two weeks.": 0.30303030303030304
        },
        "avg_similarity_score": 0.17823556798983306
    },
    {
        "instruction": "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.",
        "input": "Time window: Last 24 hours\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nRecord type: updates\nMOAS filter:\nmoas_registry(\"AS65583\")",
        "output": "import pybgpstream\nfrom pybgpstream import Moas\n\n# Calculate time for 24 hours ago\nfrom_time = datetime.now() - timedelta(hours=24)\nuntil_time = datetime.now()\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\",\n    filter_fn=Moas.roa_registry(\"AS65583\")\n)\n\n# Initialize the counters for counting AS path lengths\nshort_path_count = 0\nlong_path_count = 0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # BGP announcement\n  as_path = elem.fields[\"as-path\"].split()\n  path_length = len(as_path)\n\n  # Count the number of short and long AS paths\n  if path_length > 14:\n   long_path_count += 1\n  else:\n   short_path_count += 1\n\n# Print out the results\nprint(f\"Number of short AS Paths (length <= 14): {short_path_count}\")\nprint(f\"Number of long AS Paths (length > 14): {long_path_count}\")",
        "most_similar_instructions": {
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.4888888888888889,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.38888888888888884,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.3225806451612903,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.32,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.3111111111111111,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.2916666666666667,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.28571428571428575,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.2727272727272727,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.2580645161290323,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.25531914893617014
        },
        "avg_similarity_score": 0.15774491422911993
    },
    {
        "instruction": "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.",
        "input": "Time window: Last one month\nCollectors: route-view, ris-ripe\nRecord type: updates\nMOAS filter: pre_filters=[\"prefix 1.2.3.0/24\"]",
        "output": "import pybgpstream\n\n# Calculate time for one month ago\nfrom_time = datetime.now() - timedelta(days=30)\nuntil_time = datetime.now()\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"route-view\", \"ris-ripe\"],\n    record_type=\"updates\",\n    pre_filters=[\"prefix 1.2.3.0/24\"]\n)\n\n# Initialize the dictionary to store the AS and their communities for the prefix\nas_communities = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # BGP announcement\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  communities = elem.fields[\"communities\"]\n\n  # Store the AS and their communities\n  if origin_as not in as_communities:\n   as_communities[origin_as] = []\n  as_communities[origin_as] += communities\n\n# Print out the results\nfor asn, communities in as_communities.items():\n   print(f\"Origin AS: {asn}, Community: {','.join(communities)}\")",
        "most_similar_instructions": {
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.5116279069767442,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.4864864864864864,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.4,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.39215686274509803,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.37735849056603776,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.34782608695652173,
            "Print the AS Names associated with the BGP communities that announce the prefix 1.2.0.0/16 during the last 15 minutes. Filer primitive 'peer' is used for fetching the data.": 0.3018867924528302,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.3,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.29090909090909084,
            "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.": 0.2857142857142857
        },
        "avg_similarity_score": 0.18499401205815244
    },
    {
        "instruction": "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.",
        "input": "Time window: January 1, 2019, 12:00:00 to January 1, 2019, 15:00:00\nCollectors: route-views, ris\nRecord Type: updates\nPrefix: 212.68.135.0/24",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-01-01 12:00:00\"\nend_time = \"2019-01-01 15:00:00\"\n\n# Initialize the BGPStream \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"ris\"],\n    record_type=\"updates\",\n    filter=\"prefix exact 212.68.135.0/24\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Raw BGP data stored in 'elem.fields' dictionary\n        ... (the rest of the code)",
        "most_similar_instructions": {
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3934426229508197,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.375,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3508771929824561,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.34782608695652173,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.33898305084745767,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3384615384615385,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.33333333333333337,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3125,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.30612244897959184,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.3043478260869565
        },
        "avg_similarity_score": 0.18839394448816582
    },
    {
        "instruction": "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream \nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\", \"bview\"],\n    record_type=\"updates\",\n    multiple_ours=True\n)\n\n# Dictionaries to store the count of BGP announcements per AS per time window\nas_announcements = {}\npath_inflation_counts = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  moas_prefix = elem.fields[\"prefix\"]\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  timestamp = elem.time \n\n  if moas_prefix not in as_announcements:\n as_announcements[moas_prefix] = []\n  as_announcements[moas_prefix].append((as_path, timestamp))\n  \n  # Count the number of BGP announcements per AS\n  if origin_as not in path_inflation_counts:\n path_inflation_counts[origin_as] = 1\n  else:\n path_inflation_counts[origin_as] += 1\n\n  # Measure the AS path inflation\n  path_inflation = len(as_path)/path_inflation_counts[origin_as]\n\n  # Aggregate data and print results\n  print(\"MOAS prefix {0} has AS path inflation of {1:.2f}\".format(moas_prefix, path_inflation))",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.5,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.47368421052631576,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.41860465116279066,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.4000000000000001,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.39999999999999997,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.39999999999999997,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.3829787234042554,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.38095238095238104,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3666666666666667,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.36065573770491804
        },
        "avg_similarity_score": 0.19969482312662898
    },
    {
        "instruction": "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.",
        "input": "Time window: December 24, 2004, 09:00:00 to December 24, 2004, 23:59:00\nCollectors: route-views2, route-views3, route-views4, ris-ripe, bview\nRecord Type: updates",
        "output": "import pybgpstream\nimport networkx as nx\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom datetime import datetime\nfrom networkx.algorithms.centrality import closeness_centrality\n\n# Define the time window\nstart_time = \"2004-12-24 09:00:00\"\nend_time = \"2004-12-24 23:59:00\"\n\n# Initialize the BGPStream \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\", \"bview\"],\n    record_type=\"updates\"\n)\n\n# Initialize the Graph\nG = nx.Graph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n  \n  # Create edges to represent the AS paths\n  for as1, as2 in zip(as_path[:-1], as_path[1:]):\n G.add_edge(as1, as2)\n\n# Compute the closeness centrality\ncloseness_centrality_dict = closeness_centrality(G)\n\n# Create network visualization\nfig, ax = plt.subplots(figsize=(12, 12))\nnx.draw_networkx(G, ax=ax)\nax.tick_params(left=True, bottom=True, labelleft=True, labelbottom=True)\nax.set_frame_on(False)\nax.set_xticks([])\nax.set_yticks([])\nplt.tight_layout()\nplt.show()\n\n# Print results\nprint(\"Closeness Centrality of ASes:\")\nprint(closeness_centrality_dict)",
        "most_similar_instructions": {
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2916666666666667,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2692307692307692,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.22727272727272727,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.22641509433962265,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.22222222222222224,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.20408163265306126,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.19512195121951217,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.18867924528301888,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.186046511627907,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.186046511627907
        },
        "avg_similarity_score": 0.11569995687672335
    },
    {
        "instruction": "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.",
        "input": "Time window: October 1, 2014, 00:00:01 to November 1, 2014, 23:59:59\nCollectors: route-views, ris\nRecord Type: updates",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2014-10-01 00:00:01\"\nend_time = \"2014-11-01 23:59:59\"\n\n# Initialize the BGPStream \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"ris\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the count of BGP announcement path lengths\npath_length_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n  \n  # Aggregate data\n  path_length_counter[len(as_path)] += 1\n\n# Convert data to DataFrame\ndf = pd.DataFrame.from_dict(path_length_counter, orient=\"index\")\n# Rename columns\ndf = df.rename(columns={0: \"Count\"})\n# Reset the index\ndf = df.reset_index().rename(columns={\"index\": \"Path Length\"})\n\n# Create line chart\n... (rest of the code for data processing and plotting)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.45161290322580644,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3636363636363636,
            "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.": 0.3333333333333333,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.3333333333333333,
            "Measure AS path inflation from the RouteViews collector.": 0.30769230769230765,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.29411764705882354,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.27906976744186046,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.27272727272727276,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.27027027027027023,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.27027027027027023
        },
        "avg_similarity_score": 0.15914060898515328
    },
    {
        "instruction": "Collect RIB entries from all RouteViews and RIS collectors for the prefix 208.67.222.222/32.Time window should cover the October 15, 2018, to October 10, 2018. Identify the AS paths that include ASNs 4134 (CERNET), 5511 (Orange), or 20860 (Sunrise). Create a line chart to visualize how the AS path changes over the days",
        "input": "Time window: October 15, 2018, 00:00:00 to October 10, 2018, 00:00:00\nCollectors: ris-ripe, route-views",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2018-10-15 00:00:00\"\nend_time = \"2018-10-10 00:00:00\"\n\n# Define the prefix \nprefix = \"208.67.222.222/32\"\n\n# Define the suspicious AS numbers\nsuspicious_asns = {\"4134\", \"5511\", \"20860\"}\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-ripe\", \"route-views\"],\n    record_type=\"ribs\"\n)\n\n# Store the AS paths and timestamps of suspicious events\nsuspicious_events_data = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\" and elem.fields[\"prefix\"] == prefix:\n  as_path = elem.fields[\"as-path\"].split()\n  if any(asn in suspicious_asns for asn in as_path):\n event_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n suspicious_events_data.append({'time': event_time, 'as_path': as_path})\n\n# Convert to DataFrame\ndf = pd.DataFrame(suspicious_events_data)\n\n# Parse days from timestamps\ndf['day'] = df['time'].apply(lambda x: x.split(' ')[0])\n\n# Group data by day and extract AS paths\nday_groups = df.groupby('day')\nas_paths_by_day = {name:group['as_path'].tolist() for name, group in day_groups}\n\n# Generate a dictionary of AS paths based on the changes in days\nas_paths_change_by_day = {}\nfor key, prev_as_paths in as_paths_by_day.items():\n    for other_key, other_as_paths in as_paths_by_day.items():\n        if key > other_key:\n            for as_path in other_as_paths:\n                if as_path not in prev_as_paths:\n                    if key in as_paths_change_by_day:\n                        as_paths_change_by_day[key].append(as_path)\n                    else:\n                        as_paths_change_by_day[key] = [as_path]\n\n# Count occurrences of each ASN\nasn_counts = []\nfor key in as_paths_change_by_day:\n    asns = [asn for path in as_paths_change_by_day[key] for asn in path]\n    asn_counts.append(Counter(asns))\n\n# Generate a DataFrame for visualization\ntally = dict(pd.DataFrame(asn_counts).sum())\ndata = [{'Day': key, 'ASN': k, 'Count': v} for key, d in as_paths_change_by_day.items() for k, v in tally.items()]\nasn_counts_df = pd.DataFrame(data)\n\n# Plot the number of occurrences of each ASN\nplt.figure(figsize=(15, 8))\nfor asn in tally.keys():\n    x = asn_counts_df[asn_counts_df['ASN'] == asn]['Day']\n    y = asn_counts_df[asn_counts_df['ASN'] == asn]['Count']\n    plt.plot(x, y, label=asn)\nplt.xlabel('Days')\nplt.xticks(rotation=45, ha='right')\nplt.ylabel('Number of Occurrences')\nplt.title('Changes in Suspicious AS Paths for ASNs 4134, 5511, and 20860')\nplt.legend()\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.2962962962962963,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.28846153846153844,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.2696629213483146,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.2654867256637168,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.23809523809523808,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.23728813559322032,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.23529411764705885,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify and display BGP announcements where the suspicious prefix 216.58.192.0/19 is announced by ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a time series plot showing the number of suspicious announcements over time.": 0.23214285714285712,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.2276422764227642
        },
        "avg_similarity_score": 0.14321599742458171
    },
    {
        "instruction": "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).",
        "input": "Time window: <noinput>\nCollectors: ris-ripe, route-views",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Define the prefix \nprefix = \"96.86.128.0/18\"\n\n# Define the suspicious AS numbers\nsuspicious_asns = {\"393852\", \"394320\"}\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n collecto rs=[\"ris-ripe\", \"route-views\"],\n record_type=\"ribs\"\n )\n\n# Store the AS paths and timestamps of suspicious events\nsuspicious_events_data = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\" and elem.fields[\"prefix\"] == prefix:\n   as_list = elem.fields[\"communities\"].split()\n   if any(asn in suspicious_asns for asn in as_list):\n   event_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n   suspicious_events_data.append({'time': event_time, 'communities': as_list})\n\n# Convert to DataFrame\ndf = pd.DataFrame(suspicious_events_data)\n\n# Extracting all ASNs from communities\nall_asns = [asn for comm in df['communities'] for asn in comm]\n\n# Count occurrences of each ASN\nasn_counts = Counter(all_asns)\n\n# Print the communities that contain ASNs 393852 or 394320\nfor asn in suspicious_asns:\n    communities_containing_asn = [comm for comm in df['communities'] if asn in comm]\n    print(f'Communities containing ASN {asn}:')\n    for comm in communities_containing_asn:\n        print(comm)\n    print('')\n \n# Print the number of occurrences of each ASN \nprint(f'Number of occurrences of each ASN:')\nfor asn, count in asn_counts.items():\n    print(f' ASN {asn}: {count}')",
        "most_similar_instructions": {
            "Collect RIB entries from all RouteViews and RIS collectors for the prefix 208.67.222.222/32.Time window should cover the October 15, 2018, to October 10, 2018. Identify the AS paths that include ASNs 4134 (CERNET), 5511 (Orange), or 20860 (Sunrise). Create a line chart to visualize how the AS path changes over the days": 0.3296703296703297,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3214285714285714,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3125,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.2962962962962963,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.28125,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2711864406779661,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.2696629213483146,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.26666666666666666,
            "Collect RIBs from RIS-BOG collector using IPv4 between 11:00 and 11:05 AM on July 8th, 2019. Query the collected RIBs for the prefix 8.7.0.0/16 and generate the number of unique ASNs originating this prefix.": 0.2666666666666666,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.2653061224489796
        },
        "avg_similarity_score": 0.16240778359897473
    },
    {
        "instruction": "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.",
        "input": "Time window: <noinput>\nCollectors: ris-ripe, route-views",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Define the suspicious prefix\nprefix = \"91.198.174.0/24\"\n\n# Define the suspicious AS number\nas_number = \"45690\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\ncollectors=[\"ris-ripe\", \"route-views\"],\nrecord_type=\"updates\"\n)\n\n# Store the AS paths and timestamps of suspicious events\nsuspicious_events_data = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\" and elem.fields[\"prefix\"] == prefix:\n   as_path = elem.fields[\"as-path\"].split()\n   if as_number in as_path:\n    event_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n    suspicious_events_data.append({'time': event_time, 'as_path': as_path})\n\n# Convert to DataFrame\ndf = pd.DataFrame(suspicious_events_data)\n\n# Generate a dictionary of AS paths based on the changes in days\nas_path_lengths = {}\nfor key, as_path in df['as_path'].iteritems():\n    length = len(as_path)\n    if length in as_path_lengths:\n        as_path_lengths[length] += 1\n    else:\n        as_path_lengths[length] = 1\n\n# Generate a DataFrame for visualization\ndata = [{'Length': key, 'Count': value} for key, value in as_path_lengths.items()]\npath_length_df = pd.DataFrame(data)\n\n# Plot the number of occurrences of each AS Path length\nplt.figure(figsize=(10, 5))\nplt.bar(path_length_df['Length'], path_length_df['Count'], color='blue')\nplt.xlabel('ASPath Length')\nplt.ylabel('Number of Occurrences')\nplt.title('AS Path Inflation for ASN 45690')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.47619047619047616,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3829787234042554,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3728813559322034,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.3571428571428571,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.3421052631578947,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.32653061224489793,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3125,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3103448275862069,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3076923076923077,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.3050847457627119
        },
        "avg_similarity_score": 0.1861380298464646
    },
    {
        "instruction": "Study the Communities information for AS9370 from RIS BGP streams.",
        "input": "Project: ris\nTime Window: May 15, 2018, 12:00:00 to May 16, 2018, 12:00:00\nFilter: Path \"_9370_\"",
        "output": "import pybgpstream\n\n# Define the time window for May 15, 2018\nstart_time = \"2018-05-15 12:00:00\"\nend_time = \"2018-05-16 12:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"ris\",\n    filter=\"path _9370_\"\n)\n\n# Dictionaries to store the communities and their count\ncommunities = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\": # BGP announcements\n            community_dict = elem.fields[\"communities\"]\n            if community_dict is not None:\n                # Extract the communities\n                for community in community_dict.values():\n                    # Check if the community already exists\n                    if community not in communities:\n                        communities[community] = 0\n                \n                    # Increment the count\n                    communities[community] += 1\n\n# Print the communities and their count\nprint(f\"Number of Communities Discovered: {len(communities)}\")\nfor community in sorted(communities.keys()):\n    print(f\"{community}: {communities[community]}\")",
        "most_similar_instructions": {
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.4000000000000001,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.3333333333333333,
            "Study the AS communities associated with the RouteViews collector.": 0.3157894736842105,
            "Access live stream data sources and analyze the communities for AS1234.": 0.28571428571428564,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.27586206896551724,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.27586206896551724,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.2727272727272727,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.23076923076923075,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.22857142857142856,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.22222222222222224
        },
        "avg_similarity_score": 0.12073317879264438
    },
    {
        "instruction": "Measure AS Path Inflation phenomenon between October 6, 2018, and October 13, 2018, and visualize the results as a bar chart.",
        "input": "Time Window: October 6, 2018, 00:00:00 to October 13, 2018, 00:00:00\nProjects: route-views\nFilter: Path \"_10418_\"",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\n\n# Define the time window for October 6, 2018\nstart_time = \"2018-10-06 00:00:00\"\nend_time = \"2018-10-13 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"route-views\"],\n    filter=\"path _10418_\"\n)\n\n# Count the number of AS paths of length 1, 2, and $L$ for each $L$.\npath_length_to_count = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            # Extract the AS path\n            as_path = elem.fields[\"as-path\"].split()\n            path_length = len(as_path)\n\n            # Check if the path length is already in the dictionary\n            if path_length not in path_length_to_count:\n                path_length_to_count[path_length] = 0\n            \n            # Increment the count\n            path_length_to_count[path_length] += 1\n\n# Visualize the results using a bar chart\nbar_width = 0.7\nplt.bar(range(len(path_length_to_count)), list(path_length_to_count.values()), width=bar_width, color=\"green\")\nplt.xticks(range(len(path_length_to_count)), list(path_length_to_count.keys()))\nplt.title(\"AS Path Inflation between October 6, 2018, and October 13, 2018\")\nplt.xlabel(\"AS Path Length\")\nplt.ylabel(\"Number of BGP Announcements\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.47058823529411764,
            "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.": 0.4615384615384615,
            "Measure AS path inflation from the RouteViews collector.": 0.3448275862068965,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3404255319148936,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.2950819672131147,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.25,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.24489795918367344,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.24242424242424246,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.23076923076923075,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.22641509433962265
        },
        "avg_similarity_score": 0.12869778440302349
    },
    {
        "instruction": "Access live BGP data sources using pybgpstream, and filter the live stream records by ipversion 4 and type updates, and by origin ASN 10902.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    live=True,\n    filter=\"ipversion 4 and type updates and origin 10902\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Print the results\n        print(f\"Type: {elem.type}, Timestamp: {elem.time}, Prefix: {elem.fields['prefix']}, Origin ASN: {elem.fields['as-path'].split()[-1]}\")",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.34285714285714286,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.32558139534883723,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.32432432432432434,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.31818181818181823,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.30434782608695654,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.2926829268292683,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.2807017543859649,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.27999999999999997,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.25641025641025644,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.2553191489361702
        },
        "avg_similarity_score": 0.13904399588426034
    },
    {
        "instruction": "Generate a visualization of AS paths from AS13335 Cloudflare, limited to the last 1000 routes observed.",
        "input": "Project: route-views\nTime Window: June 1, 2020, 00:00:00 to June 2, 2020, 00:00:00\nFilter: Path \"_13335_\"\nMax Routes: 1000",
        "output": "import pybgpstream\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\n\n# Define the time window for June 1, 2020\nstart_time = \"2020-06-01 00:00:00\"\nend_time = \"2020-06-02 00:00:00\"\n\n# Maximum number of routes to consider\nmax_routes = 1000\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"route-views\",\n    filter=\"path _13335_\"\n)\n\n# Initialize a NetworkX graph\nG = nx.Graph()\n\n# Dictionaries to store the AS paths and the Nodes to be connected\nas_paths = {}\nedges = []\n\n# The counter for the number of routes\ncounter = 0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            if counter < max_routes:\n                # Increment the counter\n                counter += 1\n            \n                # Extract the AS path\n                as_path = elem.fields[\"as-path\"].split()\n                \n                # Store the AS path if not present\n                if as_path not in as_paths:\n                    as_paths[as_path] = 0\n\n                # Check for the 2-hop neighbors\n                for as_1 in as_path:\n                    for as_2 in as_path:\n                        if as_1 != as_2:\n                            edges.append((as_1, as_2))\n\n# Populate the NetworkX graph with the nodes and edges\nG.add_nodes_from(as_paths.keys())\nG.add_edges_from(edges)\n\n# Visualize the graph\npos = nx.spring_layout(G)\n\n# Node shapes\nnodes = nx.draw_networkx_nodes(G, pos, node_size=300, node_shape='s')\n\n# Edges\nedges = nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\n\n# Label the nodes\nlabels = nx.draw_networkx_labels(G, pos)\n\n# Set the title\nplt.title(\"AS Paths from AS13335 Cloudflare (last 1000 routes)\")\n\n# Draw and close the plot\nplt.draw()\nplt.close()",
        "most_similar_instructions": {
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.27586206896551724,
            "Measure AS path inflation from the RouteViews collector.": 0.25,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.2181818181818182,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2162162162162162,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.19354838709677422,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.1875,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.17777777777777778,
            "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.": 0.17647058823529413,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.1739130434782609,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.17142857142857143
        },
        "avg_similarity_score": 0.11470463123048151
    },
    {
        "instruction": "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.",
        "input": "Time window: Start 2 days ago and end now.\nCollectors: Route-Views, rrc00-rrc20\nRecord Type: RIBs",
        "output": "import pybgpstream\nimport itertools \n\n# Define the time window around the incident\nstart_time = datetime.utcnow() - timedelta(days=2)\nend_time = datetime.utcnow()\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"rrc00\", \"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\",\n    \"rrc06\", \"rrc07\", \"rrc08\", \"rrc09\", \"rrc10\", \"rrc11\", \"rrc12\", \"rrc13\", \n    \"rrc14\", \"rrc15\", \"rrc16\", \"rrc17\", \"rrc18\", \"rrc19\", \"rrc20\"],\n    record_type=\"ribs\"\n)\n\n# Dictionary to store MOAS prefixes\nmoas_prefixes = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    # Iterate over every RIB block with each BGP update\n    for elem in rec:\n  if elem.type == \"A\":  # Check for MOAS records\n    moas_prefixes[elem.fields[\"prefix\"]] = moas_prefixes.get(elem.fields[\"prefix\"], 0) + 1\n\n# Get the communities for each MOAS prefix\nfor prefix in moas_prefixes:\n  communities = stream.get_community_list(prefix, record_type=\"ribs\")\n  print(f\"Looking for communities in MOAS prefix {prefix}: {communities}\")\n  \n# Analyze the patterns of communities associated with the MOAS prefixes\nall_communities = list(itertools.chain.from_iterable(communities))\ncommunity_count = {}\nfor community in all_communities:\n  community_count[community] = community_count.get(community, 0) + 1\n\ncommon_communities = sorted(community_count.items(), key=lambda x: x[1], reverse=True)\n\nprint(\"Top 10 Most Commonly Used Communities:\")\nfor i, (community, count) in enumerate(common_communities[:10], start=1):\n    print(f\"{i}. {community}: {count} times\")",
        "most_similar_instructions": {
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.36734693877551017,
            "Study the AS communities associated with the RouteViews collector.": 0.3333333333333333,
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.3278688524590164,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.3181818181818182,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.30769230769230765,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.3050847457627119,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.29787234042553196,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.28070175438596495,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.27586206896551724,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.27272727272727276
        },
        "avg_similarity_score": 0.17878277131140477
    },
    {
        "instruction": "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.",
        "input": "Time window: Start 1 day ago and end now.\nCollectors: Route-Views, rrc00-rrc20\nRecord Type: Updates\nFilter: path \"_5_$\"",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = datetime.utcnow() - timedelta(days=1)\nend_time = datetime.utcnow()\n\n# Set the path filter\npath_filter = \"_5_$\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"rrc00\", \"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\",\n    \"rrc06\", \"rrc07\", \"rrc08\", \"rrc09\", \"rrc10\", \"rrc11\", \"rrc12\", \"rrc13\", \n    \"rrc14\", \"rrc15\", \"rrc16\", \"rrc17\", \"rrc18\", \"rrc19\", \"rrc20\"],\n    record_type=\" upadtes\",\n    filter=\"path \" + path_filter\n)\n\n# Dictionary to store the count of updates per prefix \nprefix_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  if elem.type == \"A\":  # Check for BGP announcements\n    prefix_count[elem.fields[\"prefix\"]] += 1\n\n# Dictionary to store the inflation ratio \ninflation_ratio = defaultdict(float)\n\n# Calculate the inflation ratio for each prefix\nfor prefix, count in prefix_count.items():\n  inflation_ratio[prefix] = count / stream.get_stability(prefix, record_type=\"updates\") \n\n# Visualize the inflation ratio\nsorted_inflation_ratio = sorted(inflation_ratio.items(), key=lambda x: x[1], reverse=True)\n\nplt.figure(figsize=(12, 6))\nplt.plot([inflation_ratio[prefix] for prefix in sorted_inflation_ratio], color='blue', linestyle='-')\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.xlabel('Prefixes')\nplt.ylabel('Inflation Ratio')\nplt.title('Inflation Ratio for AS Path Length 5 and Below')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.33333333333333337,
            "Measure AS path inflation from the RouteViews collector.": 0.31999999999999995,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.2978723404255319,
            "Analyze the network configuration and reliability over the past two weeks.": 0.2857142857142857,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.28571428571428564,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2790697674418605,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.27586206896551724,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.2745098039215686,
            "Measure AS Path Inflation phenomenon between October 6, 2018, and October 13, 2018, and visualize the results as a bar chart.": 0.2631578947368421,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.25641025641025644
        },
        "avg_similarity_score": 0.1388635795339885
    },
    {
        "instruction": "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.",
        "input": "Time window: Last Day\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nimport networkx as nx\nfrom datetime import datetime, timedelta\n\nend_time = datetime.utcnow()\nstart_time = end_time - timedelta(days=1)\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\nedges = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            source_as = as_path[-2]\n            dest_as = as_path[-1]\n            edge = (source_as, dest_as)\n\n            if edge not in edges:\n                edges.append(edge)\n\nG = nx.DiGraph()\nG.add_edges_from(edges)\n\n# get top 10 ISPs\ntop_10_ISPs = sorted(G, key=G.degree(), reverse=True)[:10]\nnodes = [node for node in G if node in top_10_ISPs]\n\n# draw graph\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos=pos, nodelist=nodes, node_color=\"blue\", node_size=100)\nnx.draw_networkx_edges(G, pos=pos, edge_color=\"red\", width=1, alpha=0.2)\n\nplt.title('AS Relationships Among Top-10 ISPs Over Last Day')\nplt.axis('off')\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.3404255319148936,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3333333333333333,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3076923076923077,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.3010752688172043,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.29850746268656714,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.2909090909090909,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.2857142857142857,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2807017543859649,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.2807017543859649
        },
        "avg_similarity_score": 0.1896964664917809
    },
    {
        "instruction": "Analyze and report any BGP communities/tags associated with AS20473 announcements between 20/12/2017, 00:00:00 and 30/12/2017, 23:59:59.",
        "input": "Time window: 20/12/2017, 00:00:00 to 30/12/2017, 23:59:59\nCollectors: route-views1, route-views2\nRecord Type: updates",
        "output": "import pybgpstream\nimport pandas as pd\nfrom datetime import datetime\n\nstart_time = \"2017-12-20 00:00:00\"\nend_time = \"2017-12-30 23:59:59\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views1\", \"route-views2\"],\n    record_type=\"updates\"\n)\n\nbgp_data = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            prefix = elem.fields[\"prefix\"]\n            timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n            communities = elem.fields.get('communities')\n\n            if origin_as == \"20473\":\n                bgp_data.append({\"timestamp\": timestamp, \"prefix\": prefix, \"as_path\": ' -> '.join(as_path), \"communities\": communities})\n\ndf = pd.DataFrame(bgp_data)\n\n# filter only announcements with communities\ndf = df[df[\"communities\"].notnull()]\n\nif not df.empty:    \n    print(\"BGP Communities/Tags Associated with AS20473 Announcements During Specified Time Period:\")\n    print(df[[\"as_path\", \"communities\"]])\nelse:\n    print(\"No BGP communities/tags associated with AS20473 announcements found during specified time period.\")",
        "most_similar_instructions": {
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.30188679245283023,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.26666666666666666,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.25925925925925924,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.2545454545454545,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2337662337662338,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.2264150943396226,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.22580645161290325,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.22222222222222224,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.22222222222222224,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.21052631578947367
        },
        "avg_similarity_score": 0.11165064062753657
    },
    {
        "instruction": "Calculate the length of paths for AS Paths which list AS50461 as one of the Autonomous Systems without using a filter.",
        "input": "",
        "output": "import pybgpstream\n\nstream = pybgpstream.BGPStream()\nrecords = stream.records()\n\nas_path_lengths = []\n\nfor rec in records:\n    for elem in rec:\n   if elem.type == \"A\":\n    as_path = elem.fields[\"as-path\"].split()\n    as_numbers = [int(asn) for asn in as_path]\n\n    if 50461 in as_numbers:\n        as_path_lengths.append(len(as_path))\n\nprint(\"Path Lengths for AS Paths which List AS50461:\")\nprint(as_path_lengths)",
        "most_similar_instructions": {
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.26666666666666666,
            "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.": 0.25641025641025644,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.24390243902439024,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.24000000000000002,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.24000000000000002,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.23809523809523808,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.23255813953488372,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.2162162162162162,
            "Generate a visualization of AS paths from AS13335 Cloudflare, limited to the last 1000 routes observed.": 0.2162162162162162,
            "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.": 0.21052631578947367
        },
        "avg_similarity_score": 0.13026964086249432
    },
    {
        "instruction": "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.",
        "input": "Time window: Past Week\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\nend_time = datetime.utcnow()\nstart_time =  end_time - timedelta(days=7)\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\ndata = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            as_path = elem.fields[\"as-path\"].split()\n            path_length = len(as_path)\n            timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n\n            if \"20940\" in as_path:\n                data.append({\"timestamp\": timestamp, \"prefix\": prefix, \"path_length\": path_length})\n\ndf = pd.DataFrame(data)\n\n# calculate mean path length\nmean_path_length = df[\"path_length\"].mean()\n\n# filter out prefixes with inflated paths\ninflated_prefixes = df[df[\"path_length\"] > mean_path_length]\n\nif not inflated_prefixes.empty:     \n    print(\"Prefix Inflation Detected for AS Paths Containing ASN 20940:\")\n    print(inflated_prefixes[[\"prefix\", \"path_length\"]])\nelse:\n    print(\"No prefix inflation detected for AS Paths containing ASN 20940.\")",
        "most_similar_instructions": {
            "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.": 0.42105263157894735,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.41860465116279066,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3703703703703704,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.3684210526315789,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.35555555555555557,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.35000000000000003,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3404255319148936,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3333333333333333,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3333333333333333,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.3333333333333333
        },
        "avg_similarity_score": 0.18875495794847563
    },
    {
        "instruction": "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.",
        "input": "Time window: June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC\nCollectors: Collector's Choice\nRecord Type: updates\n<noinput>",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2019-06-06 09:00:00 UTC\"\nend_time = \"2019-06-06 12:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"collectors-choice\"],\n    record_type=\"updates\"\n)\n\n# Store AS-Path length stats per ASN\npath_length_stats = defaultdict(lambda: {\"num_of_updates\": 0, \"avg\": 0, \"max\": 0, \"percentile_95\": 0})\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            asn = as_path[-1]\n            path_length = len(as_path)\n            path_length_stats[asn][\"num_of_updates\"] += 1\n            path_length_stats[asn][\"avg\"] += path_length\n            path_length_stats[asn][\"max\"] = max(path_length_stats[asn][\"max\"], path_length)\n\n# Compute 95-percentile\nnum_updates = [stat[\"num_of_updates\"] for asn, stat in path_length_stats.items()]\ntotal_updates = sum(num_updates)\nfor asn, stat in path_length_stats.items():\n    running_sum = sum(num_updates[:asn])\n    if running_sum / total_updates < 0.95:\n        path_length_stats[asn][\"percentile_95\"] = stat[\"max\"]  # No records exceeding the 95th percentile\n    else:\n        break  # We have found the 95th percentile\n\n# Print the results\nfor asn, stat in path_length_stats.items():\n    print(\"ASN: \", asn)\n    print(\"Average AS-Path length:\", stat[\"avg\"] / stat[\"num_of_updates\"])\n    print(\"Maximum AS-Path length:\", stat[\"max\"])\n    print(\"95th Percentile AS-Path length:\", stat[\"percentile_95\"])\n    print()",
        "most_similar_instructions": {
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.32812499999999994,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.31250000000000006,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.3058823529411765,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2926829268292683,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.26829268292682923,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.26168224299065423,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.25581395348837205,
            "Study the communities of prefixes belonging to AS33636, using both RIB entries and updates over a one hour period (February 12, 2021, 12:00:00 UTC, to February 12, 2021, 13:59:59 UTC) from a specific collector, route-views.jj. Capture the BGP updates for AS Path length, local preference, origin, MED and BGP communities.": 0.25,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.24719101123595502,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.24719101123595502
        },
        "avg_similarity_score": 0.16960029546209343
    },
    {
        "instruction": "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).",
        "input": "Time window: Last 5 minutes\nCollectors: Collector's Choice\nRecord Type: updates\nPrefix: 1.2.3.0/24",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Set the time window at the last 5 minutes\nend_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')\nstart_time = (datetime.utcnow() - timedelta(minutes=5)).strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"collectors-choice\"],\n    record_type=\"updates\"\n)\n\n# Store Path Inflation stats per ASN\npath_inflation_stats = defaultdict(lambda: {\"num_of_updates\": 0, \"avg\": 0, \"max\": 0, \"percentile_95\": 0})\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefix = elem.fields[\"prefix\"]\n            as_path = elem.fields[\"as-path\"].split()\n            if prefix == \"1.2.3.0/24\":\n                num_of_ases = len(as_path) - 1  # ignore the prepending of AS Origin\n                path_inflation_stats[as_path[-1]][\"num_of_updates\"] += 1\n                path_inflation_stats[as_path[-1]][\"avg\"] += num_of_ases\n                path_inflation_stats[as_path[-1]][\"max\"] = max(\n                    path_inflation_stats[as_path[-1]][\"max\"], num_of_ases)\n\n# Compute 95-percentile\nnum_updates = [stat[\"num_of_updates\"] for asn, stat in path_inflation_stats.items()]\ntotal_updates = sum(num_updates)\nfor asn, stat in path_inflation_stats.items():\n    running_sum = sum(num_updates[:asn])\n    if running_sum / total_updates < 0.95:\n        path_inflation_stats[asn][\"percentile_95\"] = stat[\"max\"]  # No records exceeding the 95th percentile\n    else:\n        break  # We have found the 95th percentile\n\n# Print the results\nfor asn, stat in path_inflation_stats.items():\n    print(\"ASN: \", asn)\n    print(\"Average BGP Path Inflation:\", stat[\"avg\"] / stat[\"num_of_updates\"])\n    print(\"Maximum BGP Path Inflation:\", stat[\"max\"])\n    print(\"95th Percentile BGP Path Inflation:\", stat[\"percentile_95\"])\n    # Analyze the communities on the associated ASes\n    elem = pybgpstream.Element()\n    elem.add_filter('collector', ['route-views4'])\n    elem.add_filter('as-path', '_' + asn + '_')\n    elem.add_filter('prefix', '1.2.3.0/24')\n    elem.add_filter('record-type', 'updates')\n    stream = pybgpstream.BGPStream(**elem.get_filters())\n    communities = []\n    for rec in stream.records():\n        for elem in rec:\n            if elem.type == \"A\" and \"communities\" in elem.fields:\n                communities.extend(elem.fields[\"communities\"])\n    print(\"Communities for ASN {}: {}\\n\".format(asn, set(communities)))",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.5,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4285714285714286,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4090909090909091,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3928571428571428,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.3859649122807018,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.34615384615384615,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.339622641509434,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.3384615384615384,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.33333333333333337,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1862755996721996
    },
    {
        "instruction": "Study the BGP messages over the RouteViews TVC channel on the IPv4 Collector to retrieve the AS numbers associated with peer connections of AS4134 in the last 5 minutes.",
        "input": "Time window: Last 5 minutes\nCollectors: route-views\nRecord Type: ribs\n<noinput>",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Set the time window at the last 5 minutes\nend_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')\nstart_time = (datetime.utcnow() - timedelta(minutes=5)).strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"],\n    record_type=\"ribs\"\n)\n\n# Process BGP records\npeers = set()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"RIB\":\n            as_path = elem.fields[\"as-path\"].split()\n            if as_path[-1] == \"4134\":\n                peers.add(as_path[-2])\n\n# Print the results\nprint(\"Peers of AS4134 in the last 5 minutes: \", end=\"\")\nprint(peers)",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.31578947368421056,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.25925925925925924,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.25641025641025644,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2553191489361702,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.25,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.2439024390243903,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.24000000000000002,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.23728813559322037,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.23076923076923075,
            "Print the AS Names associated with the BGP communities that announce the prefix 1.2.0.0/16 during the last 15 minutes. Filer primitive 'peer' is used for fetching the data.": 0.22950819672131145
        },
        "avg_similarity_score": 0.15186045614989746
    },
    {
        "instruction": "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.",
        "input": "Time window: August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC\nCollector: rrc06\nRecord types: rib and updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-08-11 09:00:00 UTC\"\nend_time = \"2019-08-11 13:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc06\"],\n    record_type=[\"updates\", \"ribs\"]\n)\n\n# Collect MOAS prefixes\nmoas_prefixes = set()\nfor rec in stream.records():\n    for elem in rec:\n        asn_list = elem.fields[\"as-path\"].split()\n        if len(asn_list) > 1 and len(set(asn_list)) > 1:\n            moas_prefixes.add((elem.fields[\"prefix\"], elem.fields[\"as-path\"]))\n\n# Print MOAS prefixes\nfor prefix, as_path in moas_prefixes:\n    print(f'MOAS prefix: {prefix} with AS Path: {as_path}')",
        "most_similar_instructions": {
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3768115942028986,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3555555555555555,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.32876712328767116,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.32608695652173914,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.32432432432432434,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.31884057971014496,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.3092783505154639,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.30088495575221236,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.2962962962962963,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.27906976744186046
        },
        "avg_similarity_score": 0.1715219775216974
    },
    {
        "instruction": "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.",
        "input": "Project: cc\nCollector: <noinput>\nRecord type: updates\nASN: 15412",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    projects=[\"cc\"],\n    record_type=\"updates\"\n)\n\n# Count the updates with ASN 15412 involved in the AS path\nas_path_inflation_count = 0\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        if \"15412\" in as_path:\n            as_path_inflation_count += 1\n\n# Calculate and print AS path inflation rate\ninflation_rate = as_path_inflation_count / stream.stats.num_updates\nprint(f'AS path inflation rate for ASN 15412 is {inflation_rate:.2f}')",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.5714285714285714,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.5,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.4,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3076923076923077,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.2978723404255319,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.2941176470588235,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2926829268292683,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.28571428571428575,
            "Measure AS path inflation for ASPATH attributes with length > 20 in BGP update records from the 4-day period before November 30, 2020, from the rrc01, rrc02, and rrc03 collectors.": 0.27906976744186046,
            "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.": 0.26666666666666666
        },
        "avg_similarity_score": 0.12879815493857544
    },
    {
        "instruction": "Utilize the PyBGPStream library to gain insight about the communities of ASN 6461, this analysis should include time-series analysis, topological analysis, historical trends, visualization, and community and policy analysis.",
        "input": "Project: <noinput>\nCollector: <noinput>\nRecord type: updates\nASN: 6461",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    record_type=\"updates\"\n)\n\n# Collect all of the updates involving ASN 6461\ncommunity_counts = {}\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        if \"6461\" in as_path:\n            community = elem.fields.get(\"communities\")\n            if community:\n                for entry in community:\n                    # Count the number of times a community is seen\n                    community_counts[entry] = community_counts.get(entry, 0) + 1\n\n# Visualize the communities of ASN 6461\n# Create the networkx graph\nG = nx.Graph()\n# Add the nodes and edges\nfor community, count in community_counts.items():\n    G.add_edge('6461', community, weight=count)\n\n# Visualize the graph\nnx.draw_networkx(G, with_labels=True)\n\n# Plot the timeline to show community dynamics\nplt.figure(figsize=(12, 6))\ntimestamps = sorted(community_counts.keys())\nplt.plot(timestamps, [counts[ts] for ts in timestamps], marker='o', linestyle='-')\nplt.xlabel('Time')\nplt.ylabel('Number of Communities')\nplt.title('Community Dynamics of ASN 6461')\nplt.xticks(rotation=45, ha='right')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the topology of the Internet.": 0.20512820512820512,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.2040816326530612,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.2040816326530612,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.20338983050847456,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.1923076923076923,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.1818181818181818,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.17857142857142855,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.17777777777777776,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.17391304347826086,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.1702127659574468
        },
        "avg_similarity_score": 0.11422775042389731
    },
    {
        "instruction": "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).",
        "input": "Time window: August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC\nProjects: bgpsim, skitter\nRecord Type: updates (Announcements)",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-08-15 04:00:00 UTC\"\nend_time = \"2019-08-15 08:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"bgpsim\", \"skitter\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            # Perform necessary processing\n            # ...",
        "most_similar_instructions": {
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.45238095238095233,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.4210526315789474,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.4057971014492754,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3908045977011494,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3652173913043478,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.35593220338983056,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.34210526315789475,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.33333333333333337,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.3333333333333333,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.3188405797101449
        },
        "avg_similarity_score": 0.1688396131849938
    },
    {
        "instruction": "Utilize the PyBGPStream library to analyze the AS relationships among networks in different countries. Specifically, compare and contrast the AS relationships among networks in the United States, Australia, and India for the time window from August 10, 2019, 00:00:00 UTC, to August 20, 2019, 00:00:00 UTC.",
        "input": "Time window: August 10, 2019, 00:00:00 UTC, to August 20, 2019, 00:00:00 UTC\nProject: <noinput>\nCollector: <noinput>\nRecord types: updates",
        "output": "import pybgpstream\nimport networkx as nx\n\n# Define the time window\nstart_time = \"2019-08-10 00:00:00 UTC\"\nend_time = \"2019-08-20 00:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"updates\"\n)\n\n# Collect all of the updates involving ASes from countries of interest\nas_relationships = {}\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        for source_as, dest_as in zip(as_path[:-1], as_path[1:]):\n            # Only count relationships between ASes from countries of interest\n            if len(source_as) == 2 and len(dest_as) == 2:\n                if (source_as in ('US', 'AU', 'IN') and dest_as in ('US', 'AU', 'IN')):\n                    as_relationships[(source_as, dest_as)] = as_relationships.get((source_as, dest_as), 0) + 1\n\n# Visualize the AS relationships\n# Create the networkx graph\nG = nx.Graph()\n# Add the nodes and edges\nfor as_pair, count in as_relationships.items():\n    G.add_edge(as_pair[0], as_pair[1], weight=count)\n\n# Visualize the graph\nnx.draw_networkx(G, with_labels=True)",
        "most_similar_instructions": {
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.38709677419354843,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.35164835164835173,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3191489361702128,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.30188679245283023,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.3,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.28947368421052627,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.28205128205128205,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.27906976744186046,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.27848101265822783,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.2692307692307692
        },
        "avg_similarity_score": 0.1567935397123053
    },
    {
        "instruction": "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.",
        "input": "Time window: June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00\nCollectors: RouteViews, RIPE, ALTDB\nPeer: 22134\nRecord Type: RIBs",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\nstart_time = \"2018-06-24 11:00:00\"\nend_time = \"2018-06-24 13:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=['route-views', 'ripe', 'altdb'],\n    record_type='ribs'\n)\n\ndata = []\n\nfor rec in stream.records():\n    for elem in rec:\n  if elem.peer_asn == \"22134\":\n  type = elem.fields['type']\n  prefix = elem.fields['prefix']\n  data.append({'prefix': prefix, 'type': type})\n\ndf = pd.DataFrame(data)\n\nnum_recv = len(df[df['type'] == 'A'])\nnum_sent = len(df[df['type'] == 'W'])\n\nprint(\"Number of Received Routes: {}\".format(num_recv))\nprint(\"Number of Sent Routes: {}\".format(num_sent))\n\nfig1, ax1 = plt.subplots()\nax1.pie([num_recv, num_sent], labels=[\"Received\",\"Sent\"], autopct='%.2f%%',\n  shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('MOAS Prefix Distribution')\nplt.show()",
        "most_similar_instructions": {
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.35897435897435903,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.3384615384615385,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.33333333333333337,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3188405797101449,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.3157894736842105,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3018867924528302,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.2972972972972973,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.297029702970297,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.29545454545454547,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2921348314606742
        },
        "avg_similarity_score": 0.17707755770517902
    },
    {
        "instruction": "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.",
        "input": "Collectors: rrc00\nRecord Type: Updates\nAS Paths: 45102",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\nstream = pybgpstream.BGPStream(\n    collectors=[\"rrc00\"],\n    record_type=\"updates\")\n\ndata = []\n\nfor rec in stream.records():\n  for elem in rec:\n as_path = elem.fields['as-path']\n if '45102' in as_path.split():\n  path_length = len(as_path.split())\n  prefix = elem.fields['prefix']\n  timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n  data.append({'timestamp':timestamp, 'prefix': prefix, 'as_path': as_path, 'path_length': path_length})\n\n\ndf = pd.DataFrame(data)\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\n\npath_lengths = df.groupby('timestamp')['path_length'].mean().reset_index()\n\nplt.plot(path_lengths['timestamp'], path_lengths['path_length'])\nplt.title('Evolution of AS Path Lengths')\nplt.xlabel('Time')\nplt.ylabel('Path Length')\nplt.xticks(rotation=45)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.48648648648648646,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.42857142857142855,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.4067796610169492,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3673469387755102,
            "Access live stream data sources and analyze the communities for AS1234.": 0.34285714285714286,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3404255319148936,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3272727272727273,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.32653061224489793,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.32653061224489793,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.31818181818181823
        },
        "avg_similarity_score": 0.16998560788393105
    },
    {
        "instruction": "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.",
        "input": "Time Window: <noinput>\nCollectors: RIPE, ALTDB\nRecord Type: Updates\nAS Paths: 7922",
        "output": "import pybgpstream\nimport pandas as pd\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    collectors=[\"ripe\", \"altdb\"],\n    record_type=\"updates\")\n\nas_communities = []\nas_paths = []\n\nfor rec in stream.records():\n    for elem in rec:\n  path_str = elem.fields[\"as-path\"].split()\n  if path_str[-1] == \"7922\":\n    as_paths.append(path_str)\n    if \"communities\" in elem.fields:\n      as_communities.extend(elem.fields[\"communities\"])\n\nas_paths_flattened = [val for sublist in as_paths for val in sublist]\nas_communities_flattened = [val for sublist in as_communities for val in sublist]\n\ncommunities_not_observed_in_announcements = [comm for comm in as_paths_flattened if comm not in as_communities_flattened]\n\ncommunities_not_observed_in_announcements_cnt = Counter(communities_not_observed_in_announcements)\n\nprint(\"Communities not observed in AS 7922 announcements:\")\nfor community, count in communities_not_observed_in_announcements_cnt.most_common():\n    print(f\"{community} : {count}\")",
        "most_similar_instructions": {
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3384615384615384,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.3269230769230769,
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.31884057971014496,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3125,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.3013698630136986,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.2909090909090909,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.28571428571428575,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.28571428571428575,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.2857142857142857,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.2823529411764706
        },
        "avg_similarity_score": 0.1895524179482402
    },
    {
        "instruction": "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.",
        "input": "Time Window: <noinput>\nCollectors: RouteViews\nRecord Type: Updates\nCommunity: <noinput>",
        "output": "import pybgpstream\nimport pandas as pd\nfrom collections import Counter\n\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views\"],\n    record_type=\"updates\")\n\nmulti_origin_communities = []\n\nfor rec in stream.records():\n    for elem in rec:\n  if \"communities\" in elem.fields:\n    communities = elem.fields['communities']\n    for c in communities:\n      if len(c.split(\":\")) >= 2:\n        multi_origin_communities.append(c)\n\nmulti_origin_communities_cnt = Counter(multi_origin_communities)\n\nprint(\"Most Common Multi-Origin AS Communities:\")\nfor community, count in multi_origin_communities_cnt.most_common():\n    print(f\"{community} : {count}\")",
        "most_similar_instructions": {
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.37735849056603776,
            "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.": 0.3692307692307692,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.36363636363636365,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.35714285714285715,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.3333333333333333,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3137254901960784,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3103448275862069,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.3,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.28125,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.27999999999999997
        },
        "avg_similarity_score": 0.18883724452009334
    },
    {
        "instruction": "Collect RIB data from RRC06 for August 25, 2018. Analyze the community values associated with the route entries in order to identify groups that share common AS policies.",
        "input": "Time window: August 25, 2018, 00:00:00 to August 25, 2018, 23:59:59\nCollectors: rrc06",
        "output": "import pybgpstream\n\n# Define the time window for August 25, 2018\nstart_time = \"2018-08-25 00:00:00\"\nend_time = \"2018-08-25 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc06\"],\n    record_type=\"ribs\"\n    )\n\n# List to store communities for each route entry\ncommunities_per_route = []\n\n# Process bgp records\nfor rec in stream.records():\n    for elem in rec:\n   # Check if the record contains a community value\n   if \"communities\" in elem.fields:\n  community_values = elem.fields[\"communities\"].strip()\n  communities_per_route.append(community_values.split(','))\n\n# Convert list to dictionary\ncommunities_dict = {}\nfor communities in communities_per_route:\n    for comm in communities:\n   # Extract the ASN and comm value from the community\n   asn_comm_num = comm.split(':')\n   asn = asn_comm_num[0]\n   comm_value = asn_comm_num[1]\n\n   if comm_value not in communities_dict:\n   communities_dict[comm_value] = []\n  communities_dict[comm_value].append(asn)\n\n# Print the list of communities and associated groups of ASNs\nfor comm_value, asns in communities_dict.items():\n    print(f\"Community: {comm_value}\")\n    print(f\"  Associated ASNs: {','.join(asns)}\")",
        "most_similar_instructions": {
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.2903225806451613,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.28,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.2758620689655172,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.2641509433962264,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.2641509433962264,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.2545454545454545,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.25396825396825395,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.25,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.23999999999999996,
            "Collect RIB entries from all RouteViews and RIS collectors for the prefix 208.67.222.222/32.Time window should cover the October 15, 2018, to October 10, 2018. Identify the AS paths that include ASNs 4134 (CERNET), 5511 (Orange), or 20860 (Sunrise). Create a line chart to visualize how the AS path changes over the days": 0.23529411764705885
        },
        "avg_similarity_score": 0.15087924815021367
    },
    {
        "instruction": "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.",
        "input": "Time window: August 29, 2018, 00:00:00 to August 29, 2018, 23:59:59\nCollectors: ris-route-views1",
        "output": "import pybgpstream\n\n# Define the time window for August 25, 2018\nstart_time = \"2018-08-29 00:00:00\"\nend_time = \"2018-08-29 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route-views1\"],\n    record_type=\"updates\"\n)\n\n# Set to store first-time-visible ASes\nfirst_time_visible_as_set = set()\n\n# Process bgp records\nfor rec in stream.records():\n    for elem in rec:\n   # Check if teaser record\n   if elem.type == \"T\":\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n\n  # Track first-time-visible AS\n  if origin_as not in first_time_visible_as_set:\n first_time_visible_as_set.add(origin_as)\n\n# Print the list of first-time-visible ASes\nprint(f\"First time visible ASes: {list(first_time_visible_as_set)}\")",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.4444444444444444,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.4000000000000001,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.38095238095238104,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3684210526315789,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3571428571428571,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.35555555555555557,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.35000000000000003,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.3404255319148936,
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.3404255319148936,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17987773754731376
    },
    {
        "instruction": "Collect updates from RIS RRC00 and RRC01 between June 8th, 2018, 3:00am and June 8th, 2018, 3:10am. Use MOAS prefixes to analyze the AS path inflation of the prefix entries.",
        "input": "Time window: June 8, 2018, 03:00:00 to June 8, 2018, 03:10:00\nCollectors: ris-rrc00, ris-rrc01",
        "output": "import pybgpstream\n\n# Define the time window for June 8, 2018\nstart_time = \"2018-06-08 03:00:00\"\nend_time = \"2018-06-08 03:10:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-rrc00\", \"ris-rrc01\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store AS path length for each prefix\nprefix_pathlengths = {}\n\n# Process bgp records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # BGP announcements\n  # Extract the prefix and the AS path\n  prefix = elem.fields[\"prefix\"]\n  as_path = elem.fields[\"as-path\"].split()\n\n  # Track AS path lengths\n  if prefix not in prefix_pathlengths:\n     prefix_pathlengths[prefix] = 0\n  prefix_pathlengths[prefix] += len(as_path)\n\n# Compute MOAS split factors and prefix inflation index\nmoas_split_factors = {}\nprefix_inflation = {}\n\nfor prefix, pathlength in prefix_pathlengths.items():\n    # Split the prefix into its components\n    prefix_components = prefix.split(\"/\")\n    prefix_address = prefix_components[0]\n    prefix_length = int(prefix_components[1])\n\n    # Compute the MOAS split factor\n    moas_split_factor = 1\n    for i in range(1, prefix_length):\n        moas_split_factor = moas_split_factor * 2\n\n    # Store the MOAS split factor\n    moas_split_factors[prefix] = moas_split_factor\n\n    # Compute the prefix inflation\n    prefix_inflation[prefix] = pathlength / (moas_split_factor - 1)\n\n# Print the MOAS split factors and prefix inflation\nfor prefix, pathlength in prefix_pathlengths.items():\nprint(f\"Prefix: {prefix}\")\nprint(f\"  MOAS Split Factor: {moas_split_factors[prefix]}\")\nprint(f\"  Prefix Inflation: {prefix_inflation[prefix]}\")",
        "most_similar_instructions": {
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.36,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3333333333333333,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3283582089552239,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.3283582089552239,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3235294117647059,
            "Collect updates from the two RIS collectors located in Europe (rrc03 and rrc04) using MOAS Prefixes. Collect only records between March 3, 2018, to March 5, 2018.": 0.3050847457627119,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.30000000000000004,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.29268292682926833,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.29032258064516125,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.2807017543859649
        },
        "avg_similarity_score": 0.16540765148454334
    },
    {
        "instruction": "Collect updates from RouteViews BNA and TPA collectors between June 8th, 2020, 4:00am to June 8th, 2020, 4:10am. Study the AS paths and determine the AS relationships.",
        "input": "Time window: June 8, 2020, 04:00:00 to June 8, 2020, 04:10:00\nCollectors: route-views.bna, route-views.tpa",
        "output": "import pybgpstream\n\n# Define the time window for June 8, 2018\nstart_time  = \"2020-06-08 04:00:00\"\nend_time = \"2020-06-08 04:10:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.bna\", \"route-views.tpa\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store AS relationships\nas_relations = {}\n\n# Process bgp records\nfor rec in stream.records():\n    for elem in rec:\n   # Extract the AS path from the record\n   as_path = elem.fields[\"as-path\"].split()\n   origin_as = as_path[-1]\n\n   # Track AS relationships for each AS in the path\n   for i in range(len(as_path)-1):\n    # Get the next AS in the path\n    next_as = as_path[i+1]\n\n    # Track the AS relationships\n    if origin_as not in as_relations:\n    as_relations[origin_as] = set()\n   as_relations[origin_as].add(next_as)\n\n# Print the AS relationships\nfor origin_as, next_ases in as_relations.items():\n    print(f\"Origin AS: {origin_as}\")\n    print(f\"  Next ASes: {','.join(next_ases)}\")",
        "most_similar_instructions": {
            "Collect updates from RIS RRC00 and RRC01 between June 8th, 2018, 3:00am and June 8th, 2018, 3:10am. Use MOAS prefixes to analyze the AS path inflation of the prefix entries.": 0.4590163934426229,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.3125,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.2903225806451613,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.2857142857142857,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.27450980392156865,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.2727272727272727,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.26666666666666666,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.26415094339622647,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.26229508196721313,
            "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.": 0.26229508196721313
        },
        "avg_similarity_score": 0.16694268320744754
    },
    {
        "instruction": "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.",
        "input": "Project: ris\nRecord Type: updates\nFilter: path 65501:1",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\nstream.add_filter('project','ris')\nstream.add_filter('type','updates')\nstream.add_filter('path','65501:1')\n\n# Start the stream\nstream.start()\n\nas_set = set()\nmoas_dict = {}\ncount = 1\n\n# Collect BGP data\nwhile stream.get_next_record( timeout=0):\n    elem = stream.get_current_elem()\n    if elem is not None:\n        # Calculate the number of distinct ASNs\n        as_set.update(elem.fields['as-path'].split(' '))\n\n        # Calculate the number of MOAS\n        asn_list = elem.fields['as-path'].split(' ')\n        if asn_list[0] == asn_list [-1]:\n            if asn_list[0] not in moas_dict:\n                moas_dict[asn_list[0]] = count\n            else:\n                moas_dict[asn_list[0]] += count\n\n# Print the number of distinct ASNs\nprint ('Number of distinct ASNs seen in the BGP announcements: ', len(as_set))\n\n# Print the number of MOAS\nprint ('Number of multiple origin AS: ',len(moas_dict))\n\n# Calculate path inflation for each ASN\nfor asn in moas_dict:\n    moas_dict[asn] = (moas_dict[asn]*100/(len(as_set)-1))\n    print ('Path inflation of AS' + asn + ' is ' + str(moas_dict[asn]) + '%')",
        "most_similar_instructions": {
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3859649122807017,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.3773584905660378,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.36000000000000004,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.34920634920634924,
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.32727272727272727,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.3174603174603175,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.3146067415730337,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3103448275862069,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.30434782608695654
        },
        "avg_similarity_score": 0.19988701216650112
    },
    {
        "instruction": "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.",
        "input": "Project: route-views.jinx\nRecord Type: updates\nFilter: path length > 10",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\nstream.add_filter('project','route-views.jinx')\nstream.add_filter('type','updates')\nstream.add_filter('pathlength', '>10')\n\n# Start the stream\nstream.start()\n\n# Collect and parse BGP data\ndata = []\nwhile stream.get_next_record(timeout=0):\n    elem = stream.get_current_elem()\n    if elem is not None:\n        data.append([elem.fields['prefix'], len(elem.fields['as-path'].split(' '))])\n\n# Print the table of prefix and AS-Path length\nprint ('Prefix\t    AS-Path Length')\nprint ('----------------------------')\nfor item in data:\n    print (item[0], '\t\t', item[1])",
        "most_similar_instructions": {
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.456140350877193,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.34375,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.339622641509434,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3181818181818182,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.31578947368421056,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3103448275862069,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2978723404255319,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.2950819672131148,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.2823529411764706,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.27692307692307694
        },
        "avg_similarity_score": 0.17625706444719597
    },
    {
        "instruction": "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.",
        "input": "Project: ris\nRecord Type: updates\nFrom Time: <noinput>\nUntil Time: <noinput>",
        "output": "import pybgpstream\n\n# Define time window around the incident\ncurrent_time = datetime.now()\nstart_time = current_time - timedelta(hours=24)\nend_time = current_time\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\nstream.add_filter('project','ris')\nstream.add_filter('type','updates')\nstream.add_interval_filter(start_time.timestamp(), end_time.timestamp())\n\n# Start the stream\nstream.start()\n\nprefix_dict = {}\n\n# Collect BGP data\nwhile stream.get_next_record( timeout=0):\n    elem = stream.get_current_elem()\n    if elem is not None:\n        prefix = elem.fields['prefix']\n        as_list = elem.fields['as-path'].split(' ')\n        if prefix not in prefix_dict:\n            prefix_dict[prefix] = [as_list]\n        else:\n            prefix_dict[prefix].append(as_list)\n\n# Calculate the number of paths for each prefix \nfor key in prefix_dict:\n    unique_as_paths = set()\n    for as_path in prefix_dict[key]:\n        str_as_path = ','.join(as_path)\n        unique_as_paths.add(str_as_path)\n    print (\"Prefix: \" + key + \" Number of Paths: \" + str(len(unique_as_paths)))",
        "most_similar_instructions": {
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.39999999999999997,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.39285714285714285,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.3870967741935484,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3846153846153846,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3829787234042553,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.375,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.3384615384615384,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3333333333333333,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.32653061224489793,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.32653061224489793
        },
        "avg_similarity_score": 0.21000956073764274
    },
    {
        "instruction": "Analyze BGP announcements by Con Edison (AS27506). Print number of different communities found in BGP announcements.",
        "input": "Project: ris\nRecord Type: updates\nFilter: comm AS27506",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\nstream.add_filter('project','ris')\nstream.add_filter('type','updates')\nstream.add_filter('comm','AS27506')\n\n# Start the stream\nstream.start()\n\n# Collect BGP data\ncomm_set = set()\nwhile stream.get_next_record( timeout=0):\n    elem = stream.get_current_elem()\n    if elem is not None:\n        for item in elem.fields['communities']:\n            comm_set.add(item)\n\n# Print the number of different communities found\nprint ('Number of different communities found in BGP announcements: ', \n        len(comm_set))",
        "most_similar_instructions": {
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.22222222222222224,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2162162162162162,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.2162162162162162,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.2105263157894737,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.2105263157894737,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.20689655172413796,
            "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.": 0.2,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.19999999999999998,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.19672131147540986
        },
        "avg_similarity_score": 0.09198849328355929
    },
    {
        "instruction": "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.",
        "input": "Time window: August 1, 2018, 00:00:00 to August 5, 2018, 00:00:00\nCollectors: rrc01, bb01",
        "output": "import pybgpstream\n\n# Define the time window for August 1-5, 2018\nstart_time = \"2018-08-01 00:00:00\"\nend_time = \"2018-08-05 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"bb01\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the MOAS prefixes and their originating ASN\nmoas_prefixes = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_hour = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00')\n   if elem.type == \"A\":  # BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  prefix = elem.fields[\"prefix\"]\n  \n  # Check if the prefix is a multi-origin AS (MOAS)\n  if prefix in moas_prefixes:\n     moas_asn = moas_prefixes[prefix]\n  if origin_as == moas_asn:\n print(f\"MOAS Prefix {prefix} is validly originating from {moas_asn}\")",
        "most_similar_instructions": {
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.3209876543209877,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.3132530120481928,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3050847457627119,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.29850746268656714,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.29411764705882354,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.28125,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.27272727272727276,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.2727272727272727,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.27027027027027023,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.27027027027027023
        },
        "avg_similarity_score": 0.1714343597471499
    },
    {
        "instruction": "Use PyBGPStream to measure AS path inflation.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\"\n)\n\n# Calculate the average path length\ntotal_length = 0\nnum_records = 0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   as_path = elem.fields[\"as-path\"].split()\n   total_length += len(as_path)\n   num_records += 1\n\n# Calculate the average path length\naverage_length = total_length / num_records\n\n# Output the results\nprint(f\"The average AS path length is {average_length:.2f}\")",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.5333333333333333,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.5263157894736842,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.43478260869565216,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.4,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.375,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.36363636363636365,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.36363636363636365,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.33333333333333326,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.3225806451612903
        },
        "avg_similarity_score": 0.10212270608323151
    },
    {
        "instruction": "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.",
        "input": "Collectors: route-views6",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views6\"],\n    record_type=\"updates\"\n)\n\n# Create dictionary to store the community attributes of each AS\nas_comm_dict = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   path = elem.fields[\"as-path\"].split()\n   origin_as = path[-1]\n   # Check for the community attribute in the record\n   if \"communities\" in elem.fields:\n  communities = elem.fields[\"communities\"].split()\n  # Store the community attribute for each AS\n  as_comm_dict.setdefault(origin_as, []).append(communities)\n\n# Print the results\nfor asn, comms in as_comm_dict.items():\n    print(f\"AS {asn}: {comms}\")",
        "most_similar_instructions": {
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.31818181818181823,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3125,
            "Study the BGP messages over the RouteViews TVC channel on the IPv4 Collector to retrieve the AS numbers associated with peer connections of AS4134 in the last 5 minutes.": 0.3076923076923077,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2978723404255319,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.28571428571428575,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.28571428571428575,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.27906976744186046,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.27450980392156865,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.2692307692307692,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.26415094339622636
        },
        "avg_similarity_score": 0.17265118680761984
    },
    {
        "instruction": "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.",
        "input": "Time window: September 1, 2019, 00:00:00 to September 5, 2019, 00:00:00\nCollectors: route-views6",
        "output": "import pybgpstream\n\n# Define the time window for September 1-5, 2019\nstart_time = \"2019-09-01 00:00:00\"\nend_time = \"2019-09-05 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views6\"],\n    record_type=\"updates\"\n)\n\n# Dictionaries to store path length and AS path preferences over time\npath_lengths = {}\nas_preferences = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   timestamp_hour = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00')\n   # Store the announced path lengths\n   if timestamp_hour not in path_lengths:\n path_lengths[timestamp_hour] = []\n  as_path = elem.fields[\"as-path\"].split()\n  path_lengths[timestamp_hour].append(len(as_path))\n\n   # Store the AS path preferences\n   if \"pref\" in elem.fields:\n  as_preferences.setdefault(timestamp_hour, []).append(elem.fields[\"pref\"])\n\n# Extract timestamps and path lengths for plotting\ntimestamps = sorted(path_lengths.keys())\npath_lengths_list = [\n    sum(path_lengths[ts]) / len(path_lengths[ts])\n    for ts in timestamps\n]\n\n# Extract timestamps and AS path preferences for plotting\nas_preferences_list = [\n    sum(as_preferences[ts]) / len(as_preferences[ts])\n    for ts in timestamps\n]\n\n# Visualize the results using time series plots\nplt.figure(figsize=(12, 10))\n\nplt.subplot(2, 1, 1)\nplt.plot(timestamps, path_lengths_list, marker='o', color='blue', linestyle='-')\nplt.xlabel('Timestamp (Hourly)')\nplt.ylabel('Average Announced Path Length')\nplt.title('Announced Path Length over Time')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\nplt.subplot(2, 1, 2)\nplt.plot(timestamps, as_preferences_list, marker='o', color='red', linestyle='-')\nplt.xlabel('Timestamp (Hourly)')\nplt.ylabel('Average AS Path Preferences')\nplt.title('AS Path Preferences over Time')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the topology of the Internet.": 0.42857142857142855,
            "Use PyBGPStream to measure AS path inflation.": 0.3846153846153846,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.34285714285714286,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.3225806451612903,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.30434782608695654,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.29411764705882354,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.27777777777777773,
            "Collect updates from RIS RRC00 and RRC01 between June 8th, 2018, 3:00am and June 8th, 2018, 3:10am. Use MOAS prefixes to analyze the AS path inflation of the prefix entries.": 0.2745098039215686,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.27027027027027023,
            "Analyze the network configuration and reliability over the past two weeks.": 0.26666666666666666
        },
        "avg_similarity_score": 0.1544055640815866
    },
    {
        "instruction": "Use PyBGPStream to access live stream data sources and analyze the BGP events.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\"\n)\n\nfor rec in stream.records():\n    print(rec)",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.6666666666666667,
            "Access live stream data sources and analyze the communities for AS1234.": 0.6666666666666667,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.5384615384615384,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.5128205128205128,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.5,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.48000000000000004,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.4545454545454546,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4444444444444444,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.42857142857142855,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4242424242424242
        },
        "avg_similarity_score": 0.17513543400463283
    },
    {
        "instruction": "Using RouteViews collectors, analyze the BGP communities in the IPv6 routes and detect possible communities with non-preferential path selection.",
        "input": "Time window: today's date until now\nCollector: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:00\")\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=None,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the count of BGP communities for IPv6 routes\ncommunity_counts = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\": # Check for BGP announcements\n  if elem.fields[\"ip-version\"] == \"6\":\n      communities = elem.fields[\"communities\"]\n      # Check for communities in the route\n      if communities:\n   for community in communities.split(':'):\n       community_counts[community] += 1\n\n# Dictionary to store the ASes with non-preferential path selection\nno_prefp_ases = {}\n\n# Detect possible communities with non-preferential path selection\nfor community, count in community_counts.items():\n    asn, value = community.split(',')\n    # Check for no_preference value\n    if value == '32768':\n   if asn not in no_prefp_ases:\n       no_prefp_ases[asn] = count\n    else:\n       no_prefp_ases[asn] += count\n\n# Print the ASes with non-preferential path selection\nfor as_number, count in no_prefp_ases.items():\n    print(f\"AS{as_number} detected {count} times with non-preferential path selection\")",
        "most_similar_instructions": {
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.3076923076923077,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.25531914893617025,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.2545454545454545,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.24489795918367346,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.24390243902439024,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.24,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.23809523809523808,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.23809523809523808,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.23529411764705882,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.23255813953488372
        },
        "avg_similarity_score": 0.14818666499267344
    },
    {
        "instruction": "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.",
        "input": "Time window: Today's date until now\nCollector: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:00\")\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=None,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the prefixes with AS path inflation\ninflated_prefixes = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n\n  if len(as_path) > 10: # Check for path inflation\n      prefix = elem.fields[\"prefix\"]\n      inflated_prefixes[prefix] += 1\n\n# Print the prefixes with AS path inflation\nfor prefix, count in inflated_prefixes.items():\n    print(f\"Inflated prefix {prefix} detected {count} times\")",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.5405405405405406,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.4761904761904762,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4571428571428572,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.4489795918367347,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.43243243243243246,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.39999999999999997,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.3913043478260869,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3829787234042554,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.375,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3673469387755102
        },
        "avg_similarity_score": 0.1969197136331659
    },
    {
        "instruction": "Collect all RIB entries for the astral-sorcery project in the past 10 hours, and analyze all MOAS (Multiple Origin AS) prefixes for security anomalies.",
        "input": "project: astral-sorcery\nrecord_type: ribs\nfrom_time: <noinput> (last 10 hours from current time) \nuntil_time: <noinput> (current time)\nfilter: <noinput>",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Initialize the BGPStream\nnow = datetime.utcnow()\nstream = pybgpstream.BGPStream(\n    from_time=now - timedelta(hours=10),\n    until_time=now,\n    project=\"astral-sorcery\",\n    record_type=\"ribs\",\n)\n\n# Dictionary to store the information of each prefix\nprefix_data = {}  \n\n# Process BGP Records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type != \"A\":  # Skip non-announcement events\n            continue\n \n        # Get the data of the prefix\n        prefix = elem.fields[\"prefix\"]\n \n        # Calculate the number of origin ASNs\n        origin_asns = set()\n        for path in elem.fields[\"as-path\"].split():\n            origin_asns.add(path.split('_')[0])\n        num_origin_asns = len(origin_asns)\n \n        if prefix not in prefix_data:\n            prefix_data[prefix] = {\n                'num_origin_asns': num_origin_asns,\n                'anomalous': False,\n            }\n        else:\n            if prefix_data[prefix]['num_origin_asns'] != num_origin_asns:\n                prefix_data[prefix]['anomalous'] = True\n\n# Detect security anomalies\nprint(\"Security anomalies detected in the following prefixes:\")\nfor prefix, data in prefix_data.items():\n    if data['anomalous']:\n        print(f\"{prefix} with {data['num_origin_asns']} origin ASNs\")",
        "most_similar_instructions": {
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.30188679245283023,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.29629629629629634,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.2666666666666666,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.2666666666666666,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.25925925925925924,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.25806451612903225,
            "Collect partial RIBs from RouteViews collectors (rrc00 \u2013 rrc06) of the past 24 hours and filter the records based on IPv4, prefix length and community. Classify all community values into AS-level communities.": 0.2456140350877193,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.24489795918367346,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.24390243902439027,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.24
        },
        "avg_similarity_score": 0.14647746786281102
    },
    {
        "instruction": "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.",
        "input": "project: route-views \nrecord_type: updates\nfrom_time: <noinput> (last 10 hours from current time) \nuntil_time: <noinput> (current time)\nfilter: ipversion 4, ipversion 6",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Initialize the BGPStream\nnow = datetime.utcnow()\nstream = pybgpstream.BGPStream(\n    from_time=now - timedelta(hours=10),\n    until_time=now,\n    project=\"route-views\",\n    record_type=\"updates\",\n    filters=[\n        {\n            \"type\": \"ipversion\",\n            \"value\": 4\n        },\n        {\n            \"type\": \"ipversion\",\n            \"value\": 6\n        }\n    ]\n)\n\n# Initialize necessary variables\nas_path_origins = {}\nhigh_inflation_count = 0\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        path = tuple(elem.fields[\"as-path\"].split())\n \n        # Calculate the origin ASN\n        origin_asn = path[0].split('_')[0]\n        \n        # Count the number of times the ASN appeared in AS paths\n        if origin_asn not in as_path_origins:\n            as_path_origins[origin_asn] = 1\n        else:\n            as_path_origins[origin_asn] += 1\n\n        # Check for any AS path inflation\n        if len(path) > as_path_origins[origin_asn]:\n            high_inflation_count += 1\n\n# Calculate the percentage of AS paths with high inflation\npercentage = (high_inflation_count / len(stream)) * 100\n\nprint(f\"Percentage of AS paths with high inflation: {percentage:.2f}%\")",
        "most_similar_instructions": {
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.5581395348837208,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.5,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.4117647058823529,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.41025641025641024,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.38095238095238093,
            "Use PyBGPStream to measure AS path inflation.": 0.38095238095238093,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.37209302325581395,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3703703703703704,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.3684210526315789,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.3684210526315789
        },
        "avg_similarity_score": 0.21014481449705733
    },
    {
        "instruction": "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.",
        "input": "project: ris,route-views\nrecord_type: updates\nfrom_time: <noinput> (last 10 hours from current time) \nuntil_time: <noinput>  (current time)\nfilter: <noinput>",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Initialize the BGPStream\nnow = datetime.utcnow()\nstream = pybgpstream.BGPStream(\n    from_time=now - timedelta(hours=10),\n    until_time=now,\n    project=\"ris,route-views\",\n    record_type=\"updates\"\n)\n\n# Initialize necessary variables\npath_lengths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Calculate the length of the path\n        path_length = len(elem.fields[\"as-path\"].split())\n \n        # Count the number of times the path with a certain length appeared in AS paths\n        if path_length not in path_lengths:\n            path_lengths[path_length] = 1\n        else:\n            path_lengths[path_length] += 1\n\n# Print out the results\nprint(\"Number of AS paths with each length:\")\nfor length, count in path_lengths.items():\n    print(f\"{length}: {count}\")",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.5185185185185185,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4827586206896552,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.45161290322580644,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.45,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.41379310344827586,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.41379310344827586,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.411764705882353,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.39024390243902435,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.39024390243902435,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.39024390243902435
        },
        "avg_similarity_score": 0.19047972724466364
    },
    {
        "instruction": "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.",
        "input": "project: ris-route-views\nrecord_type: updates\nfrom_time: <noinput> (last 10 hours from current time) \nuntil_time: <noinput> (current time)\nfilter: <noinput>",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Initialize the BGPStream\nnow = datetime.utcnow()\nstream = pybgpstream.BGPStream(\n    from_time=now - timedelta(hours=10),\n    until_time=now,\n    project=\"ris-route-views\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store the communities associated with each prefix\nprefix_communities = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Look for announcements only\n \n            # Get the prefix and its communities\n            prefix = elem.fields[\"prefix\"]\n            communities = elem.fields[\"communities\"]\n \n            # Store the communities for each prefix\n            if prefix not in prefix_communities:\n                prefix_communities[prefix] = set(communities.split())\n            else:\n                prefix_communities[prefix].update(set(communities.split()))\n\n# Print out the communities associated with each prefix\nfor prefix, communities in prefix_communities.items():\n    print(f\"{prefix}: {','.join(communities)}\")",
        "most_similar_instructions": {
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.47058823529411764,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.4528301886792453,
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.41379310344827586,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.4081632653061225,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.39215686274509803,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.3913043478260869,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3703703703703704,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3684210526315789,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.34782608695652173,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3461538461538462
        },
        "avg_similarity_score": 0.20660666935857222
    },
    {
        "instruction": "Monitor AS path inflation from ASN 13335 (Cloudflare) to collect a time-series of the path lengths.",
        "input": "Project: route-views6\nPeer ASN: 13335\nType: updates\nTime window: November 13, 2018, 00:00:00 to December 4, 2018, 23:59:59",
        "output": "import pybgpstream\nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom datetime import datetime\n\n# Define a time window for the data collection\nstart_time = \"2018-11-13 00:00:00\"\nend_time = \"2018-12-04 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"route-views6\",\n    peers=[\"13335\"],\n    record_type=\"updates\"\n    )\n\n# Store path lengths and timestamps of updates\npath_lengths=[]\n\n#Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == 'A':\n            path_length = len(elem.fields['as-path'].split())\n            event_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n            path_lengths.append({'time': event_time, 'length': path_length})\n\n# Convert to DataFrame\ndf = pd.DataFrame(path_lengths)\n\n#Plot the path length time series\nplt.figure(figsize=(15, 6))\nplt.plot(df.time, df.length)\nplt.xlabel('Time (UTC)')\nplt.ylabel('Path Length')\nplt.title('Data from ASN 13335 Using RouteViews6')\nplt.xticks(rotation=45, ha='right')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.4,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3255813953488372,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.31578947368421056,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3125,
            "Generate a visualization of AS paths from AS13335 Cloudflare, limited to the last 1000 routes observed.": 0.30303030303030304,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.26666666666666666,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.26666666666666666,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2592592592592593,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.2535211267605634,
            "Use PyBGPStream to measure AS path inflation.": 0.25
        },
        "avg_similarity_score": 0.14313186727493954
    },
    {
        "instruction": "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].",
        "input": "Project: route-views2\nASNs: [\"5511\", \"1201\", \"16217\", \"17477\"]",
        "output": "import pybgpstream\nimport dateutil.parser\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"route-views2\",\n    start_time=dateutil.parser.parse(\"now-1min\").strftime('%Y-%m-%d %H:%M:%S'),\n    end_time=dateutil.parser.parse(\"now\").strftime('%Y-%m-%d %H:%M:%S')\n)\n\n# Dictionary to store the number of AS-to-prefix relationships\nas_prefix_counts = {asn : 0 for asn in [\"5511\", \"1201\", \"16217\", \"17477\"]}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.peer_asn in as_prefix_counts:\n  as_prefix_counts[elem.peer_asn] += 1\n\n# Generate summary\nprint(\"Summary of AS-to-Prefix Relationships\\n\")\nfor asn in as_prefix_counts:\n    print(f\"AS{asn:<10}: {as_prefix_counts[asn]:5} prefixes\")",
        "most_similar_instructions": {
            "Access live stream data sources and analyze the communities for AS1234.": 0.4,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3703703703703704,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.3703703703703704,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3673469387755102,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.35555555555555557,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.34782608695652173,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.34615384615384615,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3333333333333333,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3333333333333333,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17521494903039653
    },
    {
        "instruction": "Study the communities and Generate a summary of all BGP communities associated with BGP updates from foundries.io collector.",
        "input": "Project: foundries.io\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"foundries.io\",\n    records_type='updates'\n)\n\n# Dictionary to store BGP Communities\nbgp_communities = {}\n\n# Process BGP Records\nfor rec in stream.records():\n    for elem in rec:\n   # Get BGP Communities\n   for community in elem.fields['communities']:\n  if community in bgp_communities:\n     bgp_communities[community] += 1\n  else:\n     bgp_communities[community] = 1\n\n# Generate Summary\nprint(\"Summary of BGP Communities\\n\")\nprint(\"Community   | Count\")\nprint(\"-\" * 19)\n\nfor community in bgp_communities:\n    print(f\"{community:<11} | {bgp_communities[community]:5}\")",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.42857142857142855,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.3684210526315789,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.3448275862068966,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.30303030303030304,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.29411764705882354,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.27906976744186046,
            "Study the Communities information for AS9370 from RIS BGP streams.": 0.27586206896551724,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.2580645161290323,
            "Using RouteViews collectors, analyze the BGP communities in the IPv6 routes and detect possible communities with non-preferential path selection.": 0.25641025641025644,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.25
        },
        "avg_similarity_score": 0.13902276171831032
    },
    {
        "instruction": "Measure AS path inflation and Generate a summary of the average AS path length associated with the prefix 45.249.11.0/24 from the foundries.io collector.",
        "input": "Project: foundries.io\nPrefix: 45.249.11.0/24\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"foundries.io\",\n    records_type='updates',\n    filter=\"prefix exact 45.249.11.0/24\"\n)\n\n# Array to store AS Path lengths\naspath_lengths = []\n\n# Process BGP Records\nfor rec in stream.records():\n    for elem in rec:\n   # Get AS Path length\n   aspath_lengths.append(len(elem.fields['as-path'].split(' ')))\n\n# Calculate Average AS Path length\nif aspath_lengths:\n    avg_as_path_length = sum(aspath_lengths) / len(aspath_lengths)\nelse:\n    avg_as_path_length = 0\n\n# Generate Summary\nprint(\"Summary of AS Path Lengths\\n\")\nprint(f\"Average AS Path length for prefix 45.249.11.0/24 from foundries.io: {round(avg_as_path_length,2)}\")",
        "most_similar_instructions": {
            "Study the communities and Generate a summary of all BGP communities associated with BGP updates from foundries.io collector.": 0.46808510638297873,
            "Measure AS path inflation from the RouteViews collector.": 0.3888888888888889,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.3793103448275862,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3333333333333333,
            "Study the AS communities associated with the RouteViews collector.": 0.3243243243243243,
            "Monitor AS path inflation from ASN 13335 (Cloudflare) to collect a time-series of the path lengths.": 0.3111111111111111,
            "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.": 0.3111111111111111,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.2926829268292683,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.2903225806451613,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.28571428571428575
        },
        "avg_similarity_score": 0.1684828461349635
    },
    {
        "instruction": "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.",
        "input": "Time window: May 18, 2012, 17:20:00 to May 18, 2012, 17:21:00\nCollectors: route-views.isc, route-views2, route-views3, route-views6\nRecord Type: updates \nAS of Interest: 12389",
        "output": "import pybgpstream\n\n# Define the time window for the MOAS analysis\nstart_time = \"2012-05-18 17:20:00\"\nend_time = \"2012-05-18 17:21:00\"\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views6\"],\n    record_type=\"updates\"\n)\n\n# Initialize lists for ASNs and related MOAS prefixes\nasns = []\nMOAS_prefixes = []\n\nfor elem in stream:\n    # Collect updates from AS 12389\n    if elem.fields[\"as-path\"].startswith('12389'):\n        # Get the autonomous system number of a MOAS\n        as_num = elem.fields[\"as-path\"].split(' ')[1]\n        \n        if as_num not in asns:\n            asns.append(as_num)\n            # Compute and store MOAS prefix from AS path string\n            MOAS_prefixes.append(elem.fields[\"prefix\"])\n\n# Print the most likely paths originating from AS 12389\nprint(\"Most likely paths originating from AS 12389 on May 18, 2012, 17:21:00:\")\nfor k, v in zip(asns, MOAS_prefixes):\n    print(f\"AS{k} {v}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.3333333333333333,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.2926829268292683,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.28571428571428575,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.27586206896551724,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.26666666666666666,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.26315789473684215,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.24489795918367346,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2413793103448276,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.22950819672131145,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.22727272727272724
        },
        "avg_similarity_score": 0.13209678801009075
    },
    {
        "instruction": "Measuring AS path inflation using PyBGPStream. Use data from route-views.kixp and ris-ripe, and find any announcements that were made in the time window from July 18, 2009, 09:00:00 to July 18, 2009, 09:59:59.",
        "input": "Time window: July 18, 2009, 09:00:00 to July 18, 2009, 09:59:59 \nCollectors: route-views.kixp, ris-ripe\nRecord Type: updates\n<noinput>",
        "output": "import pybgpstream\nimport datetime\n\n# Define a time window to capture Announcements\nstart_time = \"2009-07-18 09:00:00\"\nend_time = \"2009-07-18 09:59:59\"\n\n# Initialize the BGPStream to use multiple KIXP and RIPE collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.kixp\", \"ris-ripe\"],\n    record_type=\"updates\",\n)\n\n# Get the time interval for Announcements in seconds\ntime_interval = (\n    datetime.datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S') - \n    datetime.datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')\n).total_seconds()\n\n# Initialize a list for AS paths and their lengths\naspaths = []\n\n# Loop over the BGPStream elements\nfor elem in stream:\n    # If Announcement is detected\n    if elem.type == \"A\":\n        # Get the AS path length from the AS path string\n        as_path_length = len(elem.fields[\"as-path\"].split(\" \"))\n\n        # Append the AS path length to the list\n        aspaths.append(as_path_length)\n        \n# Find the average AS path length in the time window\navg_path_len = sum(aspaths) / (time_interval / 60)\n\n# Output the average AS path length\nprint(f'Average AS path length in time window of {time_interval/60} minutes: {avg_path_len}')",
        "most_similar_instructions": {
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3823529411764706,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.3404255319148936,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3272727272727273,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.32352941176470584,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.30952380952380953,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.2666666666666666,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2608695652173913,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.24691358024691357,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.24657534246575344,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.24324324324324323
        },
        "avg_similarity_score": 0.15033664352728193
    },
    {
        "instruction": "Analyze AS relationships using PyBGPStream. Use data from the RouteViews collector and find announcements from AS 3549 in the time window from April 15, 2010, 06:30:00 to April 15, 2010, 06:45:00.",
        "input": "Time window: April 15, 2010, 06:30:00 to April 15, 2010, 06:45:00\nCollectors: RouteViews\nRecord Type: updates\nAS of Interest: 3549",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window and collector\nstart_time = \"2010-04-15 06:30:00\"\nend_time = \"2010-04-15 06:45:00\"\ncollectors = [\"route-views\"]\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=collectors,\n    record_type=\"updates\",\n)\n\n# Initialize an empty dictionary to store AS relationships\nrelationships = defaultdict(int)\n\n# Loop over the BGPStream elements\nfor elem in stream:\n    # Check if the Update is from AS 3549\n    if elem.fields[\"as-path\"].startswith(\"3549\"):\n        # Store ASN numbers in the AS path string for later analysis\n        as_path = elem.fields[\"as-path\"].strip().split(\" \")\n        # Check for direct neighbors (e.g. AS 3549's direct peers)\n        if as_path[1] != \"\":\n            # Record the final AS number in the AS path\n            relationship = (as_path[-1], as_path[1])\n            # Increment the count of the relationship\n            relationships[relationship] += 1\n\n# Print out all AS relationships observed\nprint(\"\\nAS Relationships:\")\nfor relationship, count in relationships.items():\n    print(f\"AS{relationship[0]} to AS{relationship[1]}: {count}\")",
        "most_similar_instructions": {
            "Measuring AS path inflation using PyBGPStream. Use data from route-views.kixp and ris-ripe, and find any announcements that were made in the time window from July 18, 2009, 09:00:00 to July 18, 2009, 09:59:59.": 0.42666666666666664,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3174603174603175,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3174603174603175,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3098591549295775,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.3076923076923077,
            "Utilize the PyBGPStream library to analyze the AS relationships among networks in different countries. Specifically, compare and contrast the AS relationships among networks in the United States, Australia, and India for the time window from August 10, 2019, 00:00:00 UTC, to August 20, 2019, 00:00:00 UTC.": 0.30588235294117644,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.30379746835443033,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.2941176470588235,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.2857142857142857,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.27499999999999997
        },
        "avg_similarity_score": 0.17404423831031926
    },
    {
        "instruction": "Collect BGP update records from KIXP and RouteViews with matching prefixes which include ASN 65577:1234 in their AS paths.",
        "input": "Time window: <noinput>\nCollectors: KIXP, RouteViews\nRecord Type: updates \nPath filtering: path \"_65577_1234_\"\n<noinput>",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use multiple KIXP and RouteViews collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"kixp\", \"route-views\"],\n    record_type=\"updates\",\n    filter=\"path \\\"_65577_1234_\\\"\"\n)\n\n# Collect updates with matching prefixes\nmatching_prefixes = []\n\n# Loop over the BGPStream elements\nfor elem in stream:\n    # Get the prefix of the update\n    prefix = elem.fields[\"prefix\"]\n    # Get the AS path string\n    as_path_string = elem.fields[\"as-path\"]\n    # Split it into a list of ASNs\n    ASNs = as_path_string.split(' ')\n    # Check if the ASN 65577:1234 is in the path \n    if \"65577:1234\" in ASNs:\n        # If so, add the prefix to the list\n        matching_prefixes.append(prefix)\n\n# Print out prefixes with ASN 65577:1234 in their AS paths\nprint(\"\\nPrefixes with ASN 65577:1234 in their AS paths:\")\nfor prefix in matching_prefixes:\n    print(f\"Prefix: {prefix}\")",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3529411764705882,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2916666666666667,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.2727272727272727,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.25,
            "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.": 0.24489795918367346,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.24489795918367346,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.24,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.23809523809523808,
            "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.": 0.23728813559322035
        },
        "avg_similarity_score": 0.13012918695221115
    },
    {
        "instruction": "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.",
        "input": "Time window: January 1, 2017, 00:00:00 to January 31, 2017, 23:59:59\nCollectors: AS-RIPE\nRecord type: updates\nFilter: moas",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2017-01-01 00:00:00\"\nend_time = \"2017-01-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"AS-RIPE\"],\n    record_type=\"updates\",\n    filter=\"moas\"\n)\n\n# Extract the origin AS numbers from announcements collected from AS-RIPE\norigin_asns = set()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            origin_asns.add(elem.fields[\"as-path\"].split()[-1])\n\n# Print the origin AS numbers\nprint(\"Origin AS numbers collected by AS-RIPE:\")\nfor num, asn in enumerate(sorted(origin_asns), start=1):\n    print(f\"{num}. {asn}\")",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.32558139534883723,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.31578947368421056,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.3137254901960784,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3018867924528302,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.27586206896551724,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.27586206896551724,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.2686567164179104,
            "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.": 0.2647058823529412,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.26190476190476186,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.2608695652173913
        },
        "avg_similarity_score": 0.16961781583542482
    },
    {
        "instruction": "Analyze the communities associated with the BGP announcements collected from the AS-KF project.",
        "input": "Project: as-kf\nRecord type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    project=\"as-kf\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store the communities\ncommunities = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            for community in elem.fields[\"communities\"]:\n                communities[community] += 1\n\n# Print the communities\nprint(\"Communities associated with the BGP announcements collected from the AS-KF project:\")\nfor num, comm in enumerate(sorted(communities.items(), key=lambda x: x[1], reverse=True), start=1):\n    print(f\"{num}. {comm[0]}: {comm[1]} times\")",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.43478260869565216,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.4,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.3846153846153846,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.36363636363636365,
            "Study the communities and Generate a summary of all BGP communities associated with BGP updates from foundries.io collector.": 0.36363636363636365,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3529411764705882,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.3333333333333333,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.3243243243243243,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.30303030303030304,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.29268292682926833
        },
        "avg_similarity_score": 0.17791395056595907
    },
    {
        "instruction": "Access the live streaming data source from a certain collector and visualize the top AS paths over time.",
        "input": "Collector name: route-views.linx",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict \n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collector=\"route-views.linx\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store the top AS paths\nas_paths = defaultdict(int)\n\n# Directory to store the top AS paths over time\ntop_as_paths_per_time = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            as_path = elem.fields[\"as-path\"]\n            as_paths[as_path] += 1\n\n            # Check the top AS paths at that time\n            time_current = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00')\n            top_paths = sorted(as_paths.items(), key=lambda x: x[1], reverse=True)\n            top_as_paths_per_time[time_current] = top_paths[:5]\n\n# Visualize the top AS paths over time\ntimestamps = list(top_as_paths_per_time.keys())\nfor i, as_path in enumerate(top_as_paths_per_time[timestamps[0]], start=1):\n    counts = [as_paths[path] for path in (p[0] for p in top_as_paths_per_time[ts])]\n\n    plt.figure(figsize=(12, 6))\n    plt.plot(timestamps, counts, marker='o', color='blue', linestyle='-')\n    plt.xlabel('Timestamp (Hourly)')\n    plt.ylabel('Number of Announcements')\n    plt.title('Top AS Path')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n    plt.show()\n\n# Print the top AS path and the number of times seen in the data\nprint(f\"Top AS Path: {top_as_paths_per_time[timestamps[-1]][0][0]}: {top_as_paths_per_time[timestamps[-1]][0][1]} times\")",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.411764705882353,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3902439024390244,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3888888888888889,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3870967741935484,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.380952380952381,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.380952380952381,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.37209302325581395,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3448275862068966,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.34285714285714286,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.33962264150943394
        },
        "avg_similarity_score": 0.18741726387902669
    },
    {
        "instruction": "Collect routing announcements for ASN 6550 and study the paths and the end ASN that is being visited in the AS path inflation.",
        "input": "Time window: April 1, 2018, 00:00:00 to April 30, 2018, 23:59:59\nCollectors: route-views2, route-views3, route-views4, route-views.sydney\nASN: 6550",
        "output": "import pybgpstream\n\n# Define the time window to capture data for the month of April 2018\nstart_time = \"2018-04-01 00:00:00\"\nend_time = \"2018-04-30 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectoORS=[\"route-views2\", \"route-views3\", \"route-views4\", \"route-views.sydney\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the end ASNs in the AS path\nend_asns = {}\n\n# Process BGP records for ASN 6550\nfor rec in stream.records():\n    for elem in rec:\n   # Check if its an announcement from ASN 6550\n   if elem.fields[\"peer-asn\"] == 6550 and elem.type == \"A\":\n  as_path = elem.fields[\"as-path\"].split()\n  # Get the end (rightmost) ASN in the path\n  if len(as_path) > 0:\n      last_asn = as_path[-1]\n      if last_asn not in end_asns:\n    end_asns[last_asn] = 0\n      end_asns[last_asn] += 1\n  \n# Print the AS path inflation for ASN 6550\nprint(f\"AS Path Inflation Details for ASN 6550\")\nfor asn in end_asns:\n    print(f\"ASN: {asn}, Count: {end_asns[asn]}\")",
        "most_similar_instructions": {
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3333333333333333,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3243243243243243,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.3103448275862069,
            "Collect updates from RouteViews BNA and TPA collectors between June 8th, 2020, 4:00am to June 8th, 2020, 4:10am. Study the AS paths and determine the AS relationships.": 0.3076923076923077,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.2926829268292683,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2857142857142857,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.27999999999999997,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.27906976744186046,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.27450980392156865,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.2711864406779661
        },
        "avg_similarity_score": 0.17115058694247362
    },
    {
        "instruction": "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.",
        "input": "Time window: April 1, 2018, 00:00:00 to April 30, 2018, 23:59:59\nCollectors: route-views2, route-views3, route-views4, route-views.sydney\nASN: 7018",
        "output": "import pybgpstream\n\n# Define the window to capture data in April 2018\nstart_time = \"2018-04-01 00:00:00\"\nend_time = \"2018-04-30 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"route-views.sydney\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the MOAS prefixes\nmoas_prefixes = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Check if its an announcement from ASN 7018\n   if elem.fields[\"peer-asn\"] == 7018 and elem.type == \"A\":\n  if elem.fields[\"as-path\"].startswith(\"7018 \"):\n      prefix = elem.fields[\"prefix\"]\n      moas_prefixes[prefix] = elem.fields[\"as-path\"]\n\n# Print the MOAS prefixes and their AS paths\nprint(f\"Multiple Origin AS (MOAS) Prefixes Announced by ASN 7018\")\nfor prefix in moas_prefixes:\n    print(f\"Prefix: {prefix}, \\t\\tAS Path: {moas_prefixes[prefix]}\")",
        "most_similar_instructions": {
            "Collect all RIB entries for the astral-sorcery project in the past 10 hours, and analyze all MOAS (Multiple Origin AS) prefixes for security anomalies.": 0.358974358974359,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.3529411764705882,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.3333333333333333,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3333333333333333,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.3225806451612903,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.30434782608695654,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.2790697674418604,
            "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.": 0.2790697674418604,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.2790697674418604,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.2745098039215686
        },
        "avg_similarity_score": 0.12255779139072082
    },
    {
        "instruction": "Study the communities of ASN 65002 for the month of April 2018.",
        "input": "Time window: April 1, 2018, 00:00:00 to April 30, 2018, 23:59:59\nCollectors: route-views2, route-views3, route-views4, route-views.sydney\nASN: 65002",
        "output": "import pybgpstream\n\n# Define the window to capture data for the month of April 2018\nstart_time = \"2018-04-01 00:00:00\"\nend_time = \"2018-04-30 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"route-views.sydney\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the announced communities\nannounced_communities = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Check if its an announcement from ASN 65002\n   if elem.fields[\"peer-asn\"] == 65002 and elem.type == \"A\":\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  if origin_as == \"65002\":\n      # Check for the communities\n      communities = elem.fields[\"communities\"]\n      if communities not in announced_communities:\n    announced_communities[communities] = 0\n      announced_communities[communities] += 1\n\n# Print the announced communities\nprint(f\"Announced Communities by ASN 65002\")\nfor community in announced_communities:\n    print(f\"Announced Community: {community}, Count: {announced_communities[community]}\")",
        "most_similar_instructions": {
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.3870967741935484,
            "Study the AS communities associated with the RouteViews collector.": 0.380952380952381,
            "Study the Communities information for AS9370 from RIS BGP streams.": 0.3636363636363636,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.3636363636363636,
            "Study the communities for AS1234 and determine which communities could indicate potential malicious activity.": 0.30769230769230765,
            "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.": 0.30303030303030304,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.30303030303030304,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.28571428571428575,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.28571428571428575,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.27586206896551724
        },
        "avg_similarity_score": 0.1433344501919949
    },
    {
        "instruction": "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.",
        "input": "Time window: April 1, 2018, 00:00:00 to April 30, 2018, 23:59:59\nCollectors: route-views2, route-views3, route-views4, route-views.sydney\nASN: 65001",
        "output": "import pybgpstream\n\n# Define the window to capture data for the month of April 2018\nstart_time = \"2018-04-01 00:00:00\"\nend_time = \"2018-04-30 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"route-views.sydney\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the end ASNs in the AS path\nend_asns = {}\n\n# Process BGP records for ASN 65001\nfor rec in stream.records():\n    for elem in rec:\n   # Check if its an announcement from ASN 65001\n   if elem.fields[\"peer-asn\"] == 65001 and elem.type == \"A\":\n  as_path = elem.fields[\"as-path\"].split()\n  # Get the end (rightmost) ASN in the path\n  if len(as_path) > 0:\n      last_asn = as_path[-1]\n      if last_asn not in end_asns:\n    end_asns[last_asn] = 0\n      end_asns[last_asn] += 1\n  \n# Print the AS paths for ASN 65001\nprint(f\"AS Paths Analyzed for ASN 65001\")\nfor asn in end_asns:\n    print(f\"ASN: {asn}, Count: {end_asns[asn]}\")",
        "most_similar_instructions": {
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.5,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4827586206896552,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4736842105263158,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.45161290322580644,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.45161290322580644,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4390243902439025,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.42424242424242425,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.41860465116279066,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.39999999999999997,
            "Collect routing announcements for ASN 6550 and study the paths and the end ASN that is being visited in the AS path inflation.": 0.3902439024390244
        },
        "avg_similarity_score": 0.18606223486758686
    },
    {
        "instruction": "Perform topological analysis using the route view's collected BGP data and identify AS paths containing more than 4 hops.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Dictionary to store the AS paths containing more than 4 hops\nlong_as_paths = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Check if the AS path contains more than 4 hops\n   as_path = elem.fields[\"as-path\"].split()\n   if len(as_path) > 4:\n  if elem.fields[\"prefix\"] not in long_as_paths:\n      long_as_paths[elem.fields[\"prefix\"]] = []\n  long_as_paths[elem.fields[\"prefix\"]].append(elem.fields[\"as-path\"])\n\n# Print the AS paths containing more than 4 hops\nprint(f\"AS Paths Containing More than 4 Hops\")\nfor prefix in long_as_paths:\n    print(f\"Prefix: {prefix}\")\n    for path in long_as_paths[prefix]:\n   print(f\"  AS Path: {' -> '.join(path)}\")",
        "most_similar_instructions": {
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.2631578947368421,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.25,
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.23809523809523808,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.23529411764705882,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.22727272727272727,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.22222222222222224,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.21818181818181817,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.2162162162162162,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.2105263157894737,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.20512820512820512
        },
        "avg_similarity_score": 0.12063904895817311
    },
    {
        "instruction": "Collect BGP announcement data from RouteViews and analyze AS relationship.",
        "input": "Project: route-views\nTime window: Last 7 days\nRecord type: updates",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Define the time window\none_week_ago = datetime.utcnow() - timedelta(days=7)\nuntil_time = datetime.strftime(datetime.utcnow(), \"%Y-%m-%d %H:%M:%S\")\nfrom_time = datetime.strftime(one_week_ago, \"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    project=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Initialize an empty dictionary to store ASN relations\nas_relations = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = tuple(elem.fields[\"as-path\"].split())\n  if len(as_path) == 1:  # Ignore single-AS prefixes\n      continue\n  # Check for valid AS relations in the AS path\n  # and store them in the dictionary\n  for i in range(1, len(as_path)):\n   as_relations[(as_path[i-1], as_path[i])] = 0\n\n# Count the occurrences of the AS relations in the dictionary\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  as_path = tuple(elem.fields[\"as-path\"].split())\n  if len(as_path) == 1:\n      continue\n  # Increment the counter of the valid AS relations\n  for i in range(1, len(as_path)):\n   if (as_path[i-1], as_path[i]) in as_relations:\n  as_relations[(as_path[i-1], as_path[i])] += 1\n\n# Print the results\nprint(\"AS Relationship:\")\nfor k, v in as_relations.items():\n    print(f\"  {k[0]} -> {k[1]}: {v}\")",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.5833333333333334,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.42857142857142855,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.4,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3684210526315789,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.358974358974359,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.358974358974359,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.3555555555555555,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.35294117647058826,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.35,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.34285714285714286
        },
        "avg_similarity_score": 0.1766164788552566
    },
    {
        "instruction": "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.",
        "input": "Project: ris-ripe, route-views.jinx, route-views.linx, route-views.nwax\nTime window: Last 48 hours\nRecord type: updates\nPrefixes: 1.0.0.0/8, 2001:db8::/48, 8.8.8.0/24,2001:4860::/32, 172.16.0.0/12",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\nfrom collections import Counter\n\n# Define the time window\ntwo_days_ago = datetime.utcnow() - timedelta(days=2)\nuntil_time = datetime.strftime(datetime.utcnow(), \"%Y-%m-%d %H:%M:%S\")\nfrom_time = datetime.strftime(two_days_ago, \"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    project=\"ris-ripe,route-views.jinx,route-views.linx,route-views.nwax\",\n    record_type=\"updates\"\n)\n\n# List of the five prefixes that we are interested in\nprefixes = [\"1.0.0.0/8\", \"2001:db8::/48\", \"8.8.8.0/24\", \"2001:4860::/32\", \"172.16.0.0/12\"]\n\n# Dictionary to store the AS paths counter\nas_paths_counter = Counter()\n\n# Iterate over the BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":# Check for BGP announcements\n  if elem.fields['prefix'] in prefixes:\n # Get the As-Path for the announced prefix\n as_path = tuple(elem.fields[\"as-path\"].split())\n # Increment the counter\n as_paths_counter[as_path] += 1\n\n# Print the results\nprint(\"Most common AS paths for the specified prefixes:\")\nfor path, count in as_paths_counter.most_common(5):\n    print(f\"  Path: {path} (Count: {count})\")",
        "most_similar_instructions": {
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.5116279069767442,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.39215686274509803,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3728813559322034,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.36363636363636365,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3333333333333333,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.3333333333333333,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3333333333333333,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3243243243243243,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.31999999999999995,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.31999999999999995
        },
        "avg_similarity_score": 0.20020169719596562
    },
    {
        "instruction": "Use pyBGPStream and access the live stream data source of RRC-RIO-1 within 2018-09-16 00:00:00 to 2018-09-17 00:00:00 timeframe. Create a histogram that illustrates the number of prefix announcements from each ISP.",
        "input": "Time window: 2018-09-16 00:00:00 to 2018-09-17 00:00:00\nCollector: rrc-rio-1",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2018-09-16 00:00:00\"\nend_time = \"2018-09-17 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc-rio-1\"],\n    record_type=\"updates\"\n)\n\n# Store the AS paths and timestamps of events\nevents_data = []\n\n# Process BGP records\nfor rec in stream.records():\n    elem = rec.get_next_elem()\n    while elem:\n        # Get AS path and source ASN\n        as_path = elem.fields[\"as-path\"].split()\n        source_asn = as_path[0]    \n        event_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n        \n        events_data.append({'time': event_time, 'source_asn': source_asn})\n        elem = rec.get_next_elem()\n\n# Create the dataframe\ndf = pd.DataFrame(events_data)\n\n# Count occurrences of each ASN\nasn_counts = Counter(df['source_asn'])\n\n# Plot the frequency of ASNs announcements\nplt.figure(figsize=(12, 6))\nplt.hist(list(asn_counts.keys()), weights=list(asn_counts.values()), bins=15, color='blue')\nplt.xlabel('Autonomous System Number (ASN)')\nplt.ylabel('Number of Prefix Announcements')\nplt.title('Frequency of Prefix Announcements')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.32432432432432434,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.30769230769230765,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.2857142857142857,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.27272727272727276,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.26865671641791045,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.2619047619047619,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.25925925925925924,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.2564102564102564,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.25000000000000006,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.24390243902439024
        },
        "avg_similarity_score": 0.15179591548213986
    },
    {
        "instruction": "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.",
        "input": "Time window: Last 24 hours\nCollectors: route-views2, route-views3, route-views4",
        "output": "import pybgpstream\nimport datetime\nfrom collections import defaultdict\n\n# Save the current time for calculation\ncurrent_time = datetime.datetime.utcnow()\n\n# Calculate the start time as the last 24 hours\nstart_time = current_time - datetime.timedelta(hours=24)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    until_time=current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    collectors=[\"route-views2\",\"route-views3\",\"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Containers for MOAS information\nprefixes = defaultdict(list)\nAS_paths = defaultdict(list)\n\n# Collect the MOAS information\nfor rec in stream.records():\n    for elem in rec:\n        # Every time a prefix is seen, add it to the dictionary\n        if elem.type == \"A\" and elem.fields[\"prefix\"] not in prefixes[elem.peer_asn]:\n            prefixes[elem.peer_asn].append(elem.fields[\"prefix\"])\n        # If the AS N is not in the same AS path\n        elif elem.type == \"A\" and len(elem.fields[\"as-path\"].split(\" \")) >= 2:\n            path = elem.fields[\"as-path\"].split(\" \")\n            if (elem.peer_asn != path[-2]):\n                AS_paths[elem.fields[\"prefix\"]].append(\" -> \".join(path))\n\n# Print the table\nprint(\"Prefix | AS Paths\")\nprint(\"-------------------------\")\nfor as_number, prefix_list in prefixes.items():\n    print(f\"Origin AS: {as_number}\")\n    for prefix in prefix_list:\n        print(f\"{prefix} | {AS_paths[prefix]}\")\n    print(\"-------------------------\")",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.4150943396226415,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.39285714285714285,
            "Collect all RIB entries for the astral-sorcery project in the past 10 hours, and analyze all MOAS (Multiple Origin AS) prefixes for security anomalies.": 0.3703703703703704,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.36065573770491804,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3508771929824561,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.3448275862068966,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3448275862068966,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.3291139240506329,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.32653061224489793,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.32653061224489793
        },
        "avg_similarity_score": 0.19347215652850083
    },
    {
        "instruction": "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.",
        "input": "Time window: Last 24 hours\nCollectors: route-views2, route-views4",
        "output": "import pybgpstream\nimport datetime\n\n# Save the current time for calculation\ncurrent_time = datetime.datetime.utcnow()\n\n# Calculate the start time as the last 24 hours\nstart_time = current_time - datetime.timedelta(hours=24)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    until_time=current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    collectors=[\"route-views2\", \"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Create an empty dictionary to store our results\nas_path_inflation = {}\n\n# Collect the AS paths and measure the AS path inflation\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            path = elem.fields[\"as-path\"].split()\n            origin_as = path[-1]\n            path_length = len(path)\n\n            # If the ASN is not in the dictionary, add it\n            if origin_as not in as_path_inflation:\n                as_path_inflation[origin_as] = path_length\n            # If the ASN is already in the dictionary, update the path length\n            elif as_path_inflation[origin_as] < path_length:\n                as_path_inflation[origin_as] = path_length\n\n# Print the results\nprint(\"Origin ASN | AS Path Length\")\nprint(\"----------------------------\")\nfor asn, path_length in as_path_inflation.items():\n    print(f\"{asn} | {path_length}\")",
        "most_similar_instructions": {
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.5306122448979592,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.5294117647058824,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.4897959183673469,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.4090909090909091,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.40816326530612246,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.3829787234042553,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.375,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3673469387755102,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3636363636363637,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.36000000000000004
        },
        "avg_similarity_score": 0.2108757840267187
    },
    {
        "instruction": "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.",
        "input": "Time window: Last 24 hours\nCollectors: ripe",
        "output": "import pybgpstream\nimport datetime\nfrom collections import defaultdict\n\n# Save the current time for calculation\ncurrent_time = datetime.datetime.utcnow()\n\n# Calculate the start time as the last 24 hours\nstart_time = current_time - datetime.timedelta(hours=24)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    until_time=current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    collectors=[\"ripe\"],\n    record_type=\"updates\"\n)\n\n# Container for contiguous path lengths\nas_path_length = defaultdict(list)\n\n# Collect the AS paths and their lengths\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            path = elem.fields[\"as-path\"].split()\n            origin_as = path[-1]\n            path_length = len(path)\n\n            # If the ASN is not in the dictionary, add it\n            if origin_as not in as_path_length:\n                as_path_length[origin_as] = [path_length]\n            # If the ASN is already in the dictionary, append the path length\n            else:\n                as_path_length[origin_as].append(path_length)\n\n# Calculate the mean path length for each AS\nas_mean_path_length = {asn: sum(paths) / len(paths)\n                       for asn, paths in as_path_length.items()}\n\n# Print the results\nprint(\"ASN | Mean Path Length\")\nprint(\"-----------------------\")\nfor asn, length in as_mean_path_length.items():\n    print(f\"{asn} | {length}\")",
        "most_similar_instructions": {
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.5,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.4615384615384615,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.42105263157894735,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.39999999999999997,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3793103448275862,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.35714285714285715,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3508771929824561,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3333333333333333,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.32,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.3103448275862069
        },
        "avg_similarity_score": 0.18052798987530877
    },
    {
        "instruction": "Identify how many MOAS Prefixes were announced on February 24,7 2008 from the Route Views collector.",
        "input": "Time window: February 24, 2008, 18:00:00 to February 24, 2008, 22:00:00 Collectors: route-views",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2008-02-24 18:00:00\"\nend_time = \"2008-02-24 22:00:00\"\n\n# Initialize the BGPStream and observer MOAS events\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\n\n# Variables to store counters\nmoas_count = 0\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"M\":\n            moas_count +=1\n\nprint(f\"Number of MOAS Prefixes announced between {start_time} and {end_time}: {moas_count}\")",
        "most_similar_instructions": {
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.25,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.24390243902439027,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.24242424242424243,
            "Measure AS path inflation from the RouteViews collector.": 0.24,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.23529411764705882,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.23529411764705882,
            "Analyse security threats received by AS28376 from the RouteViews collector.": 0.22222222222222224,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.22222222222222224,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.21428571428571427,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.19999999999999998
        },
        "avg_similarity_score": 0.10657323943363332
    },
    {
        "instruction": "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.",
        "input": "Time window: February 24, 2008, 18:00:00 to February 24, 2008, 22:00:00 Collectors: route-views",
        "output": "import pybgpstream\nfrom networkx import Graph\n\n# Define the time window around the incident\nstart_time = \"2008-02-24 18:00:00\"\nend_time = \"2008-02-24 22:00:00\"\n\n# Initialize the BGPStream and create a graph to store topology information\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\ngraph = Graph()\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        edge = (elem.fields[\"peer-asn\"], elem.fields[\"as-path\"].split()[-1])\n        graph.add_edge(*edge)\n\n# Run the topological analysis\n# Here, we assume that the analysis function is available to us\nanalysis_results = topology_analysis(graph)\n\n# Output the results in a detailed report\nprint(\"Topology Analysis Results:\\n\")\nprint(\"Number of nodes:\", analysis_results[\"num_nodes\"])\nprint(\"Number of edges:\", analysis_results[\"num_edges\"])\nprint(\"Average degree:\", analysis_results[\"avg_degree\"])\nprint(\"Average path length:\", analysis_results[\"avg_path_length\"])\nprint(\"Connected components:\", analysis_results[\"connected_components\"])",
        "most_similar_instructions": {
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.34615384615384615,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.3333333333333333,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3125,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2978723404255319,
            "Analyze the network configuration and reliability over the past two weeks.": 0.29411764705882354,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.28571428571428575,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.27906976744186046,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.2727272727272727,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.26415094339622636,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.2608695652173913
        },
        "avg_similarity_score": 0.16001104160404522
    },
    {
        "instruction": "Calculate the average AS path inflation on a specific day in the RouteViews collector.",
        "input": "Time window: February 24, 2008, 18:00:00 to February 24, 2008, 22:00:00 Collectors: route-views",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2008-02-24 18:00:00\"\nend_time = \"2008-02-24 22:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\n\n# Variables to store counters\nas_path_lengths = []\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path_lengths.append(len(elem.fields[\"as-path\"].split()))\n\n# Calculate the average AS path inflation\nif len(as_path_lengths) > 0:\n    avg_inflation = sum(as_path_lengths) / len(as_path_lengths)\n    print(f\"Average AS path inflation between {start_time} and {end_time}: {avg_inflation}\")\nelse:\n    print(\"No records found between the given time window.\")",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.5454545454545454,
            "Study the AS communities associated with the RouteViews collector.": 0.43478260869565216,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3448275862068965,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3333333333333333,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.3333333333333333,
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.3243243243243243,
            "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.": 0.3225806451612903,
            "Monitor AS path inflation from ASN 13335 (Cloudflare) to collect a time-series of the path lengths.": 0.3225806451612903,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.30769230769230765,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.30769230769230765
        },
        "avg_similarity_score": 0.15571014662581248
    },
    {
        "instruction": "Measure the average path length preference of all BGP update announcement of prefix 208.65.153.0/24 on February 24,  2008 from the Route Views collector.",
        "input": "Time window: Febraury 24, 2008, 18:00:00 to February 24, 2008, 22:00:00 Collectors: route-views Prefix: 208.65.153.0/24",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2008-02-24 18:00:00\"\nend_time = \"2008-02-24 22:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\n\n# Variables to store counters\npath_lengths = []\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == \"208.65.153.0/24\":\n            path_lengths.append(len(elem.fields[\"as-path\"].split()))\n\n# Calculate the average path length\nif len(path_lengths) > 0:\n    avg_length = sum(path_lengths) / len(path_lengths)\n    print(f\"Average path length of prefix 208.65.153.0/24 between {start_time} and {end_time}: {avg_length}\")\nelse:\n    print(\"No records found between the given time window.\")",
        "most_similar_instructions": {
            "Identify how many MOAS Prefixes were announced on February 24,7 2008 from the Route Views collector.": 0.409090909090909,
            "Measure AS path inflation and Generate a summary of the average AS path length associated with the prefix 45.249.11.0/24 from the foundries.io collector.": 0.39999999999999997,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.35294117647058826,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.33333333333333337,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.30434782608695654,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.29268292682926833,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.2857142857142857,
            "Measure AS path inflation from the RouteViews collector.": 0.2857142857142857,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.27450980392156865,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.26666666666666666
        },
        "avg_similarity_score": 0.14762560309381062
    },
    {
        "instruction": "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(collectors=\"route-views-apnic\", record_type=\"updates\")\n\n# Variables to store counters\nbgp_events = []\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            bgp_events.append(elem)\n\n# Analyze the BGP events\n# Here, we assume that the analysis function is available to us\nanalysis_results = bgp_events_analysis(bgp_events)\n\n# Output the results\nprint(\"BGP Events Analysis Results:\\n\")\nprint(\"Number of BGP Events:\", analysis_results[\"num_events\"])\nprint(\"Regional Distribution:\", analysis_results[\"regional_distribution\"])\nprint(\"Prefix Distribution:\", analysis_results[\"prefix_distribution\"])\nprint(\"Average AS path length:\", analysis_results[\"avg_as_path_length\"])",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.6060606060606061,
            "Access live stream data sources and analyze the communities for AS1234.": 0.5161290322580645,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.4324324324324324,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.4285714285714286,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4242424242424242,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.4210526315789474,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4090909090909091,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4000000000000001,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.39999999999999997,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.39999999999999997
        },
        "avg_similarity_score": 0.16674419739964397
    },
    {
        "instruction": "Study the communities of various BGP announcements from Route Views collector and generate histograms of resulting information.",
        "input": "Time window: February 24, 2008, 18:00:00 to February 24, 2008, 22:00:00 Collectors: route-views",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\nstart_time = \"2008-02-24 18:00:00\"\nend_time = \"2008-02-24 22:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\n\n# Variables to store counters\nas_communities = defaultdict(int)\n\n# Process the records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_string = elem.fields[\"communities\"].split(\":\")[1:-1]\n            for asn in as_string:\n                as_communities[asn] += 1\n\n# Generate histograms of the resulting community information\nplt.bar(list(as_communities.keys()), list(as_communities.values()))\nplt.xlabel(\"ASN\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Histogram of BGP Communities from Route Views\")\nplt.show()",
        "most_similar_instructions": {
            "Study the communities and Generate a summary of all BGP communities associated with BGP updates from foundries.io collector.": 0.3888888888888889,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.37037037037037035,
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.35,
            "Study the communities of ASN 65002 for the month of April 2018.": 0.3448275862068966,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.33333333333333337,
            "Analyze the communities associated with the BGP announcements collected from the AS-KF project.": 0.3225806451612903,
            "Measure the average path length preference of all BGP update announcement of prefix 208.65.153.0/24 on February 24,  2008 from the Route Views collector.": 0.3181818181818182,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.3125,
            "Study the AS communities associated with the RouteViews collector.": 0.30769230769230765,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3043478260869565
        },
        "avg_similarity_score": 0.15639302124307555
    },
    {
        "instruction": "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.",
        "input": "Time window: March 24, 2008, 16:00:00 to March 24, 2008, 17:00:00 Collectors: route-views",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2008-03-24 16:00:00\"\nend_time = \"2008-03-24 17:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(from_time=start_time, until_time=end_time, collectors=[\"route-views\"], record_type=\"updates\")\n\n# Analyze the security of BGP messages\n# Here, we assume that the analysis function is available to us\nanalysis_results = security_analysis(stream)\n\n# Output the results\nprint(\"Security Analysis Results:\\n\")\nprint(\"Number of BGP Messages:\", analysis_results[\"num_messages\"])\nprint(\"Number of Malicious Messages:\", analysis_results[\"num_malicious\"])\nprint(\"Malicious ASes:\", analysis_results[\"malicious_as\"])",
        "most_similar_instructions": {
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.4444444444444445,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.42424242424242425,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.40625,
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.3859649122807018,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.35955056179775285,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3548387096774193,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3548387096774193,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.33333333333333337,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.3243243243243243,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.31884057971014496
        },
        "avg_similarity_score": 0.17823675470840317
    },
    {
        "instruction": "Access live stream data sources in order to analyze AS path inflation for the BGP route of 5.182.0.0/16, exported from ASN 63561. Display the route entries for the AS path according to the latest data available.",
        "input": "Prefix: 5.182.0.0/16\nOrigin ASN: 63561",
        "output": "import pybgpstream\n\n# Initialize BGPStream with live stream data source\nstream = pybgpstream.BGPStream(\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\n# Accessing the route entries for the AS path according to the latest data\nroute_entries = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == \"5.182.0.0/16\" and elem.fields[\"as-path\"].split().pop(0) == \"63561\":\n            route_entries.append(elem.fields[\"as-path\"])\n\n# Display the route entries for the AS path according to the latest data available\nprint(\"Route entries for the AS path of the BGP route 5.182.0.0/16, exported from ASN 63561:\")\nfor e in route_entries:\n    print(e)",
        "most_similar_instructions": {
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3692307692307692,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.34374999999999994,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.339622641509434,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3384615384615385,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3333333333333333,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.3225806451612903,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.3214285714285714,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3137254901960785,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.3103448275862069,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3103448275862069
        },
        "avg_similarity_score": 0.18713486500839113
    },
    {
        "instruction": "Collect BGP records, exported from ASN 63572, and analyze the origin ASN attached to the BGP update records. Create a visualization of the AS path topology and record the connectivity between ASNs.",
        "input": "Origin ASN: 63572",
        "output": "import pybgpstream\nfrom networkx.drawing.nx_pylab import draw_networkx\nimport networkx as nx \n\n# Initialize BGPStream data source\nstream = pybgpstream.BGPStream(\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\n# Collect BGP records, exported from ASN 63572\nbgps = []\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields[\"as-path\"].lstrip().startswith(\"63572\"):\n            bgps.append(elem)\n\n# Create a visualization of the AS path topology\nG = nx.Graph()\nfor bgp in bgps:\n    origin = bgp.fields[\"as-path\"].lstrip().split()[0]\n    neigh = bgp.fields[\"as-path\"].lstrip().split()[1:]\n    G.add_node(origin)\n    for n in neigh:\n        G.add_edge(origin, n)\n\n# Record the connectivity between ASNs    \nconnectivity = dict(nx.all_pairs_shortest_path_length(G))\nprint(connectivity)\n\n# Draw the graph\nplt.figure(figsize=(12, 6))\ndraw_networkx(G)\nplt.title('AS Path Topology for BGP Updates from Origin ASN 63572')\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.3283582089552239,
            "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.": 0.3125,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.30000000000000004,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.29411764705882354,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.2909090909090909,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.2909090909090909,
            "Collect routing announcements for ASN 6550 and study the paths and the end ASN that is being visited in the AS path inflation.": 0.2909090909090909,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.28571428571428575,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.28571428571428575,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.2857142857142857
        },
        "avg_similarity_score": 0.1921459222206931
    },
    {
        "instruction": "Use BGP route collector data to analyze how the AS relationship between ASN 64513 and ASN 8674 has changed over the last 14 days. Compare AS paths of 1.198.0.0/16 propagated by both the ASNs.",
        "input": "Time window: Last 14 Days\nASN1: 64513\nASN2: 8674\nPrefix: 1.198.0.0/16",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Define last 14 days as the time window\nend_time = datetime.utcnow() \nstart_time = end_time - timedelta(days=14)\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time.strftime('%Y-%m-%d %H:%M:%S'),\n    until_time=end_time.strftime('%Y-%m-%d %H:%M:%S'),\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\n# Storing AS paths for the compared ASN\npath_64513 = defaultdict(list)\npath_8674 = defaultdict(list)\n\n# Analyze AS relationship between ASN 64513 and ASN 8674\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == \"1.198.0.0/16\":\n            as_path = elem.fields[\"as-path\"].split()\n            as_origin = as_path.pop(0)\n            timestamp_minute = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M')\n            if as_origin == \"64513\":\n                path_64513[timestamp_minute] = as_path\n            elif as_origin == \"8674\":\n                path_8674[timestamp_minute] = as_path\n\n# Plot the comparison\ntimestamps = sorted(path_64513.keys())\ncounts_64513 = [len(path_64513[ts]) for ts in timestamps]\ncounts_8674 = [len(path_8674[ts]) for ts in timestamps]\n\nplt.figure(figsize=(12, 6))\nplt.plot(timestamps, counts_64513, label=\"64513\", marker='o', linestyle='-')\nplt.plot(timestamps, counts_8674, label=\"8674\", marker='o', linestyle='-')\nplt.xlabel('Time (Minute)')\nplt.ylabel('AS Path Length')\nplt.title('AS Path Comparison of ASN 64513 and ASN 8674 over 1.198.0.0/16')\nplt.legend()\nplt.xticks(rotation=45, ha='right')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.2807017543859649,
            "Determine the relation between ASN 65501 and ASN 65500 by checking the length of BGP paths between them over the past month.": 0.26666666666666666,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.26666666666666666,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.25925925925925924,
            "Access live stream data sources in order to analyze AS path inflation for the BGP route of 5.182.0.0/16, exported from ASN 63561. Display the route entries for the AS path according to the latest data available.": 0.25641025641025644,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.25531914893617025,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.25,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.24615384615384617,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.24137931034482757,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.23880597014925373
        },
        "avg_similarity_score": 0.15792354703564376
    },
    {
        "instruction": "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.",
        "input": "Time window: April 11, 2014, 16:00:00 to April 11, 2014, 18:00:00\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates\nipversion: 4 and 6",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2014-04-11 16:00:00\"\nend_time = \"2014-04-11 18:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\",\"route-views3\",\"route-views4\"], \n    record_type=\"updates\",\n    ipversion=[4,6]\n)\n\n# Dictionary to store the AS path length\nas_path_length = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n     as_path = elem.fields[\"as-path\"].split()\n   if as_path[-1] not in as_path_length:\n  as_path_length[as_path[-1]] = [len(as_path)]\n else:\n  as_path_length[as_path[-1]].append(len(as_path))\n\n# Get the maximum and minimum AS path length\nfor asn, path_lengths in as_path_length.items():\n    max_path_length = max(path_lengths)\n    min_path_length = min(path_lengths)\n  \n    print(\"AS{}: Maximum AS path length: {}; Minimum AS path length: {}\".format(\n        asn, max_path_length, min_path_length))",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.3448275862068965,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.32911392405063294,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3287671232876712,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.31884057971014496,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.31578947368421056,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.29411764705882354,
            "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.": 0.29411764705882354,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.2894736842105264,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.276923076923077,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2686567164179105
        },
        "avg_similarity_score": 0.17686908765214468
    },
    {
        "instruction": "Use PyBGPStream to analyze the access networks over IPv4 with peers from the ASN 56789 between 16:00:00 and 17:00:00 on August 3, 2006. Determine the prefix length distribution over the same time window.",
        "input": "Time window: August 3, 2006, 16:00:00 to August 3, 2006, 17:00:00\nCollectors: rrc00, route-views2\nRecord Type: updates\nipversion: 4\npeer: 56789",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window\nstart_time = \"2006-08-03 16:00:00\"\nend_time = \"2006-08-03 17:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\", \"route-views2\"],\n    record_type=\"updates\",\n    ipversion=4,\n    peer=56789\n)\n\n# Counter to store the prefix length distribution\nprefix_length_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  prefix = elem.fields[\"prefix\"]\n  prefix_length = prefix.split('/')[-1]  # Get the prefix length\n\n# Count the prefix length\nprefix_length_counter[prefix_length] += 1\n\n# Print the prefix length distribution\nfor prefix_length, count in prefix_length_counter.items():\n    print(\"Prefix Length: {}, Count: {}\".format(prefix_length, count))",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.5789473684210528,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3880597014925374,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3661971830985916,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.31746031746031744,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3076923076923077,
            "Use pyBGPStream and access the live stream data source of RRC-RIO-1 within 2018-09-16 00:00:00 to 2018-09-17 00:00:00 timeframe. Create a histogram that illustrates the number of prefix announcements from each ISP.": 0.30769230769230765,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.2972972972972973,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.29629629629629634,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.28571428571428575,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.28571428571428575
        },
        "avg_similarity_score": 0.16446875936552452
    },
    {
        "instruction": "Use PyBGPStream to collect BGP announcements and like-type withdraws from RouteViews between 09:00:00 and 18:00:00 on July 7, 2009. Access the live stream data sources and carry out topological analysis.",
        "input": "Time window: July 7, 2009, 09:00:00 to July 7, 2009, 18:00:00\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2009-07-07 09:00:00\"\nend_time = \"2009-07-07 18:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time, \n    until_time=end_time, \n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the announcements and withdraws\nannouncements = {}\nwithdraws = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  prefix = elem.fields[\"prefix\"]\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n\n  # Store the announcements\n  if prefix not in announcements:\n announcements[prefix] = (as_path, origin_as)\n\nelse:\n if elem.type == \"W\":  # Check for BGP withdraws\n  prefix = elem.fields[\"prefix\"]\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n\n  # Store the withdraws\n  if prefix not in withdraws:\n withdraws[prefix] = (as_path, origin_as)\n\n# Access the live stream sources and perform topological analysis\n... (rest of the code for topoogical analysis)",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.4324324324324324,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.37499999999999994,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3582089552238806,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.34615384615384615,
            "Use PyBGPStream to analyze the access networks over IPv4 with peers from the ASN 56789 between 16:00:00 and 17:00:00 on August 3, 2006. Determine the prefix length distribution over the same time window.": 0.33333333333333337,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.3137254901960784,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.29508196721311475,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.2903225806451613,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.2898550724637681,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.28125
        },
        "avg_similarity_score": 0.16617293650616674
    },
    {
        "instruction": "Use PyBGPStream to collect the AS communities associated with a prefix 206.58.208.0/20 between July 7, 2009 and July 8, 2009 from RouteViews. Compare the two days and summarize the changes in the communities.",
        "input": "Time window: July 7, 2009, 00:00:00 to July 8, 2009, 00:00:00\nCollectors: route-views2, route-views3, route-views4\nRecord Type: updates\nFilter: prefix exact 206.58.208.0/20",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2009-07-07 00:00:00\"\nend_time = \"2009-07-08 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\",\"route-views3\",\"route-views4\"], \n    record_type=\"updates\",\n    filter=\"prefix exact 206.58.208.0/20\"\n)\n\n# Dictionary to store the AS communities\nas_communities = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n     as_path = elem.fields[\"as-path\"].split()\n     origin_as = as_path[-1]\n     communities = elem.fields[\"communities\"]\n     timestamp = elem.time \n\n     # Store the AS communities\n     if origin_as not in as_communities:\n  as_communities[origin_as] = [(communities, timestamp)]\n else:\n  as_communities[origin_as].append((communities, timestamp))\n\n# Compare the two days and summarize the changes\n... (rest of the code for data comparison and summarization)",
        "most_similar_instructions": {
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.34375,
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.2894736842105264,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.28571428571428575,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.28125,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.2807017543859649,
            "Use PyBGPStream to collect BGP announcements and like-type withdraws from RouteViews between 09:00:00 and 18:00:00 on July 7, 2009. Access the live stream data sources and carry out topological analysis.": 0.2777777777777778,
            "Use PyBGPStream to analyze the access networks over IPv4 with peers from the ASN 56789 between 16:00:00 and 17:00:00 on August 3, 2006. Determine the prefix length distribution over the same time window.": 0.2702702702702703,
            "Study the AS communities associated with the RouteViews collector.": 0.26086956521739135,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.2592592592592593,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.24719101123595508
        },
        "avg_similarity_score": 0.16439328954095891
    },
    {
        "instruction": "Gather all MOAS (Multiple Origin AS) prefixes advertised by AS20057 during the last week using PyBGPStream and generate a report showing the number of unique announcements related to each MOAS prefix.",
        "input": "Time window: Last week\nCollectors: route-views2, route-views4\nRecord Type: ribs",
        "output": "import pybgpstream\nimport datetime\nfrom collections import Counter\n\n# Calculate the last week's time window\ntime_delta = datetime.timedelta(days=7)\ntoday = datetime.datetime.now()\nstart_time = (today - time_delta).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = today.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views4\"],\n    record_type=\"ribs\")\n\nmoas_prefixes = Counter()\n\nfor rec in stream.records():\n    for elem in rec:\n   # Collect MOAS prefixes originated by AS20057\n  if elem.fields[\"origin\"] == \"20057\":\n    moas_prefixes.update([elem.fields[\"prefix\"]])\n\nprint(\"Summary Report:\")\nprint(f\"Number of unique announcements related to each MOAS prefix during the last week: {len(moas_prefixes)}\")\nfor pfx, count in moas_prefixes.items():\n    print(f\"{pfx}: {count} announcements\")",
        "most_similar_instructions": {
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.43137254901960786,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.3235294117647059,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.2978723404255319,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.29166666666666663,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.27586206896551724,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.2711864406779661,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.26666666666666666,
            "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.": 0.26666666666666666,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.2631578947368421,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.2564102564102564
        },
        "avg_similarity_score": 0.14948942329601347
    },
    {
        "instruction": "Find out the AS paths length distribution of prefixes announced by AS20057 during the June 20, 2008 from 12:00:00 to 12:30:00 using PyBGPStream.",
        "input": "Time window: June 20, 2008, 12:00:00 to June 20, 2008, 12:30:00\nCollectors: route-views.sydney\nRecord Type: updates",
        "output": "import pybgpstream\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\nstart_time = \"2008-06-20 12:00:00\"\nend_time = \"2008-06-20 12:30:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.sydney\"],\n    record_type=\"updates\"\n)\n\n# Initialize the AS path lengths list\nas_path_lengths = []\n\n# Collect data from BGPStream\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  # Collect AS path lengths from BGP announcement\n  if \"as-path\" in elem.fields:\n     as_path = elem.fields[\"as-path\"].split()\n     as_path_lengths.append(len(as_path))\n\n# Create plot with AS path lengths\nplt.hist(as_path_lengths, bins=100)\nplt.title(\"AS Path Lengths of Prefixes Announced by AS20057 from 2008-06-20 12:00:00 to 2008-06-20 12:30:00\")\nplt.xlabel(\"Length of AS Path\")\nplt.ylabel(\"Frequencies\")\nplt.show()",
        "most_similar_instructions": {
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.32142857142857145,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.3157894736842105,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.2909090909090909,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.28125,
            "Gather all MOAS (Multiple Origin AS) prefixes advertised by AS20057 during the last week using PyBGPStream and generate a report showing the number of unique announcements related to each MOAS prefix.": 0.27586206896551724,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.26315789473684215,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.2545454545454545,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.25,
            "Identify the top 10 AS paths with the highest number of transits of IPv4 prefixes originated from AS 111 ayde-11.": 0.25,
            "Calculate the length of paths for AS Paths which list AS50461 as one of the Autonomous Systems without using a filter.": 0.25
        },
        "avg_similarity_score": 0.14274701386670932
    },
    {
        "instruction": "Access live stream data sources available through PyBGPStream and generate a report on top five ASes that announced highest number of IPv6 prefixes over the past 24 hours.",
        "input": "Time window: Last 24 hours\nCollectors: All project collectors\nRecord Type: updates",
        "output": "import pybgpstream\nimport datetime\nfrom collections import Counter\n\n# Calculate the last 24 hours' time window\ntime_delta = datetime.timedelta(hours=24)\ntoday = datetime.datetime.now()\nstart_time = (today - time_delta).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = today.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"updates\"\n)\n\nas_ipv6_count = Counter()\n\nfor rec in stream.records():\n    for elem in rec:\n   # Count the number of IPv6 prefixes announced by each AS\n  if elem.fields[\"peer-asn\"] and elem.fields[\"prefix\"][0] == \"2\":\n     as_ipv6_count[elem.fields[\"peer-asn\"]] += 1\n\n # Find the top five ASes that announced highest number of IPv6\ntop_ases = as_ipv6_count.most_common(5)\n\n# Summary Report\nprint(\"Summary Report:\")\nprint(\"\\nTop ASes that announced highest number of IPv6 prefixes over the past 24 hours:\")\nfor asn, count in top_ases:\n    print(f\"AS{asn}: {count} times\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.39999999999999997,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.3859649122807017,
            "Access live stream data sources and analyze the communities for AS1234.": 0.358974358974359,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3414634146341463,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3414634146341463,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.33962264150943394,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.3333333333333333,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.32,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3137254901960784,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.30769230769230765
        },
        "avg_similarity_score": 0.1430544273254822
    },
    {
        "instruction": "Access the BGP updates from RIPE RIS collector during the month of August 2019 and generate a report showing the ASes with the highest path inflation rates.",
        "input": "Time window: August 1, 2019, 00:00:00 to August 31, 2019, 23:59:59\nCollectors: ripe\nRecord Type: updates",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2019-08-01 00:00:00\"\nend_time = \"2019-08-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ripe\"],\n    record_type=\"updates\"\n)\n\n# Initialize path length counts and path inflation rates dictionaries\npath_length_counts = Counter()\npath_inflation_rates = Counter()\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  # Count the path length of each BGP announcement\n  path = elem.fields[\"as-path\"].split()\n  path_length = len(path[:-1])\n  path_length_counts.update([path_length])\n\n  # Calculate path inflation rates\n  origin = path[-1]\n  if path_length_counts[path_length] > 1:\n     inflation_rate = (path_length - 1) / path_length_counts[path_length]\n     path_inflation_rates.update([origin, inflation_rate])\n\n# Find the ASes with the highest path inflation rates\npath_inflation_rates = sorted(path_inflation_rates.items(), key=lambda x: x[1], reverse=True)\n\n# Summary Report\nprint(\"Summary Report:\")\nprint(\"\\nASes with highest path inflation rates:\")\nfor asn, rate in path_inflation_rates[:5]:\n    print(f\"AS{asn}: {rate}\")",
        "most_similar_instructions": {
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.34782608695652173,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3137254901960785,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.30769230769230765,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.29787234042553196,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.29508196721311475,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.29268292682926833,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.2909090909090909,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.2909090909090909,
            "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.": 0.2909090909090909,
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.27999999999999997
        },
        "avg_similarity_score": 0.176459211592484
    },
    {
        "instruction": "Collect BGP Update records from RouteViews (uil) collector for ASNs between 64500 and 64599 for a 10 minute interval starting from June 6, 2019, 09:30:00 UTC. Apply specific filters including ipversion 4 or 6, path containing 65501:12345, MOAS containing 65501:12345 and peer ASN 12390. Extract the prefixes and match them with the communities.",
        "input": "Time window: June 6, 2019, 09:30:00 UTC, to June 6, 2019, 09:40:00 UTC\nCollectors: uil\nRecord Type: updates\nASNs: 64500-64599\nFilters: ipversion 4 or 6, path containing 65501:12345, MOAS containing 54501:12345, peer ASN 12390",
        "output": "import pybgpstream\n\n# Define the time window of the incident\nstart_time = \"2019-06-06 09:30:00 UTC\"\nend_time = \"2019-06-06 09:40:00 UTC\"\n\n# Initialize BGPStream\n# Apply specific filters\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"uil\"],\n    record_type=\"updates\",\n    filter=\"( ipversion 4 or ipversion 6 ) and ( as-path _65501:12345_ ) and ( moas _65501:12345_ ) and ( peer 12390 )\"\n)\n\n# Create a set to store the unique prefixes\nprefixes = set()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefixes.add(elem.fields['prefix'])\n# Collect the communities and match them to the prefixes\ncomm_lists = {}\n\nfor prefix in prefixes:\n     # Filter on the specific prefix\n     stream = pybgpstream.BGPStream(\n        from_time=start_time,\n        until_time=end_time,\n        collectors=[\"uil\"],\n        record_type=\"updates\",\n        filter=\"prefix %s\" % prefix\n    )\n\n    comm_list = set()  # Create a set to capture unique comms\n    for rec in stream.records():\n        for elem in rec:\n            if elem.type == \"A\":\n                for comm in elem.fields['comms']:\n                    comm_list.add(comm)\n    comm_lists[prefix] = comm_list\n\n# Print the communities for each prefix\nfor prefix in prefixes:\n    print(\"Prefix: %s\\nCommunities: %s\\n\" % (prefix, comm_lists[prefix]))",
        "most_similar_instructions": {
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.2654867256637168,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.2469135802469136,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.23655913978494625,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.23529411764705885,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.23255813953488372,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.22448979591836735,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.22429906542056072,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.22018348623853212,
            "Use PyBGPStream to collect BGP announcements and like-type withdraws from RouteViews between 09:00:00 and 18:00:00 on July 7, 2009. Access the live stream data sources and carry out topological analysis.": 0.21739130434782608,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.21705426356589147
        },
        "avg_similarity_score": 0.13081615378822423
    },
    {
        "instruction": "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.",
        "input": "Time window: June 6, 2019, 12:00:00 UTC, to June 6, 2019, 14:00:00 UTC\nCollectors: route-views.wil-chl-ipv4, rrc10\nRecord Type: Updates",
        "output": "import pybgpstream\n\n# Define the time window of the incident\nstart_time = \"2019-06-06 12:00:00 UTC\"\nend_time = \"2019-06-06 14:00:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.wil-chl-ipv4\", \"rrc10\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            print(\"Prefix: \", elem.fields['prefix'])\n            print(\"AS Path: \", elem.fields['as-path'])\n            print(\"Peer ASN: \", elem.fields['peer_asn'])\n            print(\"Prepend Count: \", elem.fields['prepend_count'])\n            print(\"Prepend List: \", elem.fields['prepend_list'])\n            print(\"--------------\")",
        "most_similar_instructions": {
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.4285714285714286,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.40404040404040403,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.379746835443038,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.3720930232558139,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.36619718309859156,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.3652173913043478,
            "Collect BGP update data for December 12, 2017, from multiple RouteViews collectors. Identify BGP announcements made by AS39523 during the time window from 04:00 to 08:00 UTC. Create a time series plot showing the number of announcements every 15 minutes during that period.": 0.36363636363636365,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3466666666666667,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3380281690140845,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17800874970103694
    },
    {
        "instruction": "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.",
        "input": "Time window: June 6, 2019, 11:00:00 UTC, to June 6, 2019, 11:15:00 UTC\nCollectors: route-views.wil-chl-ipv4\nRecord Type: updates\nPrefix: 13.128.16.0/20",
        "output": "import pybgpstream\n\n# Define the time window of the incident\nstart_time = \"2019-06-06 11:00:00 UTC\"\nend_time = \"2019-06-06 11:15:00 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.wil-chl-ipv4\"],\n    record_type=\"updates\",\n    filter=\"prefix more 13.128.16.0/20\"\n)\n\n# Create a set to store the unique prefixes\nprefixes = set()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            prefixes.add(elem.fields['prefix'])\n\n# Collect the communities and match them to the prefixes\ncomm_lists = {}\n\nfor prefix in prefixes:\n    # Filter on the specific prefix\n    stream = pybgpstream.BGPStream(\n        from_time=start_time,\n        until_time=end_time,\n        collectors=[\"route-views.wil-chl-ipv4\"],\n        record_type=\"updates\",\n        filter=\"prefix %s\" % prefix\n    )\n\n    comm_list = set()  # Create a set to capture unique comms\n    for rec in stream.records():\n        for elem in rec:\n            if elem.type == \"A\":\n                for comm in elem.fields['comms']:\n                    comm_list.add(comm)\n    comm_lists[prefix] = comm_list\n\n# Print the communities for each prefix\nfor prefix in prefixes:\n    print(\"Prefix: %s\\nCommunities: %s\\n\" % (prefix, comm_lists[prefix]))",
        "most_similar_instructions": {
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.6153846153846155,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3614457831325301,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.35955056179775274,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.35000000000000003,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.3461538461538462,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.3434343434343434,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.33766233766233766,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3333333333333333,
            "Utilize the PyBGPStream library to analyze the AS relationships among networks in different countries. Specifically, compare and contrast the AS relationships among networks in the United States, Australia, and India for the time window from August 10, 2019, 00:00:00 UTC, to August 20, 2019, 00:00:00 UTC.": 0.32653061224489793,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3157894736842105
        },
        "avg_similarity_score": 0.17299725806521404
    },
    {
        "instruction": "Access live stream data sources and extract records related to routes propagated from AS65432. Collect BGP data from route-views.isc, route-views.jinx, and route-views.kixp collectors. Output the records with their AS-Path and Communities information.",
        "input": "Collectors: route-views.isc, route-views.jinx, route-views.kixp\nType:Ribs\nPeer: 65432",
        "output": "import pybgpstream\n\n# Define the parameters\ncollectors = [\"route-views.isc\", \"route-views.jinx\", \"route-views.kixp\"]\nrecord_type = \"ribs\"\npeer_asn = 65432\n\n# Initialize BGPStream with the specified collectors\nstream = pybgpstream.BGPStream(\n    collectors=collectors,\n    record_type=record_type\n)\n\n# Parse records and print AS-Path and Community information\nfor rec in stream.records():\n    for elem in rec:\n        if elem.peer_asn == 65432:\n            as_path = elem.fields[\"as-path\"].split()\n            communities = elem.fields[\"communities\"]\n            print(f\"AS-Path: {as_path}, Communities: {communities}\")",
        "most_similar_instructions": {
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.37500000000000006,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.34375,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.32727272727272727,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3235294117647059,
            "Access live stream data sources and analyze the communities for AS1234.": 0.32,
            "Analyze BGP community for BGP update records in the last day from route-views.bom01, route-views.equinix-jp, and route-views.saopaulo collectors.": 0.31746031746031744,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.31746031746031744,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.31746031746031744,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3076923076923077,
            "Access live stream data sources in order to analyze AS path inflation for the BGP route of 5.182.0.0/16, exported from ASN 63561. Display the route entries for the AS path according to the latest data available.": 0.3037974683544304
        },
        "avg_similarity_score": 0.1709834519778632
    },
    {
        "instruction": "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.",
        "input": "Time window: February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC\nCollector: route-views.nwax\nRecord Type: updates (Announcements)\nLeaking ASN: 7491",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import Counter\n\n# Specify the time window\nstart_time = \"2021-02-13 15:00:00 UTC\"\nend_time = \"2021-02-13 16:00:00 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    projects=[\"route-views\"],\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"nwax\"],\n    record_type=\"updates\"\n)\n\n# Store the number of moas prefixes\nmoas_prefixes = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"as-path\"]:\n            as_arr = elem.fields[\"as-path\"].split()\n            if as_arr[-1] == \"7491\" and len(set(as_arr)) > 1:\n                moas_prefixes[elem.fields[\"prefix\"]] += 1\n\n# Results\nprint(f\"Number of MOAS prefixes within ASN 7491 over the given time window is {len(moas_prefixes)}\")",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.5454545454545455,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.42975206611570255,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.42975206611570255,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.4123711340206186,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.40860215053763443,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.38399999999999995,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3838383838383838,
            "Visualize the BGP update timeline for the specified prefixes during the time window from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, and ris-ripe. Collect BGP update records of type 'A' (Announcements) for these prefixes. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.36065573770491804,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.358974358974359,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.35164835164835173
        },
        "avg_similarity_score": 0.1642947625829793
    },
    {
        "instruction": "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.",
        "input": "Time window: February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC\nCollectors: route-views.sg, route-views.eqix\nRecord Type: RIBs\nASN: 11164",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Specify the time window\nstart_time = \"2021-02-13 04:00:00 UTC\"\nend_time = \"2021-02-14 10:48:00 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    projects=[\"route-views\"],\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.sg\", \"route-views.eqix\"],\n    record_type=\"ribs\"\n)\n\n# Store the AS relationships\nas_relationships = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        as_relations = elem.fields[\"as-path\"].split()\n        if len(as_relations) > 2:\n            as_from, as_to = as_relations[-2], as_relations[-1]\n            if as_from == \"11164\":\n                as_relationships[as_from].append(as_to)\n\n# Results\nprint(f\"AS relationships for ASN 11164: {as_relationships}\")",
        "most_similar_instructions": {
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.47457627118644075,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.4473684210526315,
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.43373493975903615,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.4067796610169492,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.40540540540540543,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3939393939393939,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.3896103896103896,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3658536585365854,
            "Access live stream data sources and analyze the communities for AS1234.": 0.36363636363636365,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.36
        },
        "avg_similarity_score": 0.18337529774615566
    },
    {
        "instruction": "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.",
        "input": "Time window: February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC\nCollectors: route-views.sg, route-views.eqix\nRecord Type: updates (Announcements)\nASN: 65432",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2021-02-13 15:00:00 UTC\"\nend_time = \"2021-02-13 16:00:00 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    projects=[\"route-views\"],\n    from_time=start_time, \n    until_time=end_time,\n    collectors=[\"route-views.sg\", \"route-views.eqix\"],\n    record_type=\"updates\"\n)\n\n# Store the AS Path Length and Preference\nas_path_length_preferences = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            if \"65432\" in as_path:\n                as_path_length = len(as_path)\n                as_path_preference = int(elem.fields[\"preference\"])\n                as_path_length_preferences[as_path_length].append(as_path_preference)\n\n# Results\nfor p_len, p_pref in as_path_length_preferences.items():\n    avg_p_pref = sum(p_pref) / len(p_pref)\n    print(f\"AS Path Length: {p_len}, AS Path Preference: {avg_p_pref:.2f}\")",
        "most_similar_instructions": {
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.686868686868687,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.5217391304347826,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.5121951219512195,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.46938775510204084,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.4583333333333333,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.42666666666666664,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.4,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.4,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3902439024390244,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.37777777777777777
        },
        "avg_similarity_score": 0.18024347712636574
    },
    {
        "instruction": "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.",
        "input": "Collectors: route-views.sg, route-views.eqix\nRecord Type: RIBs\nASN: 21100",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    projects=[\"route-views\"],\n    collectors=[\"route-views.sg\", \"route-views.eqix\"],\n    record_type=\"ribs\"\n)\n\n# Store the configuration and reliability metrics\nconfig_reliability_metrics = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields[\"as-path\"].split()[-1] == \"21100\":\n            timestamp_minute = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M')\n            config_val = int(elem.fields[\"preference\"])\n            reliability_val = int(elem.fields[\"local-pref\"])\n            config_reliability_metrics[timestamp_minute] += [config_val, reliability_val]\n\n# Results\nfor timestamp, metrics in config_reliability_metrics.items():\n    avg_config_val = sum(metrics[::2]) / len(metrics[::2])\n    avg_reliability_val = sum(metrics[1::2]) / len(metrics[1::2])\n    print(f\"Timestamp: {timestamp}, Avg. Config. Value: {avg_config_val:.2f}, Avg. Reliability Value: {avg_reliability_val:.2f}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.45161290322580644,
            "Access live stream data sources and analyze the communities for AS1234.": 0.41379310344827586,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.411764705882353,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.3888888888888889,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3870967741935484,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.36842105263157887,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.36842105263157887,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.3636363636363636,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.35000000000000003,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.34285714285714286
        },
        "avg_similarity_score": 0.12612584977290558
    },
    {
        "instruction": "Gather live stream data from public RouteViews collectors to collect MOAS Prefix information for AS 25152 for the past 7 days. Generating a time series including an average of MOAS prefixes per hour.",
        "input": "Time window: 24 hours for the past 7 days\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nRecord Type: ribs",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\n# Define the time window\nnow = datetime.now()\nstart_time = (now - timedelta(days=7)).strftime(\"%Y-%m-%d %H:%M:%S\")\nend_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"ribs\"\n)\n\n# Dictionary to store the count of MOAS Prefixes per hour\nas_prefixes = {}\n\n# Process BGP records\nfor rec in stream.records():\nfor elem in rec:\n  if elem.type == \"RIB\":  # Check for RIB records\n  prefix = elem.fields[\"prefix\"]\n  origin_as = elem.fields[\"as-path\"].split()[-1]\n  timestamp = elem.time\n  \n  # Filter only AS 25152\n  if origin_as == \"25152\":\n  if prefix not in as_prefixes:\n    as_prefixes[prefix] = []\n  as_prefixes[prefix].append((timestamp))\n\n# Aggregate Prefixes\naggregated_prefixes = {str(k):len(v) for k,v in as_prefixes.items()}\n\n# Group Data by hours\ndata = pd.DataFrame.from_dict(aggregated_prefixes, orient='index', columns=['count'])\ndata['hour'] = data.index.map(lambda x: datetime.strptime(x.split(' ')[1], '%H:%M:%S').hour)\ndata = data.groupby('hour').sum()\n\n# Visualize Time Series\nplt.figure(figize=(10,6))\nplt.plot(data['count'], label='MOAS Prefix Counts')\nplt.legend(loc='upper left')\nplt.xlabel('Hours')\nplt.ylabel('Number of Prefixes')\n\n# Save raw data to CSV\ndata.to_csv('moas_prefixes.csv')\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3448275862068965,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3448275862068965,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32142857142857145,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.30303030303030304,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.29166666666666663,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.2909090909090909,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.2903225806451613,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.2857142857142857,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.2807017543859649,
            "Monitor AS path inflation from ASN 13335 (Cloudflare) to collect a time-series of the path lengths.": 0.27999999999999997
        },
        "avg_similarity_score": 0.15803991833279335
    },
    {
        "instruction": "Obtain BGP updates from a collector named rrc00 for the past week for all prefixes with time stamp greater than 2020-04-23 11:15:00 UTC. Measure the AS Path Inflation and display the AS Path Length Histogram.",
        "input": "Time window: from 2020-04-23 11:15:00 UTC to now\nCollectors: rrc00\nRecord Type: updates",
        "output": "import pybgpstream\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2020-04-23 11:15:00\"\nend_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the AS Path Lengths\nas_path_lengths = []\n\n# Process BGP records\nfor rec in stream.records():\nfor elem in rec:\nif elem.time > start_time:  # Filter records with timestamp greater than start time\n  as_path_length = len(elem.fields[\"as-path\"].split())\n  as_path_lengths.append(as_path_length)\n\n# Measure AS Path Inflation\nas_path_inflation = np.mean(as_path_lengths)\n\n# Visualize the AS Path Length Histogram\nplt.figure(figize=(10,6))\nplt.hist(as_path_lengths, bins=50)\nplt.xlabel('AS Path Length')\nplt.ylabel('Number of Occurances')\n\n# Save the raw data\ndf = pd.DataFrame(as_path_lengths, columns=['length'])\ndf.to_csv('as_path_lengths.csv', index=False)\n\nprint(\"AS Path Inflation is: \", as_path_inflation)\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.3389830508474576,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3235294117647059,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3076923076923077,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.2857142857142857,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.2857142857142857,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.27848101265822783,
            "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.": 0.27586206896551724,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.2736842105263158,
            "Access the BGP updates from RIPE RIS collector during the month of August 2019 and generate a report showing the ASes with the highest path inflation rates.": 0.27272727272727276,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.27027027027027023
        },
        "avg_similarity_score": 0.16350028381115495
    },
    {
        "instruction": "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.",
        "input": "Time window: January 2019 Collectors: rrc05 Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2019-01-01 00:00:00\"\nend_time = \"2019-01-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc05\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the count of origin AS for each BGP prefix\norigin_ases_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"A\":\n            prefix = elem.fields['prefix']\n            origin_ases_counter[prefix] += 1\n\n# Visualize the AS subnets with more than 15 origin ASes\nhigh_origin_ases = [p for p in origin_ases_counter.keys() if origin_ases_counter[p] > 15]\n\nplt.figure(figsize=(12, 6))\nplt.barh(high_origin_ases, [origin_ases_counter[p] for p in high_origin_ases], color='blue')\nplt.xlabel('Number of Origin ASes')\nplt.ylabel('AS Subnets')\nplt.title('AS Subnets with more than 15 Origin ASes (January 2019)')\nplt.tight_layout()\nplt.gca().invert_yaxis()  # To display the most popular subnet at the top\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.4615384615384615,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.4285714285714286,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.3859649122807017,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.375,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.3684210526315789,
            "Access the BGP updates from RIPE RIS collector during the month of August 2019 and generate a report showing the ASes with the highest path inflation rates.": 0.36363636363636365,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.36000000000000004,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.3508771929824561,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.34782608695652173,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.34375000000000006
        },
        "avg_similarity_score": 0.1994906626382673
    },
    {
        "instruction": "Collect BGP RIB update data for the month of October 2018 from all available RouteViews collectors and measure AS path inflation for BGP prefixes 1.2.3.0/24 and 4.5.6.7/32.",
        "input": "Time window: October 2018 Collectors: all Type: ribs Prefix: 1.2.3.0/24, 4.5.6.7/32",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\nstart_time = \"2018-10-01 00:00:00\"\nend_time = \"2018-10-31 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"all\",\n    record_type=\"ribs\",\n    filter=\"prefix 1.2.3.0/24 4.5.6.7/32\"\n)\n\n# Dictionary to store the AS paths for each BGP prefix\nprefix_as_paths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"RIB\":\n            prefix = elem.fields['prefix']\n            if prefix not in prefix_as_paths:\n                prefix_as_paths[prefix] = []\n            prefix_as_paths[prefix].append(elem.fields['as-path'].split())\n\n# Measure AS path inflation\nresults = []\nfor prefix in prefix_as_paths:\n    max_length = len(max(prefix_as_paths[prefix], key=len))\n    min_length = len(min(prefix_as_paths[prefix], key=len))\n    path_inflation = max_length - min_length\n    results.append((prefix, min_length, max_length, path_inflation))\n\n# Visualize the path inflation for each prefix\nprefixes, min_lengths, max_lengths, path_inflations = zip(*results)\n\nplt.figure(figsize=(12, 6))\nplt.bar(prefixes, path_inflations, color='red')\nplt.xlabel('Prefixes')\nplt.ylabel('AS Path Inflation')\nplt.title('AS Path Inflation for BGP Prefixes')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.5306122448979592,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.40625,
            "Collect BGP update data for the entire month of February 2014 from multiple RouteViews collectors. Separate BGP announcements and withdrawals per day. Visualize the data using line charts to show the daily trends for both announcements and withdrawals.": 0.3835616438356164,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.36923076923076925,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.36363636363636365,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.36363636363636365,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3384615384615384,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3333333333333333,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3174603174603175,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.31578947368421045
        },
        "avg_similarity_score": 0.1854381218348693
    },
    {
        "instruction": "Access a live stream data source using PyBGPStream and anlyze the top 5 most common MOAS (Multiple Origin AS) prefixes in the chosen stream.",
        "input": "<No input>",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"live\",\n    record_type=\"ribs\"\n)\n\n# Dictionary to store the origin ASes for each BGP prefix\norigin_ases_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"RIB\":\n            prefix = elem.fields['prefix']\n            origin_as = elem.fields['as-path'].split()[-1]\n            origin_ases_counter[prefix] += 1\n\n# Visualize all prefixes with more than one origin AS\nmoas_prefixes = [p for p in origin_ases_counter.keys() if origin_ases_counter[p] > 1]\n\nplt.figure(figsize=(12, 6))\nplt.barh(moas_prefixes, [origin_ases_counter[p] for p in moas_prefixes], color='blue')\nplt.xlabel('Number of Origin ASes')\nplt.ylabel('MOAS Prefixes')\nplt.title('The Top 5 MOAS Prefixes in the BGP Stream')\nplt.tight_layout()\nplt.gca().invert_yaxis()  # To display the most popular prefix at the top\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.5084745762711864,
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.380952380952381,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.3636363636363636,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.34782608695652173,
            "Access live stream data sources available through PyBGPStream and generate a report on top five ASes that announced highest number of IPv6 prefixes over the past 24 hours.": 0.3461538461538462,
            "Access live stream data sources and analyze the communities for AS1234.": 0.34285714285714286,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.34146341463414637,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.3404255319148936,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.339622641509434,
            "Access live BGP data sources using pybgpstream, and filter the live stream records by ipversion 4 and type updates, and by origin ASN 10902.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17056038091883666
    },
    {
        "instruction": "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.",
        "input": "Time window: October 10, 2011, 00:00:00 to October 12, 2011, 00:00:00 Collectors: rrc04 Type: updates Peer AS: AS55330",
        "output": "import pybgpstream\nimport networkx as nx\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2011-10-10 00:00:00\"\nend_time = \"2011-10-12 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc04\"],\n    record_type=\"updates\",\n    filter=\"peer 55330\"\n)\n\n# Initialize the graph\ngraph = nx.DiGraph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for BGP announcements\n        if elem.type == \"A\":\n            # Add the source AS as a node\n            source_as = elem.fields[\"as-path\"].split()[0]\n            graph.add_node(source_as)\n\n            # Add the peer AS as a node\n            peer_as = elem.fields[\"peer-asn\"]\n            graph.add_node(peer_as)\n\n            # Add edges between the source and peer AS\n            graph.add_edge(source_as, peer_as)\n\n# Visualize the topology of BGP announcements made by AS55330\nnx.draw(graph, with_labels=True)\nplt.title('Topology of BGP Announcements made by AS55330')\nplt.show()",
        "most_similar_instructions": {
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.5217391304347827,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.42718446601941745,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.39999999999999997,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.391304347826087,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.3838383838383838,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.3820224719101124,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.37837837837837834,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3661971830985916,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.36363636363636365,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.36363636363636365
        },
        "avg_similarity_score": 0.19043563622181636
    },
    {
        "instruction": "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.",
        "input": "Collectors: route-views\nTime window: July 7, 2018 00:00:00 to July 9, 2018 00:00:00\nRecord Type: ribs",
        "output": "import pybgpstream\nfrom collections import Counter\nfrom datetime import datetime\n\nstart_time = \"2018-07-07 00:00:00\"\nend_time = \"2018-07-09 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"],\n    record_type=\"ribs\"\n)\n\nas17807_data = defaultdict(lambda: {'count': 0})\n\nfor rec in stream.records():\n    for elem in rec:\n   if \"communities\" in elem.fields:\n  communities = elem.fields[\"communities\"]\n\n    if \"as17807:\" in communities:\n    community_items = communities.split('_')\n  for community in community_items:\n     if \"as17807:\" in community:\n    preference = community.split(':')[1]\n    as17807_data[preference]['count'] += 1\n\n# Summary Generation\nprefix_counter = Counter({preference: data['count'] for preference, data in as17807_data.items()})\nmost_common_preferences = prefix_counter.most_common()\nresults = []\nresults.append(f\"Most Common Path Preferences for AS17807:\")\nfor preference, count in most_common_preferences:\n    results.append(f\"Preference: {preference}, Count: {count}\")\n\nwith open('AS17807_summary.txt', 'w') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.4123711340206186,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.4112149532710281,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.3902439024390244,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3835616438356164,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.3764705882352941,
            "Collect BGP announcement data for AS23724 from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Analyze and plot the number of BGP announcements per hour for AS23724 during this time frame. Additionally, provide the total number of announcements for AS23724, the hour with the maximum announcements, and the top 5 most common AS paths announced by AS23724. Save the results in a text document.": 0.360655737704918,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.3603603603603604,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.3478260869565218,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3291139240506329,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.3225806451612903
        },
        "avg_similarity_score": 0.18458727851375784
    },
    {
        "instruction": "Compute the aggregate metrics of global AS relationships using MOAS based prefixes for the time window between April 17, 2015, 00:00:00 and April 18, 2015, 00:00:00. Visualize the relationship count by AS and AS-Path (e.g. Longest-Prefix Match)",
        "input": "Time window: April 17, 2015, 00:00:00 to April 18, 2015, 00:00:00\nCollectors: route-views, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\nfrom datetime import datetime\n\nstart_time = \"2015-04-17 00:00:00\"\nend_time = \"2015-04-18 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"ris-ripe\"],\n    record_type=\"updates\",\n    filter=\"moas\"\n)\n\nas_data = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  # Add the origin AS to the list of other ASes in the list\n  as_data[elem.fields['prefix']].append(origin_as)\n\nas_dict = defaultdict(int)\n\nfor prefix, as_list in as_data.items():\n    # Count the number of ASes in the list\n   count = len(as_list)\n  # Compute the AS path for the prefix\n   path = '_'.join(sorted(as_list))\n  # Store the count and path in the dictionaries\n  as_dict[path] += count\n\nx = []\ny = []\nfor as_path, count in as_dict.items():\n    x.append(as_path)\n    y.append(count)\n\n# Plotting\nfig, ax = plt.subplots()\nplt.title('AS Relationship Count by AS and AS Path')\nplt.xlabel('AS Path')\nplt.ylabel('# of ASes')\nplt.bar(x, y)\n\n# Saving to file\nfig.savefig('as_metrics.png')",
        "most_similar_instructions": {
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.40476190476190477,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.379746835443038,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.345679012345679,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.33333333333333326,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.32727272727272727,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.3209876543209877,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.31460674157303375,
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.3132530120481928,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.30769230769230765,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3013698630136986
        },
        "avg_similarity_score": 0.16252602951867562
    },
    {
        "instruction": "Cover relationship bias analysis for both inbound and outbound routing decisions by studying AS path inflation. Use BGP announcements from the RIS RIS rrc03 collector for the time window between July 3, 2020, 00:00:00 and July 6, 2020, 00:00:00.",
        "input": "Time window: July 3, 2020, 00:00:00 to July 6, 2020, 00:00:00\nCollectors: ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nfrom collections import Counter, defaultdict\nfrom datetime import datetime\n\nstart_time = \"2020-07-03 00:00:00\"\nend_time = \"2020-07-06 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-ripe\"],\n    record_type=\"updates\"\n)\n\nin_data = Counter()\nout_data = Counter()\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  peer_as = elem.fields[\"peer-asn\"].split(':')[1]\n\n  if origin_as == peer_as:\n      # Count the number of ASes in the path for outbound routing decisions\n   count = len(as_path)\n   out_data[origin_as] += count\n  else:\n      # Count the number of ASes in for inbound routing decisions\n   count = len(as_path) - 1\n   in_data[origin_as] += count\n\n# Summary Generation\nresults = []\nresults.append(\"Inbound Analysis:\")\nfor as_num, count in in_data.most_common():\n    results.append(f\"AS{as_num}: {count}\")\n\nresults.append(\"\\nOutbound Analysis:\")\nfor as_num, count in out_data.most_common():\n    results.append(f\"AS{as_num}: {count}\")\n\nwith open('bias_analysis.txt', 'w') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.5070422535211269,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.38554216867469876,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.375,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.36363636363636365,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.36363636363636365,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3466666666666667,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3333333333333333,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.32876712328767127,
            "Measuring AS path inflation using PyBGPStream. Use data from route-views.kixp and ris-ripe, and find any announcements that were made in the time window from July 18, 2009, 09:00:00 to July 18, 2009, 09:59:59.": 0.3132530120481927,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.3076923076923077
        },
        "avg_similarity_score": 0.16401385718760658
    },
    {
        "instruction": "Access real-time streaming data from BGPStream and use it to determine the relationships between AS numbers and make analyse them for the current day.",
        "input": "",
        "output": "import pybgpstream\nimport datetime\nfrom collections import defaultdict\n\n# Set current day as the time window\nnow = datetime.datetime.now()\nstart_time = datetime.datetime(now.year, now.month, now.day, 0, 0, 0).strftime(\"%Y-%m-%d %H:%M:%S\")\nnow = datetime.datetime.now()\nend_time = datetime.datetime(now.year, now.month, now.day, 23, 59, 59).strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Set up the stream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time, \n    collectors=['route-views'],\n    record_type='updates'\n)\n\nas_data = defaultdict(list)\n\n# Iterate through records and store the AS relational data\nfor rec in stream.records():\n   for elem in rec:\n if elem.type == \"A\":\n     as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n  # Add the origin AS to the list of other ASes in the list\n  as_data[origin_as].append(as_path[-2])\n\n# Analyze the data\nfor as_num, path_list in as_data.items():\n    print(f\"AS{as_num}: {sorted(list(set(path_list)))}\")",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.35000000000000003,
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.32558139534883723,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.29787234042553196,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.2916666666666667,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.2916666666666667,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.2857142857142857,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.28,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.28,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.28,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.27906976744186046
        },
        "avg_similarity_score": 0.17237861243238847
    },
    {
        "instruction": "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.",
        "input": "Time window: December 26, 2015, 00:00:00 to December 29, 2015, 00:00:00\nCollectors: ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nfrom collections import Counter\nfrom datetime import datetime\n\nstart_time = \"2015-12-26 00:00:00\"\nend_time = \"2015-12-29 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-ripe\"],\n    record_type=\"updates\"\n)\n\noutdegrees = Counter()\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n      hop_count = int(elem.fields[\"hop-count\"])\n  if hop_count == 0:\n     as_path = elem.fields[\"as-path\"].split()\n     origin_as = as_path[-1]\n     peer_as = elem.fields[\"peer-asn\"].split(':')[1]\n     outdegrees[origin_as] += 1\n\n# Summary Generation\noutdegrees_top = outdegrees.most_common(10)\nresults = []\nresults.append(f\"Top 10 Outdegrees over a period of 3 days:\")\nfor as_num, count in outdegrees_top:\n    results.append(f\"AS{as_num}: {count}\")\n\nwith open('outdegree_summary.txt', 'w') as output_file:\n    output_file.write('\\n'.join(results))",
        "most_similar_instructions": {
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.4615384615384615,
            "Cover relationship bias analysis for both inbound and outbound routing decisions by studying AS path inflation. Use BGP announcements from the RIS RIS rrc03 collector for the time window between July 3, 2020, 00:00:00 and July 6, 2020, 00:00:00.": 0.45945945945945943,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.44067796610169496,
            "Compute the aggregate metrics of global AS relationships using MOAS based prefixes for the time window between April 17, 2015, 00:00:00 and April 18, 2015, 00:00:00. Visualize the relationship count by AS and AS-Path (e.g. Longest-Prefix Match)": 0.4266666666666667,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.4242424242424243,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.411764705882353,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.39999999999999997,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.38095238095238093,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.3684210526315789,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.36619718309859156
        },
        "avg_similarity_score": 0.17834329174625066
    },
    {
        "instruction": "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.",
        "input": "Time window: February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC \nCollectors: route-views2.sfmix, route-views.wide \nRecord Type: updates\nIP Version: 4",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2021-02-25 00:00:00 UTC\"\nend_time = \"2021-03-03 23:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2.sfmix\", \"route-views.wide\"],\n    record_type=\"updates\",\n    ipversion=\"4\"\n)\n\n# Store counts of unique AS paths, original path lengths, and inflated path lengths\nas_path_counts = defaultdict(int)\noriginal_lengths = defaultdict(int)\ninflated_lengths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n            as_path_string = \",\".join(as_path)\n\n            # Increment the counter of the AS path\n            as_path_counts[as_path_string] += 1\n\n            # Store the original path length and inflation value\n            as_path_length = len(as_path)\n            original_lengths[as_path_string] = (\n                min(original_lengths[as_path_string], as_path_length) if\n                as_path_string in original_lengths else as_path_length\n            )\n            inflated_lengths[as_path_string] = (\n                max(inflated_lengths[as_path_string], as_path_length) if\n                as_path_string in inflated_lengths else as_path_length\n            )\n\n# Output the results of the analysis\nprint(\"List of AS path inflation incidents during the given time window:\\n\")\nfor as_path, count in as_path_counts.items():\n    infl = inflated_lengths[as_path] - original_lengths[as_path]\n    print(f\"{as_path} | Count: {count} | Inflation: {infl}\")",
        "most_similar_instructions": {
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.40384615384615385,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.4,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.38834951456310685,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.3870967741935484,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.3870967741935484,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.37777777777777777,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.37254901960784315,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.37254901960784315,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.3703703703703703,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.3333333333333333
        },
        "avg_similarity_score": 0.14939211710048692
    },
    {
        "instruction": "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).",
        "input": "Time window: February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC \nCollectors: route-views3, route-views4 \nRecord Type: updates (Announcements)",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2021-02-16 00:00:00 UTC\"\nend_time = \"2021-02-17 05:59:59 UTC\"\n\n# Initialize BGPStream \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views3\", \"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Store security events related to the AS path attribute\nsecurity_events = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields[\"as-path\"].split()\n\n            # Check if AS path length is more than one and looping ASNs detected\n            if len(as_path) > 1:\n                dup_asns = set([x for x in as_path if as_path.count(x) > 1])\n                if len(dup_asns) > 0:\n                    # Find the position of the looping ASNs\n                    loop_positions = [i for i,x in enumerate(as_path) if x in dup_asns]\n                    prefix = elem.fields[\"prefix\"]\n                    # Determine if this is an insecure or accidental loop\n                    event = \"insecure\"\n                    if len(loop_positions) == 1:\n                        event = \"accidental\"\n                    security_events[(prefix,event)] += 1\n\n# Output the results of the analysis\nprint(\"Security events related to AS path loops in the given time window:\\n\")\nfor (prefix, event), count in security_events.items():\n    print(f\"Prefix: {prefix} | Event: {event} | Count: {count}\")",
        "most_similar_instructions": {
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.5473684210526316,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.5154639175257733,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.48484848484848486,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.4752475247524752,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.4705882352941176,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.4705882352941176,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.46938775510204084,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.45360824742268036,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.4123711340206186,
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.4081632653061225
        },
        "avg_similarity_score": 0.16615132246386613
    },
    {
        "instruction": "Find the shortest path lengths to destinations in Asia (ASN numbers belonging to Asian region) for prefix 2.0.0.0/22 for the time window from February 20, 2021, 00:00:00 UTC, to February 21, 2021, 23:59:59 UTC. Use data from route-views.wide and route-views.sydney collectors. Collect BGP update records of type 'A' (Announcements) and BGP RIB entries that match the given prefix.",
        "input": "Time window: February 20, 2021, 00:00:00 UTC, to February 21, 2021, 23:59:59 UTC \nCollectors: route-views.wide, route-views.sydney \nRecord type: updates (Announcements) and ribs \nPrefix: 2.0.0.0/22",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2021-02-20 00:00:00 UTC\"\nend_time = \"2021-02-21 23:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors \nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.wide\", \"route-views.sydney\"],\n    filter=\"prefix more 2.0.0.0/22\"\n)\n\n# Store shortest paths and length to destinations\nshortest_paths = defaultdict(list)\nshortest_lengths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" or elem.type == \"RIB\":\n            as_path = elem.fields['as-path'].split()\n            asns = [int(asn) for asn in as_path]\n\n            # Check if the route is to Asia region\n            if any([asn // 100000000 == 4 for asn in asns]):\n                nexthops = elem.fields[\"nexthop\"]\n                if len(nexthops) > 0:\n                    nexthop = nexthops[0]\n                    path_length = len(as_path)\n                    if nexthop not in shortest_paths or path_length < shortest_lengths[nexthop]:\n                        # Update the shortest path length and path\n                        shortest_lengths[nexthop] = path_length\n                        shortest_paths[nexthop] = as_path\n\n# Output the results of the analysis\nprint(\"List of destination ASNs and their associated shortest AS paths:\\n\")\nfor nexthop, shortest_path in shortest_paths.items():\n    print(f\"Nexthop: {nexthop} | Path Length: {shortest_lengths[nexthop]} | Path: {shortest_path}\")",
        "most_similar_instructions": {
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.49645390070921985,
            "Visualize the top 10 ASNs with the most accepted leaked prefixes during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the bar chart to show the number of accepted leaked prefixes for each ASN.": 0.48226950354609927,
            "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).": 0.4745762711864407,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.4552845528455285,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.4132231404958677,
            "Measuring the AS path inflation between AS13273 and AS28715 over a five-hour period (February 14, 2021, 06:00:00 UTC, to February 14, 2021, 11:59:59 UTC) from three collectors: route-views2, route-views3 and route-views4. Collect BGP updates records of type 'A' (announcements).": 0.41025641025641024,
            "Analyze the MOAS (Multiple Origin AS) prefixes propagated by AS7018 over a two-hour window (February 13, 2021, 10:00:00 UTC, to February 13, 2021, 12:59:59 UTC) from two specific collectors: route-views2 and route-views4. Collect and analyze BGP ribs records of type 'A' (announcements).": 0.40336134453781514,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.38620689655172413,
            "Visualize the BGP update timeline for the prefix 64.233.161.0/24 during the time window from May 7, 2005, 00:00:00 to May 7, 2005, 23:59:00. Use data from multiple RouteViews collectors, including route-views2, route-views3, route-views4, ris-ripe, bview, and rib, and collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.380952380952381,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.3697478991596638
        },
        "avg_similarity_score": 0.15192215856491378
    },
    {
        "instruction": "Collect BGP announcement data for IPv4 prefix 198.51.100.0/24 from the RouteViews2 collector. Analyze the data to find out which AS is the origin of the prefix and which AS path is used by the prefix.",
        "input": "Prefix: 198.51.100.0/24\nCollector: route-views2\nRecord Type: updates",
        "output": "import pybgpstream\n\nstart_time = \"1970-01-01 00:00:00\"\nend_time = \"2030-01-01 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\nprefix = \"198.51.100.0/24\"\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  ip_version = elem.fields['ip-version']\n  if ip_version == 4:\n    as_path = elem.fields[\"as-path\"].split()\n    origin_as = as_path[-1]\n    ann_prefix = elem.fields[\"prefix\"]\n    if ann_prefix == prefix:\n print(\"Origin AS: {origin_as}\")\n print(\"AS Path: {' -> '.join(as_path)}\")\n break",
        "most_similar_instructions": {
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.4,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.3939393939393939,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.37837837837837845,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.35294117647058826,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.3389830508474576,
            "Collect BGP records, exported from ASN 63572, and analyze the origin ASN attached to the BGP update records. Create a visualization of the AS path topology and record the connectivity between ASNs.": 0.3380281690140845,
            "Collect BGP announcement data for AS39523 from multiple RouteViews collectors for the time window between December 12, 2017, 04:00:00 and December 12, 2017, 08:00:00. Analyze the data to identify and report announcement spikes, which are defined as the number of announcements exceeding twice the mean count per 5-minute intervals. Print a summary of the announcement spikes including the timestamp and the number of announcements.": 0.33333333333333337,
            "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.": 0.32835820895522383,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3235294117647059,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.31746031746031744
        },
        "avg_similarity_score": 0.18512560565935587
    },
    {
        "instruction": "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.",
        "input": "Project: RouteViews\nTime Window: Current Time till 5 minutes ago\nRecord Type: updates\nNo filter",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Get the current time\nnow = datetime.now()\n\n# Subtract 5 minutes from the current time\nfive_min_ago = now - timedelta(minutes=5)\n\n# Convert the timestamp to string\nstart_time = five_min_ago.strftime('%Y-%m-%d %H:%M:%S')\nend_time = now.strftime('%Y-%m-%d %H:%M:%S')\n\n# Set parameters for PyBGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"routeviews\"],\n    record_type=\"updates\"\n)\n\nannouncements_data = []\n\n# Collect announcements data\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        origin_as = as_path[-1]\n        prefix = elem.fields[\"prefix\"]\n        timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n        announcements_data.append({\"timestamp\": timestamp, \"prefix\": prefix, \"as_path\": ' -> '.join(as_path)})\n\n# Perform analysis\nimport pandas as pd\n\n# Create a dataframe from announcements\ndf = pd.DataFrame(announcements_data)\n\n# Convert the timestamp to datetime object\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\n\n# Set timestamp as index\ndf.set_index('timestamp', inplace=True)\n\n# Resample data over 5 minute intervals\ndf_resampled = df.resample('5T').count()\n\n# Compute the average number of announcements\navg_announcements = df_resampled['prefix'].mean()\n\n# Compute the number of announcements that exceeded the mean count\nannouncement_spikes = df_resampled[df_resampled['prefix'] > avg_announcements]\n\n# Calculate the number of AS hops in an AS path\ndf_as_hops = []\nfor i, row in df.iterrows():\n    df_as_hops.append({\n        \"timestamp\": i,\n        \"prefix\": row['prefix'],\n        \"as_path\": row['as_path'],\n        \"as_hops\": len(row['as_path'].split(\" -> \"))\n    })\n\n# Compute the AS path inflation during the 5 minute interval\ndf_as_pd = pd.DataFrame(df_as_hops)\nas_hops_mean = df_as_pd['as_hops'].mean()\nas_inf_spikes = df_as_pd[df_as_pd['as_hops'] > as_hops_mean]\n\n# Print summary of analysis\nprint(f\"Topology Analysis:\")\nprint(\"Average Number of Announcements: {avg_announcements}\")\nprint(f\"AS Relationship Analysis:\")\nprint(f\"Average Number of AS Hops: {as_hops_mean}\")\nprint(\"Announcement Spikes:\")\nfor i, row in announcement_spikes.iterrows():\n    print(f\"Time: {i}, Number of Announcements: {row['prefix']}\")\nprint(\"AS Path Inflation Spikes:\")\nfor i, row in as_inf_spikes.iterrows():\n    print(f\"Time: {i}, AS Path: {row['as_path']}, AS Hops: {row['as_hops']}\")",
        "most_similar_instructions": {
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4528301886792453,
            "Access live stream data sources and analyze the communities for AS1234.": 0.45000000000000007,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.4444444444444445,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4285714285714286,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.4255319148936171,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.4074074074074074,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.3829787234042554,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.380952380952381,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.37209302325581395,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.3703703703703704
        },
        "avg_similarity_score": 0.2020995797130134
    },
    {
        "instruction": "Access live stream data sources from PyBGPStream and study the communities associated with the announcement. Perform the analysis during every 15 minutes interval and visualize the results.",
        "input": "Project: RouteViews\nTime Window: Current Time till 30 minutes ago\nRecord Type: updates\nFilter: Community 65501:1",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Get the current time\nnow = datetime.now()\n\n# Subtract 30 minutes from the current time\nthirty_min_ago = now - timedelta(minutes=30)\n\n# Convert the timestamps to strings\nstart_time = thirty_min_ago.strftime('%Y-%m-%d %H:%M:%S')\nend_time = now.strftime('%Y-%m-%d %H:%M:%S')\n\n# Set parameters for PyBGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    projects=[\"routeviews\"],\n    filters=[\"community 65501:1\"],\n    record_type=\"updates\"\n)\n\nannouncements_data = []\n\n# Collect announcements data\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        origin_as = as_path[-1]\n        ann_community = elem.fields[\"community\"]\n        prefix = elem.fields[\"prefix\"]\n        timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n        announcements_data.append({\"timestamp\": timestamp, \"prefix\": prefix, \"community\": ann_community, \"as_path\": ' -> '.join(as_path)})\n\n# Perform analysis\nimport pandas as pd\n\n# Create a dataframe from announcements\ndf = pd.DataFrame(announcements_data)\n\n# Convert the timestamp to datetime object\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\n\n# Set timestamp as index\ndf.set_index('timestamp', inplace=True)\n\n# Resample data over 15 minute intervals\ndf_resampled = df.resample('15T').count()\n\n# Compute a set of unique communities\nunique_communities = set(df['community'])\n\n# Compute the count of each of the unique communities\ncommunity_counts = {}\nfor community in unique_communities:\n    community_counts[community] = len(df[df['community'] == community])\n\n# Print the summary of the study\nprint(\"Summary of Community Study:\")\nfor community, count in community_counts.items():\n    print(f\"Community: {community}, Count: {count}\")\n\n# Visualize the results\nplt.bar(range(len(unique_communities)), list(community_counts.values())) \nplt.xticks(range(len(unique_communities)), list(community_counts.keys()))\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.4642857142857143,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.45454545454545453,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.45,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.44000000000000006,
            "Access live stream data sources and analyze the communities for AS1234.": 0.42105263157894735,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.40816326530612246,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.3846153846153846,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3829787234042553,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.38095238095238093,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.37209302325581395
        },
        "avg_similarity_score": 0.19055778211391988
    },
    {
        "instruction": "Find the origin AS (ASN) for the prefix 1.0.0.0/16 using RIB entries collected from the Routeviews.sydney project.",
        "input": "Collectors: route-views.sydney\nRecord Type: ribs\nPrefix: 1.0.0.0/16",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-01-01 00:00:00 UTC\",\n    until_time=\"2020-01-02 00:00:00 UTC\",\n    collectors=[\"route-views.sydney\"],\n    record_type=\"ribs\"\n)\n\n# Find and print the origin ASN for the given prefix\nfor rec in stream.records():\n    if rec.prefix == \"1.0.0.0/16\":\n        as_path = rec.fields[\"as-path\"].split()\n        origin_asn = as_path[-1]\n\n        print(f'Origin ASN for prefix 1.0.0.0/16 is {origin_asn}')",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.4210526315789474,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.35714285714285715,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.3428571428571428,
            "Print the AS Names associated with the BGP communities that announce the prefix 1.2.0.0/16 during the last 15 minutes. Filer primitive 'peer' is used for fetching the data.": 0.3333333333333333,
            "Analyze the communities associated with the BGP announcements collected from the AS-KF project.": 0.33333333333333326,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.32,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.30769230769230765,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3050847457627119,
            "Use BGP route collector data to analyze how the AS relationship between ASN 64513 and ASN 8674 has changed over the last 14 days. Compare AS paths of 1.198.0.0/16 propagated by both the ASNs.": 0.3,
            "Using MOAS, identify and display BGP announcements announcing the prefix 1.2.0.0/16 in the rrc00, linx and route-views.oregon-ix collectors.": 0.29787234042553196
        },
        "avg_similarity_score": 0.1545577829382488
    },
    {
        "instruction": "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.",
        "input": "Prefix: 1.2.3.0/24",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-01-01 00:00:00 UTC\",\n    until_time=\"2020-01-02 00:00:00 UTC\",\n    record_type=\"ribs\"\n)\n\n# Analyze the community and policy for the prefix\norigin_asn = None\nfor rec in stream.records():\n    if  rec.prefix == \"1.2.3.0/24\":\n        as_path = rec.fields[\"as-path\"].split()\n        origin_asn = as_path[-1]\n\n# Print the origin ASN\nif origin_asn:\n    print(f'Origin ASN for prefix 1.2.3.0/24 is {origin_asn}.')",
        "most_similar_instructions": {
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.36842105263157887,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.35,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3243243243243243,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.32,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.30769230769230765,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.30769230769230765,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.3043478260869565,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.30303030303030304,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.28571428571428575,
            "Collect updates from RIS RRC00 and RRC01 between June 8th, 2018, 3:00am and June 8th, 2018, 3:10am. Use MOAS prefixes to analyze the AS path inflation of the prefix entries.": 0.2857142857142857
        },
        "avg_similarity_score": 0.18451609920392795
    },
    {
        "instruction": "Topologically analyze the routing for the prefix 2.3.4.0/24 by determining the most preferred entry i.e. the shortest AS path length.",
        "input": "Prefix: 2.3.4.0/24",
        "output": "import pybgpstream\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-01-01 00:00:00 UTC\",\n    until_time=\"2020-01-02 00:00:00 UTC\",\n    record_type=\"ribs\",\n    filter=\"prefix more 2.3.4.0/24\"\n)\n\n# Select the most preferred entry\nshortest_as_path_length = float('inf')\nmost_preferred_entry = None\nfor rec in stream.records():\n    if rec.prefix == \"2.3.4.0/24\":\n        as_path = rec.fields[\"as-path\"].split()\n        path_length = len(as_path)\n        if path_length < shortest_as_path_length:\n            most_preferred_entry = rec\n            shortest_as_path_length = path_length\n\n# Print the most preferred entry\nif most_preferred_entry:\n    print(f'Most preferred entry for the prefix 2.3.4.0/24: \\n{most_preferred_entry}')",
        "most_similar_instructions": {
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.391304347826087,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.33898305084745767,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.3272727272727273,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.29787234042553196,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.2926829268292683,
            "Collect routing announcements for ASN 6550 and study the paths and the end ASN that is being visited in the AS path inflation.": 0.2916666666666667,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.2909090909090909,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.2857142857142857,
            "Secure the border gateway protocol announcements related to the address range 73.7.0.0/24 by performing security analysis on the AS relationships.": 0.2857142857142857,
            "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.": 0.28571428571428564
        },
        "avg_similarity_score": 0.14899119779933254
    },
    {
        "instruction": "Perform a security analysis to detect the BGP prefix hijacking incidents on January 01, 2020, by identifying non-origin AS entries.",
        "input": "Time window: January 01, 2020, 00:00:00 UTC, to January 01, 2020, 23:59:59 UTC",
        "output": "import pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2020-01-01 00:00:00 UTC\"\nend_time = \"2020-01-01 23:59:59 UTC\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"ribs\"\n)\n\n# Detect possible BGP prefix hijacking incidents\nbgp_hijacking_incidents = set()\nfor rec in stream.records():\n    as_path = rec.fields[\"as-path\"].split()\n    origin_asn = as_path[-1]\n\n    for asn in as_path[0:-1]:\n        if asn != origin_asn:\n            bgp_hijacking_incidents.add(rec.prefix + ' ' + asn)\n\n# Print the BGP prefix hijacking incidents\nif bgp_hijacking_incidents:\n    print('Possible BGP prefix hijacking incidents:')\n    for incident in bgp_hijacking_incidents:\n        print(' - ' + incident)",
        "most_similar_instructions": {
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.30434782608695654,
            "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.": 0.2631578947368421,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.25,
            "Perform topological analysis using the route view's collected BGP data and identify AS paths containing more than 4 hops.": 0.24390243902439024,
            "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).": 0.2318840579710145,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.20408163265306123,
            "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.": 0.19999999999999998,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.19999999999999998,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.19999999999999998,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.1951219512195122
        },
        "avg_similarity_score": 0.1090667428712523
    },
    {
        "instruction": "Collect BGP announcements from multiple remote peers and retrieve information associated with the source of the announcements. Use data from RIS and RouteViews collectors to analyze the MOAS (Multiple Origin AS) prefixes representing the origin of an announcement.",
        "input": "Collectors:  RIS, RouteViews\nRecord Type: updates\nMOAS Prefix: <noinput>",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use multiple RIS and RouteViews collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"RIS\", \"RouteViews\"],\n    record_type=\"updates\"\n)\n\nmoas_origins = {}\n\n# Collect BGP announcements and retrieve MOAS prefixes\nfor elem in stream:\n    if elem.type != \"A\":\n        continue\n\n    # Get the prefix of interest\n    prefix_of_interest = elem.fields[\"prefix\"]\n\n    # Store the origin AS for this announcement\n    origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n    if prefix_of_interest not in moas_origins:\n        moas_origins[prefix_of_interest] = [origin_as]\n    else:\n        moas_origins[prefix_of_interest].append(origin_as)\n\nprint(moas_origins)",
        "most_similar_instructions": {
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.36923076923076925,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.33333333333333337,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.3283582089552239,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.32786885245901637,
            "Collect all RIB entries for the astral-sorcery project in the past 10 hours, and analyze all MOAS (Multiple Origin AS) prefixes for security anomalies.": 0.3174603174603174,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3174603174603174,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3103448275862069,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.3098591549295775,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.30769230769230765,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.30303030303030304
        },
        "avg_similarity_score": 0.19552328301433114
    },
    {
        "instruction": "Measure the presence of AS path inflation in recent BGP updates by collecting and analyzing the BGP Path Attributes field of each update.",
        "input": "Collectors: RIS, RouteViews\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use multiple RIS and RouteViews collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"RIS\", \"RouteViews\"],\n    record_type=\"updates\"\n)\n\nas_paths = []\n\n# Collect BGP updates and analyze the BGP Path Attributes\nfor elem in stream:\n    if elem.type != \"A\":\n        continue\n\n    # Get path attributes information associated with this BGP update\n    # https://www.ietf.org/rfc/rfc4271.txt\n    path_attributes = elem.fields[\"as-path\"]\n    as_paths.append(path_attributes)\n\n# Analyze the presence of AS path inflation in recent BGP updates\ninflated_paths = [path for path in as_paths if len(path) > 1]\ninflation_percentage = len(inflated_paths) / len(as_paths) * 100 # percentage\n\nprint(f\"AS path inflation: {inflation_percentage:.2f} %\")",
        "most_similar_instructions": {
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.358974358974359,
            "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.": 0.34146341463414637,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.3404255319148936,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.33333333333333337,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.32653061224489793,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.3243243243243243,
            "Measure AS path inflation from the RouteViews collector.": 0.3225806451612903,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3137254901960784,
            "Identify the MOASes that announce AS 2497 and determine the path inflation.": 0.2857142857142857,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.27906976744186046
        },
        "avg_similarity_score": 0.16253480525669642
    },
    {
        "instruction": "Access live stream data from RouteViews and analyze AS relationships by gaining insight into the per-prefix relationship information provided by each collector.",
        "input": "Collectors: RouteViews\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"RouteViews\"],\n    record_type=\"updates\"\n)\n\nas_relationships = {}\n\n# Collect BGP announcements and store the per-prefix relationship information\nfor elem in stream:\n    # Skip non-announcement records\n    if elem.type != \"A\":\n        continue\n\n    # Get the origin AS that created this announcement\n    origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n\n    # Get the prefix of the announcement\n    prefix_of_interest = elem.fields[\"prefix\"]\n\n    # Store the origin AS for this prefix\n    if prefix_of_interest not in as_relationships:\n        as_relationships[prefix_of_interest] = [origin_as]\n    else:\n        as_relationships[prefix_of_interest].append(origin_as)\n\nprint(as_relationships)",
        "most_similar_instructions": {
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.425531914893617,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.42424242424242425,
            "Access live stream data sources and analyze the communities for AS1234.": 0.411764705882353,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.391304347826087,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3902439024390244,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3888888888888889,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.358974358974359,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.34615384615384615,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.33333333333333337,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17091636116528372
    },
    {
        "instruction": "Retrieve BGP updates from route-views.linx and shaoxing to study the AS communities as well as the preferences of certain ASes.",
        "input": "Collectors: route-views.linx, shaoxing\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use multiple RouteViews and Shaoxing collectors\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views.linx\", \"shaoxing\"],\n    record_type=\"updates\"\n)\n\nas_communities = {}\nas_preferences = {}\n\n# Collect BGP updates and analyze AS Communities and AS Preferences\nfor elem in stream:\n    # Skip non-announcement records\n    if elem.type != \"A\":\n        continue\n\n    # Get the origin AS that created this announcement\n    origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n\n    # Get the prefix of the announcement\n    prefix_of_interest = elem.fields[\"prefix\"]\n\n    # Store the origin AS for this prefix\n    if prefix_of_interest not in as_communities:\n        as_communities[prefix_of_interest] = [origin_as]\n    else:\n        as_communities[prefix_of_interest].append(origin_as)\n\n    # Store the AS preference\n    as_preferences[origin_as] = elem.fields[\"preference\"]\n\nprint(as_communities)\nprint(as_preferences)",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.34782608695652173,
            "Study the AS communities associated with the RouteViews collector.": 0.3225806451612903,
            "Collect updates from RouteViews BNA and TPA collectors between June 8th, 2020, 4:00am to June 8th, 2020, 4:10am. Study the AS paths and determine the AS relationships.": 0.3137254901960784,
            "Study the communities of various BGP announcements from Route Views collector and generate histograms of resulting information.": 0.30769230769230765,
            "Study the communities of ASN 65002 for the month of April 2018.": 0.29411764705882354,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.2909090909090909,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.2807017543859649,
            "Using PyBGPStream stream data sources, analyze various communities announced by ASN 9498. Calculate the size of the communities as well as the number of prefixes announced by each community.": 0.27450980392156865,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.27450980392156865,
            "Analyze the topology of the Internet by identifying the BGP AS paths, routes, and route originators, and use the MOAS (Multiple Origin AS) prefixes as the input with PyBGPStream.": 0.27450980392156865
        },
        "avg_similarity_score": 0.17164787142587196
    },
    {
        "instruction": "Analyze time-series data and extract information such as the amount of prefixes and origin ASs that are announced over time from the RouteViews collector.",
        "input": "Collectors: RouteViews\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use RouteViews collector\nstream = pybgpstream.BGPStream(\n    collectors=[\"RouteViews\"],\n    record_type=\"updates\"\n)\n\nprefix_count = 0\nas_count = 0\n\n# Collect BGP updates and analyze the time-series data\nfor elem in stream:\n    # Skip non-announcement records\n    if elem.type != \"A\":\n        continue\n\n    # Get the origin AS that created this announcement\n    origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n\n    # Increment the amount of prefixes and ASes\n    prefix_count += 1\n    as_count += 1\n\nprint(f\"Number of prefixes announced: {prefix_count}\")\nprint(f\"Number of ASes announced: {as_count}\")",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.30303030303030304,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.28571428571428575,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.28,
            "Analyze the network configuration and reliability over the past two weeks.": 0.2777777777777778,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.2758620689655172,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.2727272727272727,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.2666666666666666,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.2608695652173913,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.25925925925925924,
            "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.": 0.25641025641025644
        },
        "avg_similarity_score": 0.16991746010658867
    },
    {
        "instruction": "Retrieve BGP update records in order to detect anomalies that occur in the data, such as large fluctuations in the path length over time.",
        "input": "Collectors: RouteViews\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Initialize the BGPStream to use RouteViews collector\nstream = pybgpstream.BGPStream(\n    collectors=[\"RouteViews\"],\n    record_type=\"updates\"\n)\n\n#Arrays to store AS path lengths and timestamps \nas_path_lengths = []\ntimestamps = []\n\n# Collect BGP updates and analyze the path lengths over time\nfor elem in stream:\n    # Skip non-announcement records\n    if elem.type != \"A\":\n        continue\n\n    # Get the path length\n    path_length = len(elem.fields[\"as-path\"].split(\" \"))\n\n    # Get the timestamp\n    timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n\n    # Append the data to arrays\n    as_path_lengths.append(path_length)\n    timestamps.append(timestamp)\n\n# Plot the path lengths over time\nplt.figure(figsize=(15,5))\nplt.plot(timestamps, as_path_lengths)\n\nplt.xlabel('Timestamp')\nplt.ylabel('Path Length')\nplt.title('AS Path Lengths over Time')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.grid(axis='x')\n\nplt.show()",
        "most_similar_instructions": {
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.33333333333333326,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.32,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.2978723404255319,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.27906976744186046,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.2631578947368421,
            "Retrieve BGP updates from route-views.linx and shaoxing to study the AS communities as well as the preferences of certain ASes.": 0.2608695652173913,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.2553191489361702,
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.25396825396825395,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.25,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.25
        },
        "avg_similarity_score": 0.14505371514547497
    },
    {
        "instruction": "Analyze the relationship between AS paths between two routes for the 10.0.0.0/8 prefix in the Routeviews collectors using path length or preference analysis",
        "input": "Time window: May 21, 2019, 12:00:00 to May 21, 2019, 16:00:00\n        Collector: route-views\n        Prefix: 10.0.0.0/8",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\nstart_time = \"2019-05-21 12:00:00\"\nend_time = \"2019-05-21 16:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"],\n    filter=\"prefix 10.0.0.0/8\"\n)\n\n# Store route information\nroute_info = defaultdict(list)\n\n# Analyze relationship between AS paths\nfor rec in stream.records():\n    for elem in rec:\n        path_len = elem.fields[\"as-path\"].count(\"AS\")\n        path_pref = elem.fields[\"pref\"]\n        route_info[elem.fields[\"prefix\"]].append((path_len, path_pref))\n\nprint(route_info)",
        "most_similar_instructions": {
            "Find the origin AS (ASN) for the prefix 1.0.0.0/16 using RIB entries collected from the Routeviews.sydney project.": 0.36734693877551017,
            "Topologically analyze the routing for the prefix 2.3.4.0/24 by determining the most preferred entry i.e. the shortest AS path length.": 0.30769230769230765,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2916666666666667,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.2857142857142857,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.28070175438596495,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.27999999999999997,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.27906976744186046,
            "Use BGP route collector data to analyze how the AS relationship between ASN 64513 and ASN 8674 has changed over the last 14 days. Compare AS paths of 1.198.0.0/16 propagated by both the ASNs.": 0.2769230769230769,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.2564102564102564,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2545454545454545
        },
        "avg_similarity_score": 0.1532337373451258
    },
    {
        "instruction": "Retrieve the full list of active Measuring AS (MOAS) prefixes from the Routeviews collector.",
        "input": "",
        "output": "import pybgpstream\n\nstream = pybgpstream.BGPStream(\n    project=\"routeviews\",\n    collector=\"rrc00\",\n    record_type=\"ribs\"\n)\n\nmoas_prefixes = set()\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"M\" and elem.fields[\"asn\"] >= 200000:\n           moas_prefixes.add(elem.fields[\"prefix\"])\n\nprint(\"The MOAS prefixes from the Routeviews collector are: \", moas_prefixes)",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.45454545454545453,
            "Study the AS communities associated with the RouteViews collector.": 0.43478260869565216,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.41666666666666663,
            "Analyze time-series data and extract information such as the amount of prefixes and origin ASs that are announced over time from the RouteViews collector.": 0.358974358974359,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.35714285714285715,
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.3414634146341463,
            "Analyse security threats received by AS28376 from the RouteViews collector.": 0.3333333333333333,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.3225806451612903,
            "Identify how many MOAS Prefixes were announced on February 24,7 2008 from the Route Views collector.": 0.3225806451612903,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.2941176470588235
        },
        "avg_similarity_score": 0.15880501693449883
    },
    {
        "instruction": "Measure AS path inflation over a time window of one hour starting at April 2, 2015, 13:00:00 GMT for all routes of length greater than one from ASN 100.",
        "input": "Time window: April 2, 2015, 13:00:00 to April 2, 2015, 14:00:00\n        Collector: route-views\n        ASN: 100",
        "output": "import pybgpstream\n\nstart_time = \"2015-04-02 13:00:00\"\nend_time = \"2015-04-02 14:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time, \n    collectors=[\"route-views\"],\n    filter=\"peer 100\"\n)\n\npath_inflation_info = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n        # Calculate inflation rate over time window\n        if elem.type == 'A' and elem.fields[\"as-path\"].count(\"AS\") > 1:\n            inflation_rate = elem.fields[\"pref\"] - elem.fields[\"prev-pref\"]\n            path_inflation_info[elem.fields[\"as-path\"][0]].append(inflation_rate)\n\nprint(\"AS Path inflation rate over one hour time window from ASN 100 is: {}\".format(\n    path_inflation_info))",
        "most_similar_instructions": {
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.2727272727272727,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2711864406779661,
            "Measure AS path inflation and Generate a summary of the average AS path length associated with the prefix 45.249.11.0/24 from the foundries.io collector.": 0.2711864406779661,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.2647058823529412,
            "Measure AS path inflation from the RouteViews collector.": 0.2564102564102564,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.2535211267605634,
            "Monitor AS path inflation from ASN 13335 (Cloudflare) to collect a time-series of the path lengths.": 0.25,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.25,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.2456140350877193,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.2388059701492537
        },
        "avg_similarity_score": 0.11309620961916536
    },
    {
        "instruction": "Access the live stream data from the RIPE RIS collector to study the communities associated with the 88.221.0.0/16 prefix in the time window between April 1, 2017, 08:00:00 and April 1, 2017, 10:00:00.",
        "input": "Time window: April 1, 2017, 08:00:00 to April 1, 2017, 10:00:00\n        Collector: ripe\n        Prefix: 88.221.0.0/16",
        "output": "import pybgpstream\n\nstart_time = \"2017-04-01 08:00:00\"\nend_time = \"2017-04-01 10:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ripe\"],\n    filter=\"prefix 88.221.0.0/16\"\n)\n\n# Store community information\ncommunity_info = defaultdict(list)\n\n# Collect community data\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            try:\n                communities = elem.fields[\"communities\"][1:-1].split(\" \")\n                as_path = elem.fields[\"as-path\"].split(\" \")\n                for comm in communities:\n                    community_info[comm].append(as_path[-1])\n            except KeyError:\n                pass\n\n# Print collected communities\nprint(\"The communities associated with the 88.221.0.0/16 prefix in the given time window are:\")\nfor comm, asns in community_info.items():\n    print(\"Community: {}, ASNs: {}\".format(comm, \", \".join(asns)))",
        "most_similar_instructions": {
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.4736842105263158,
            "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.": 0.3888888888888889,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.38805970149253727,
            "Access live stream data sources from PyBGPStream and study the communities associated with the announcement. Perform the analysis during every 15 minutes interval and visualize the results.": 0.3823529411764706,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3768115942028986,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.37142857142857144,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.35714285714285715,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.34920634920634924,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3466666666666666,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3384615384615385
        },
        "avg_similarity_score": 0.18912363605623397
    },
    {
        "instruction": "Analyze the topology of the BGP network using data from all RouteViews collectors over a two-day time window starting on August 14, 2017, 00:00:00.",
        "input": "Time window: August 14, 2017, 00:00:00 to August 16, 2017, 00:00:00\n        Collector: route-views",
        "output": "import pybgpstream\n\nstart_time = \"2017-08-14 00:00:00\"\nend_time = \"2017-08-16 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"]\n)\n\n# Store information about the topology\ntopology_info = defaultdict(list)\n\n# Analyze BGP network topology\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            peer_as = elem.fields[\"as-path\"].split(\" \")[0]\n            as_path = elem.fields[\"as-path\"].split(\" \")[1:]\n            topology_info[peer_as].append(as_path)\n\nprint(\"The topology of the BGP network:\")\nfor peer, paths in topology_info.items():\n    print(\"Peer: {}, Paths: {}\".format(peer, \", \".join([\" \".join(path) for path in paths])))",
        "most_similar_instructions": {
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.36,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.32727272727272727,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.30434782608695654,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.29508196721311475,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.29268292682926833,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.2909090909090909,
            "Analyze AS relationships using PyBGPStream. Use data from the RouteViews collector and find announcements from AS 3549 in the time window from April 15, 2010, 06:30:00 to April 15, 2010, 06:45:00.": 0.2903225806451613,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.28571428571428575,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.2857142857142857,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.28125
        },
        "avg_similarity_score": 0.17088867083305706
    },
    {
        "instruction": "Analyze the security incidents that have taken place in the BGP network based on data from the RIS collector over a four-day time window starting on June 12, 2015, 00:00:00.",
        "input": "Time window: June 12, 2015, 00:00:00 to June 16, 2015, 00:00:00\n        Collector: ris",
        "output": "import pybgpstream\n\nstart_time = \"2015-06-12 00:00:00\"\nend_time = \"2015-06-16 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris\"]\n)\n\n# Store security incident information\nsecurity_incidents = list()\n\ndef identify_security_incident(as_path1, as_path2):\n    if as_path1[0] != as_path2[0]:\n        # If the first ASes don't match, this is an incident\n        return True\n    for asn1, asn2 in zip(as_path1, as_path2):\n        # If the ASes don't match, this is an incident\n        if asn1 != asn2:\n            return True\n    return False\n\n# Analyze BGP network security incidents\nfor rec in stream.records():\n    for elem in rec:\n        # Compare all announcements of the same prefix\n        prefix = elem.fields[\"prefix\"]\n        peers = [peer for elem in rec if elem.fields[\"prefix\"] == prefix]\n        if len(peers) > 1:\n            for peer1 in peers:\n                as_path1 = peer1.fields[\"as-path\"].split(\" \")\n                for peer2 in peers:\n                    as_path2 = peer2.fields[\"as-path\"].split(\" \")\n                    if peer1 != peer2 and identify_security_incident(as_path1, as_path2):\n                        security_incidents.append((peer1.fields[\"as-path\"][0], as_path1, peer2.fields[\"as-path\"][0], as_path2))\n\n# Print reported incident\nif security_incidents:\n    print(\"Security incidents that have taken place in the BGP network:\")\n    for p1, a1, p2, a2 in security_incidents:\n        print(\"Origin AS: {}, path: {}, competing AS: {}, path: {}\".format(p1, \" \".join(a1), p2, \" \".join(a2)))\nelse:\n    print(\"No security incidents detected in the given time window.\")",
        "most_similar_instructions": {
            "Analyze the topology of the BGP network using data from all RouteViews collectors over a two-day time window starting on August 14, 2017, 00:00:00.": 0.5666666666666667,
            "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.": 0.37500000000000006,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3283582089552239,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.32258064516129037,
            "Analyze the topology of the network for the Route Views collector on a specific day and generate a detailed report on the results.": 0.32142857142857145,
            "Access the live stream data from the RIPE RIS collector to study the communities associated with the 88.221.0.0/16 prefix in the time window between April 1, 2017, 08:00:00 and April 1, 2017, 10:00:00.": 0.2972972972972973,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.2857142857142857,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.2807017543859649,
            "Analyze AS relationships using PyBGPStream. Use data from the RouteViews collector and find announcements from AS 3549 in the time window from April 15, 2010, 06:30:00 to April 15, 2010, 06:45:00.": 0.2647058823529411,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.2631578947368421
        },
        "avg_similarity_score": 0.16038946049142155
    },
    {
        "instruction": "Analyze the historical trends in BGP updates from the RouteViews collector over a one-week time window starting on October 8, 2016, 00:00:00.",
        "input": "Time window: October 8, 2016, 00:00:00 to October 14, 2016, 00:00:00\n        Collector: route-views",
        "output": "import pybgpstream\n\nstart_time = \"2016-10-08 00:00:00\"\nend_time = \"2016-10-14 00:00:00\"\n\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"],\n    record_type=\"updates\"\n)\n\n# Store historical trend information\nhistory_info = defaultdict(list)\n\n# Analyze BGP update historical data\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n            prefix = elem.fields[\"prefix\"]\n            if prefix not in history_info or origin_as not in history_info[prefix]:\n                history_info[prefix].append(origin_as)\n\nprint(\"Historical trends of BGP updates from the RouteViews collector:\")\nfor prefix, origin_ases in history_info.items():\n    print(\"Prefix: {}, Origin ASes: {}\".format(prefix, \", \".join(origin_ases)))",
        "most_similar_instructions": {
            "Analyze the security incidents that have taken place in the BGP network based on data from the RIS collector over a four-day time window starting on June 12, 2015, 00:00:00.": 0.5517241379310344,
            "Analyze the topology of the BGP network using data from all RouteViews collectors over a two-day time window starting on August 14, 2017, 00:00:00.": 0.5384615384615384,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3859649122807018,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.3728813559322034,
            "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.": 0.3571428571428571,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.3225806451612903,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.30188679245283023,
            "Analyze AS relationships using PyBGPStream. Use data from the RouteViews collector and find announcements from AS 3549 in the time window from April 15, 2010, 06:30:00 to April 15, 2010, 06:45:00.": 0.3,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.29629629629629634,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.29508196721311475
        },
        "avg_similarity_score": 0.16709881237317364
    },
    {
        "instruction": "Gather BGP update data for August 15, 2018 to August 16, 2018 from rrc00 collector. Identify prefixes originated by AS65001, and explored the latest BGP paths for a sample of 5 prefixes.",
        "input": "Time window: August 15, 2018 00:00:00 to August 16, 2018 00:00:00\nCollector: rrc00",
        "output": "import pybgpstream\n\n# Define the time window \nstart_time = \"2018-08-15 00:00:00\"\nend_time = \"2018-08-16 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc00\"],\n    record_type=\"updates\",\n    filter=\"peer 65001\"\n)\n\n# Dictionary to store the routes\nroutes = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    for elem in rec:\n        prefix = elem.fields[\"prefix\"]\n        if elem.type == \"U\":  # BGP withdrawals\n            if prefix in routes:  # Remove withdrawn routes\n                del routes[prefix]\n        elif elem.type == \"A\":  # BGP announcements\n            # Construct and store the detected route\n            path = [str(asn) for asn in elem.fields[\"as-path\"].split()]\n            route = \" -> \".join(path)\n            routes[prefix] = route\n\n# Print the latest BGP paths for 5 prefixes \nprint(\"Latest BGP Paths:\")\nfor prefix in list(routes.keys())[:5]:\n    print(f\"  {prefix}: {routes[prefix]}\")",
        "most_similar_instructions": {
            "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.": 0.4225352112676056,
            "Collect BGP update data for April 25, 2018, to April 26, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS10297 (eNet) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.37837837837837834,
            "Collect BGP update data for July 29, 2018, to July 31, 2018, from multiple RouteViews collectors. Identify BGP announcements made by AS58224 (Iran Telecommunication Company) and the hijacked prefixes. Create a time series plot showing the number of announcements every hour during that period.": 0.3684210526315789,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.3333333333333333,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3076923076923077,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify and display BGP announcements where the suspicious prefix 216.58.192.0/19 is announced by ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a time series plot showing the number of suspicious announcements over time.": 0.2988505747126437,
            "Collect BGP update data for November 12, 2018, to November 13, 2018, from multiple RouteViews collectors. Identify BGP announcements for the suspicious prefix 216.58.192.0/19 that involve ASNs 20485 (TransTelecom), 4809 (China Telecom), or 37282 (MainOne). Create a bar chart showing the number of occurrences of each ASN in the suspicious AS paths.": 0.2954545454545454,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.2711864406779661,
            "Collect BGP RIB update data for the month of October 2018 from all available RouteViews collectors and measure AS path inflation for BGP prefixes 1.2.3.0/24 and 4.5.6.7/32.": 0.26865671641791045,
            "Collect BGP update data for April 26, 2017, from multiple RouteViews collectors. Calculate and visualize the trends in BGP announcements by AS12389 per minute. Identify the prefixes originated by AS12389. Detect anomalies by setting a threshold and reporting any minute with an announcement count exceeding the threshold as an anomaly.": 0.2682926829268293
        },
        "avg_similarity_score": 0.15590040130568186
    },
    {
        "instruction": "Access the live stream data source from the route-views4 collector. Collect BGP update data for July 20, 2018. Identify BGP hijacking activity of AS25152 (eNet).",
        "input": "Time window: July 20, 2018 00:00:00\nCollector: route-views4",
        "output": "import pybgpstream\n\n# Define the time window \nstart_time = \"2018-07-20 00:00:00\"\nend_time = \"2018-07-20 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views4\"],\n    record_type=\"updates\",\n    filter=\"peer 25152\"\n)\n\n# Dictionary to detect hijacked prefixes\nhijacked_prefixes = {}\n\n# Process the BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # BGP announcements \n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]\n            prefix = elem.fields[\"prefix\"]\n\n            # Check if the origin AS is the suspect AS (AS25152 - eNet)\n            if origin_as == \"25152\":\n                if prefix not in hijacked_prefixes:\n                    hijacked_prefixes[prefix] = []\n                hijacked_prefixes[prefix].append(as_path)\n\n# Print the hijacked prefixes and their AS paths\nprint(\"Hijacked Prefixes and Their Associated AS Paths:\")\nfor prefix, paths in hijacked_prefixes.items():\n    print(f\"  {prefix}:\")\n    for path in paths:\n        print(f\"    {' -> '.join(path)}\")",
        "most_similar_instructions": {
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.39215686274509803,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.33333333333333337,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32653061224489793,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3243243243243243,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.32,
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.3181818181818182,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3181818181818182,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.30769230769230776,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3050847457627119,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3043478260869565
        },
        "avg_similarity_score": 0.16649369797353913
    },
    {
        "instruction": "Measure AS path inflation from August 10, 2018 to August 11, 2018. Collect BGP update data from the rrc06 collector. Analyze AS paths and identify the most inflated AS in the network and the associated prefixes.",
        "input": "Time window: August 10, 2018 00:00:00 to August 11, 2018 00:00:00\nCollector: rrc06",
        "output": "import pybgpstream\n\n# Define the time window \nstart_time = \"2018-08-10 00:00:00\"\nend_time = \"2018-08-11 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc06\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to keep track of the AS path lengths\nas_path_lengths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # BGP announcements\n            as_path = elem.fields[\"as-path\"].split()\n            prefix = elem.fields[\"prefix\"]\n\n            # Update AS path length count\n            length = len(as_path)\n            if length in as_path_lengths:\n                as_path_lengths[length] += 1\n            else:\n                as_path_lengths[length] = 1\n\n# Identify the most inflated AS\nmax_length = max(as_path_lengths.keys())\ninflated_as_count = as_path_lengths[max_length]\n\n# Dictionary to store the inflated AS paths\ninflated_as_paths = {}\n\n# Filter the BGP records for the inflated AS paths\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc06\"],\n    record_type=\"updates\",\n    filter=\"pathlen {}\".format(max_length)\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # BGP announcements\n            as_path = elem.fields[\"as-path\"].split()\n            prefix = elem.fields[\"prefix\"]\n            path = \" -> \".join(as_path)\n            inflated_as_paths[prefix] = path\n\n# Print the counts of inflated AS paths\nprint(\"Total Count of Inflated AS Paths:\")\nprint(f\"  Length of AS Path: {max_length}\")\nprint(f\"  Number of Occurrences: {inflated_as_count}\")\n\n# Print the sample of 5 inflated AS paths\nprint(\"Sample of Inflated AS Paths:\")\nfor prefix, path in list(inflated_as_paths.items())[:5]:\n    print(f\"  {prefix}: {path}\")",
        "most_similar_instructions": {
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.36923076923076925,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3666666666666667,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.35294117647058826,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.34375000000000006,
            "Collect BGP update data for January 5, 2017, from multiple RouteViews collectors. Calculate and visualize the hourly trends in BGP announcements. Identify the top 10 most common AS paths in the data. Detect anomalies by setting a threshold and reporting any hourly count exceeding the threshold as an anomaly.": 0.3294117647058823,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.32876712328767127,
            "Gather BGP update data for August 15, 2018 to August 16, 2018 from rrc00 collector. Identify prefixes originated by AS65001, and explored the latest BGP paths for a sample of 5 prefixes.": 0.3235294117647059,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.32,
            "Collect BGP announcement data for IPv4 prefix 198.51.100.0/24 from the RouteViews2 collector. Analyze the data to find out which AS is the origin of the prefix and which AS path is used by the prefix.": 0.32,
            "Measure AS path inflation from the RouteViews collector.": 0.3181818181818182
        },
        "avg_similarity_score": 0.19832543016099752
    },
    {
        "instruction": "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.",
        "input": "Time window: June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC\nCollectors: route-views.sg\nRecord Type: ribs\nASN: 1221",
        "output": "import pybgpstream\nimport networkx as nx\nfrom datetime import datetime\n\n# Define the time window for the analysis\nstart_time = \"2021-06-01 00:00:00 UTC\"\nend_time = \"2021-06-07 23:59:59 UTC\"\n\n# Initialize BGPStream for the route-views.sg collector\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.sg\"],\n    record_type=\"ribs\"\n)\n\n# Create a Graph based on BGP data\nG = nx.MultiGraph(name=\"AS1221\")\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        prefix = elem.fields[\"prefix\"]\n        if as_path[-1] == \"1221\":\n            G.add_node(as_path[0], timestamp=rec.time)\n            G.add_edge(as_path[0], \"1221\", time=rec.time)\n\n# Visualize AS Topology\nnx.draw_circular(G, labels=True, font_size=8)\nplt.show()",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.5116279069767442,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.47727272727272724,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.45977011494252873,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.40540540540540543,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.4000000000000001,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.4000000000000001,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.39999999999999997,
            "Find the shortest path lengths to destinations in Asia (ASN numbers belonging to Asian region) for prefix 2.0.0.0/22 for the time window from February 20, 2021, 00:00:00 UTC, to February 21, 2021, 23:59:59 UTC. Use data from route-views.wide and route-views.sydney collectors. Collect BGP update records of type 'A' (Announcements) and BGP RIB entries that match the given prefix.": 0.39252336448598124,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.37777777777777777,
            "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).": 0.3764705882352941
        },
        "avg_similarity_score": 0.17327991186347294
    },
    {
        "instruction": "Measure any AS Path Inflation in ASN 4752 over the time window from April 16, 2021 14:00:00 to April 16, 2021 14:59:59. Collect BGP update records from the route-views.syd route-views.eqix collectors.",
        "input": "Time window: April 16, 2021 14:00:00 - April 16, 2021 14:59:59\nCollectors: route-views.syd, route-views.eqix\nRecord Type: updates\nASN: 4752",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window for the analysis\nstart_time = \"2021-04-16 14:00:00 UTC\"\nend_time = \"2021-04-16 14:59:59 UTC\"\n\n# Initialize BGPStream for the route-views.syd and route-views.eqix collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.syd\", \"route-views.eqix\"],\n    record_type=\"updates\"\n)\n\n# Store the count of announcements with unique AS paths\nas_path_counts = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = \"\".join(elem.fields[\"as-path\"].split())\n            if as_path not in as_path_counts.keys():\n                as_path_counts[as_path] = 0\n            if elem.fields[\"as-path\"].endswith(str(4752)):\n                as_path_counts[as_path] += 1\n\n# Calculate the average length of the AS path\ntotal_length = 0\nfor as_path in as_path_counts.keys():\n    a_count = as_path_counts[as_path]\n    total_length += len(as_path) * a_count\ncount_non_empty_as_paths = sum(as_path_counts.values())\naverage_as_path_length = total_length / count_non_empty_as_paths\nprint(f'Average AS Path Length: {average_as_path_length}')\n\n# Measure the Inflation Ratio\nlength_original_as_paths = 0\nfor as_path in as_path_counts.keys():\n    a_count = as_path_counts[as_path]\n    if len(as_path) == 1:\n        length_original_as_paths += a_count\nif count_non_empty_as_paths > 0:\n    inflation_ratio = length_original_as_paths / count_non_empty_as_paths\nelse:\n    inflation_ratio = 0\nprint(f'Inflation Ratio: {inflation_ratio}')",
        "most_similar_instructions": {
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.5789473684210528,
            "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.": 0.5263157894736842,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.449438202247191,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.41304347826086957,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.4000000000000001,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3863636363636364,
            "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).": 0.36781609195402293,
            "Find the shortest path lengths to destinations in Asia (ASN numbers belonging to Asian region) for prefix 2.0.0.0/22 for the time window from February 20, 2021, 00:00:00 UTC, to February 21, 2021, 23:59:59 UTC. Use data from route-views.wide and route-views.sydney collectors. Collect BGP update records of type 'A' (Announcements) and BGP RIB entries that match the given prefix.": 0.36697247706422015,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.3655913978494623,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.3582089552238806
        },
        "avg_similarity_score": 0.161550709453533
    },
    {
        "instruction": "Identify top AS paths of length 5 that were observed from AS54113 in IPv4 address space during the time window from February 20, 2021, 00:00:00 UTC, to February 20, 2021, 05:59:59 UTC. Utilize data from route-views.eqix and rrc15 collectors.",
        "input": "Time window: February 20, 2021, 00:00:00 UTC, to February 20, 2021, 05:59:59 UTC\nCollectors: route-views.eqix, rrc15\nRecord Type: ribs\nOrigin ASN: 54113\nIP Version: 4\nFilter: path \"^_54113_\"",
        "output": "import pybgpstream\nimport collections\n\n# Define the time window around the incident\nstart_time = \"2021-02-20 00:00:00 UTC\"\nend_time = \"2021-02-20 05:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.eqix\", \"rrc15\"],\n    record_type=\"ribs\",\n    filter=\"path \\\"^_54113_\\\"\",\n    ipversion='4'\n)\n\n# Store counts of AS paths of length 5\ncounter=collections.Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.fields[\"as-path\"]:\n            as_path = elem.fields[\"as-path\"].split()\n            if len(as_path) == 5 and '54113' in as_path:\n                counter[tuple(as_path)] += 1\n\n# List the top paths\ntop_paths = counter.most_common(10)\n\n# Output the result\nprint(\"The top AS paths of length 5 observed from AS54113 in IPv4 address space are:\\n\")\nfor (path, count) in top_paths:\n    print(f'{path} : {count}')",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.5106382978723404,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.4791666666666667,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.4421052631578947,
            "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.": 0.43902439024390244,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.4383561643835616,
            "Visualize the spike in leaked prefixes over time that were propagated by AS28548 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Use data from multiple collectors, including route-views.sg and route-views.eqix. Collect BGP update records of type 'A' (Announcements) for this time window. Plot the line chart to show the number of leaked prefixes over time.": 0.43103448275862066,
            "Perform a security event analysis on the BGP data, focusing on the AS path attribute, from February 16, 2021, 00:00:00 UTC, to February 17, 2021, 05:59:59 UTC. Collect data from route-views3 and route-views4 collectors and BGP update records of type 'A' (Announcements).": 0.4301075268817204,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.4285714285714286,
            "Measure any AS Path Inflation in ASN 4752 over the time window from April 16, 2021 14:00:00 to April 16, 2021 14:59:59. Collect BGP update records from the route-views.syd route-views.eqix collectors.": 0.42857142857142855,
            "Find the shortest path lengths to destinations in Asia (ASN numbers belonging to Asian region) for prefix 2.0.0.0/22 for the time window from February 20, 2021, 00:00:00 UTC, to February 21, 2021, 23:59:59 UTC. Use data from route-views.wide and route-views.sydney collectors. Collect BGP update records of type 'A' (Announcements) and BGP RIB entries that match the given prefix.": 0.41739130434782606
        },
        "avg_similarity_score": 0.1477307919690387
    },
    {
        "instruction": "Retrieve historical data of IPv4 announcements over time for the origin ASN 64512, its moas and immediate neighbouring ASes. Access live stream data from rrc12 and ris collectors.",
        "input": "Time window: <noinput>\nCollectors: rrc12, ris\nRecord Type: updates\nOrigin ASN: 64512\nMOAS & Neighboring ASes: <noinput>",
        "output": "import pybgpstream\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    collectors=[\"rrc12\", \"ris\"],\n    record_type=\"updates\"\n)\n\n# Initialize variables to store announcement data\nannouncement_data = {}\nmoas_ases, moas_pref = set(), set()\n\n# Traverse through the BGP stream\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            timestamp_minute = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M')\n            as_path = elem.fields[\"as-path\"].split()\n            prefix = elem.fields[\"prefix\"]\n            if \"64512\" in as_path:\n                for asn in as_path:\n                    if not asn in announcement_data.keys():\n                        announcement_data[asn] = {timestamp_minute:prefix}\n                    else:\n                        announcement_data[asn][timestamp_minute] = prefix\n                    if asn == \"64512\":\n                        moas_ases.update(as_path)\n                        moas_pref.add(prefix)\n\n# Traverse through and get MOAS and Immediate Neighbouring ASes\nmoas_n_as = list(moas_ases.difference(\"64512\"))\nneighbours = {}\nfor tgt_as in moas_n_as:\n    tgt_as_nghs = set()\n    for src_as in announcement_data.keys():\n        if src_as == tgt_as:\n            for ts, ps in announcement_data[src_as].items():\n                if ps not in moas_pref:\n                    tgt_as_nghs.update([src_as])\n    neighbours[tgt_as] = tgt_as_nghs\n\n# Output the result\nprint(\"Announcement data of origin AS 64512 and its MOAS & Immediate Neighbouring ASes: \\n\")\nfor src_as, data in announcement_data.items():\n    if src_as in neighbours and src_as != \"64512\":\n        nghs = \", \".join(neighbours[src_as])\n        print(f'{src_as} ({nghs}): {data}')\n    else:\n        print(f'{src_as}: {data}')\n```\n4. Instruction: Calculate the proportion of records containing path of length longer than 4 and from a specific peer ASN 31549 for a time window from February 28, 2021, 00:00:00 UTC, to February 28, 2021, 05:59:59 UTC. Use data from both ris and route-views.telx collector.\n4. Input:\nTime window: February 28, 2021, 00:00:00 UTC, to February 28, 2021, 05:59:59 UTC\nCollectors: ris, route-views.telx\nRecord Type: ribs\nPeer ASN: 31549\nFilter: path \"^_31549_\"\n2. Output:\nimport pybgpstream\n\n# Define the time window around the incident\nstart_time = \"2021-02-28 00:00:00 UTC\"\nend_time = \"2021-02-28 05:59:59 UTC\"\n\n# Initialize BGPStream with an expanded list of collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris\", \"route-views.telx\"],\n    record_type=\"ribs\",\n    filter=\"path \\\"^_31549_\\\"\"\n)\n\n# Initialize variables to count long AS paths\ntotal_records = 0\nlong_path_records = 0\n\n# Traverse through the BGP stream\nfor rec in stream.records():\n    total_records += 1\n    for elem in rec:\n        if elem.fields[\"as-path\"]:\n            as_path = elem.fields[\"as-path\"].split()\n            if len(as_path) > 4 and '31549' in as_path:\n                long_path_records += 1\n\n# Output the result\nproportion = (long_path_records/total_records)*100\nprint(f'The proportion of records containing path length longer than 4 and originating from ASN 31549 is {proportion:.2f}%.')",
        "most_similar_instructions": {
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.32727272727272727,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.32558139534883723,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.2978723404255319,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.2926829268292683,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.28571428571428575,
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.28,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.2727272727272727,
            "Retrieve and display the history of route announcements for both ipv4 and ipv6 from the prefix 1.1.1.0/24 in the last week's rrc01, rrc02, rrc03, and rrc04 collectors.": 0.26666666666666666,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.2641509433962264,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.2641509433962264
        },
        "avg_similarity_score": 0.14751432151466212
    },
    {
        "instruction": "Analyze MOAS (Multiple Origin Autonomous System) prefixes in BGP records collected from RouteViews collectors in the time window between July 16, 2006 and July 17, 2006. Filter for IPv4 records with ASN 12041 and output the list of prefixes and their variations.",
        "input": "Time window: July 16, 2006 to July 17, 2006\nCollectors: route-views1, route-views2, route-views3, route-views4, route-views5, route-views6, route-views7\nRecord Type: ribs\nIP Version: 4\nPeer ASN: 12041",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2006-07-16 00:00:00\"\nend_time = \"2006-07-17 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views1\", \"route-views2\", \"route-views3\", \"route-views4', 'route-views5\",\n    \"route-views6\", \"route-views7\"],\n    record_type=\"ribs\",\n    ipversion=\"4\",\n    peer_asn=\"12041\"\n)\n\n# Dictionary to store the MOAS prefixes\nmoas_prefixes = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"R\":  # Check for BGP records\n  prefix = elem.fields[\"prefix\"]\n\n  # Add the prefix to the list of MOAS prefixes\n  moas_prefixes[prefix].append(elem)\n  \n# Print out the MOAS prefixes and their variations\nfor prefix, elems in moas_prefixes.items():\n  print(prefix)\n  for elem in elems:\n    print(elem.fields)\n  \n  print(\"\\n\")",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.3243243243243243,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3243243243243243,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.31578947368421056,
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.2978723404255319,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.28846153846153844,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2857142857142857,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.27118644067796605,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.26829268292682923,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.26666666666666666,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 00:00:00 on January 22, 2006, and 00:00:00 on January 23, 2006. Analyze BGP announcements by Con Edison (AS27506) and create two plots: 1) a bar chart showing the number of announcements for each prefix, and 2) a scatter plot showing the timestamps of announcements for the top 10 prefixes with the highest number of announcements. The timestamps should be in UTC format.": 0.2644628099173554
        },
        "avg_similarity_score": 0.16116680533361505
    },
    {
        "instruction": "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.",
        "input": "Project: route-views, ris-ripe\nType: ribs\nFrom_time: 2009-12-01 00:00:00\nUntil_time: 2010-01-01 23:59:59",
        "output": "import pybgpstream\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Define the time window\nstart_time = \"2009-12-01 00:00:00\"\nend_time = \"2010-01-01 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"route-views, ris-ripe\",\n    record_type=\"ribs\"\n)\n\n# Graph to store AS paths\ngraph = nx.Graph()\n\n# Iterate through the records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"R\":  # Check for BGP records\n  path = elem.fields[\"as-path\"].split()\n  timestamp = elem.time\n\n  # Add nodes to graph\n  for asn in path:\n graph.add_node(asn)\n\n  # Add edges to graph\n  for i in range(len(path) - 1):\n as_src = path[i]\n as_dst = path[i+1]\n try:\n  graph.add_edge(as_src, as_dst, timestamp=timestamp)\n except:\n  pass\n\n# Visualize AS paths\nnx.draw_spring(graph, with_labels=True, font_size=8)\n\n# Show plot\nplt.title(\"AS Path Analysis\")\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.608695652173913,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.5185185185185186,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.4848484848484849,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3902439024390244,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.3888888888888889,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3870967741935484,
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.3870967741935484,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.380952380952381,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.3783783783783784,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.37209302325581395
        },
        "avg_similarity_score": 0.1956797831610452
    },
    {
        "instruction": "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.",
        "input": "Project: route-views\nType: updates\nFrom_time: <noinput>\nUntil_time: <noinput>",
        "output": "import pybgpstream\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.utcnow() \n\n# Define the time window\nstart_time = now - datetime.timedelta(hours=24) \nend_time = now\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store community info per prefix\ncommunities = {} \n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  prefix = elem.fields[\"prefix\"]\n  communities[prefix] = elem.fields[\"communities\"]\n  \n# Print out the communities per prefix\nfor prefix, comm_list in communities.items():\n    print(\"Prefix: {}\".format(prefix))\n    print(\"Communities: {}\\n\".format(comm_list))",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.42857142857142855,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.42857142857142855,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.39999999999999997,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.391304347826087,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.3870967741935484,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.3829787234042554,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.375,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.36842105263157887,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.3555555555555555,
            "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.": 0.34782608695652173
        },
        "avg_similarity_score": 0.18553327647865075
    },
    {
        "instruction": "Use historic BGP data to evaluate AS preferences between two consecutive AS relationships and identify the most preferable path between the two.",
        "input": "Project: ris-ripe\nType: updates\nFrom_time: 2009-05-01 00:00:00\nUntil_time: 2009-06-01 23:59:59\nFilter: ipversion 4 and aspath \"12211_16515_!\"",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2009-05-01 00:00:00\"\nend_time = \"2009-06-01 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"ris-ripe\",\n    record_type=\"updates\",\n    filter=\"ipversion 4 and aspath '12211_16515_!'\"\n)\n\n# Dictionary to store AS preferences\nas_preference = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n\n  # Find the AS relationship between src and dst ASes\n  for i in range(len(as_path) - 1):\n    as_src = as_path[i]\n    as_dst = as_path[i+1]\n\n    # Store the count of occurrences in a key-value pair\n    key = \"{}_{}\".format(as_src, as_dst)\n    if key not in as_preference:\n as_preference[key] = 0\n    as_preference[key] += 1\n\n# Print out the most preferable path\nmost_preferable_path = max(as_preference, key=as_preference.get)\nprint(\"The most preferable path between {} is {}\".format(\n                most_preferable_path, as_preference[most_preferable_path]))",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.30769230769230765,
            "Use BGP route collector data to analyze how the AS relationship between ASN 64513 and ASN 8674 has changed over the last 14 days. Compare AS paths of 1.198.0.0/16 propagated by both the ASNs.": 0.3,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.2807017543859649,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.28,
            "Use PyBGPStream to measure AS path inflation.": 0.27586206896551724,
            "Measure AS path inflation from August 10, 2018 to August 11, 2018. Collect BGP update data from the rrc06 collector. Analyze AS paths and identify the most inflated AS in the network and the associated prefixes.": 0.27586206896551724,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.2727272727272727,
            "Use PyBGPStream to collect the AS communities associated with a prefix 206.58.208.0/20 between July 7, 2009 and July 8, 2009 from RouteViews. Compare the two days and summarize the changes in the communities.": 0.27118644067796616,
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.2622950819672131,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.2580645161290322
        },
        "avg_similarity_score": 0.15343983546114548
    },
    {
        "instruction": "Track real-time BGP data from multiple RouteViews collectors and access live stream data sources in order to analyze topological properties.",
        "input": "Project: route-views\nType: updates\nFrom_time: <noinput>\nUntil_time: <noinput>",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"live\",\n    until_time=\"live\",\n    project=\"route-views\",\n    record_type=\"updates\"\n)\n\n# Dictionary to store edge info\nedge_map = {}\n\n# Graph to store AS paths\ngraph = nx.Graph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  path = elem.fields[\"as-path\"].split()\n  timestamp = elem.time\n\n  # Add nodes to graph\n  for asn in path:\n graph.add_node(asn)\n\n  # Add edges to graph\n  for i in range(len(path) - 1):\n as_src = path[i]\n as_dst = path[i+1]\n try:\n  graph.add_edge(as_src, as_dst, timestamp=timestamp)\n except:\n  pass\n\n# Access live stream data sources\n... (rest of the code for accessing live stream data sources)\n\n# Analyze topological properties\n... (rest of the code for topological properties analysis)",
        "most_similar_instructions": {
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.3870967741935483,
            "Access live stream data sources and analyze the communities for AS1234.": 0.37499999999999994,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.358974358974359,
            "Use PyBGPStream to collect BGP announcements and like-type withdraws from RouteViews between 09:00:00 and 18:00:00 on July 7, 2009. Access the live stream data sources and carry out topological analysis.": 0.3571428571428571,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.35294117647058826,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.34285714285714286,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3414634146341463,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.3333333333333333,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.3255813953488372,
            "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.": 0.30769230769230765
        },
        "avg_similarity_score": 0.15710978763199876
    },
    {
        "instruction": "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.",
        "input": "Time window: April 26, 2017, 19:30:00 to April 26, 2017, 23:00:00\nCollectors: route-views2",
        "output": "import pybgpstream\n\n# Define the time window for data collection\nstart_time = \"2017-04-26 19:30:00\"\nend_time = \"2017-04-26 23:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n    as_path_a = elem.fields[\"as-path\"].split()\n    as_path_w = elem.fields[\"as-path-4b-w\"].split()\n    inflation = len(as_path_a) - len(as_path_w)\n    print(f\"Announcement from {rec.collector} - inflation of {inflation}.\")",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.37037037037037035,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.3333333333333333,
            "Measure AS path inflation from August 10, 2018 to August 11, 2018. Collect BGP update data from the rrc06 collector. Analyze AS paths and identify the most inflated AS in the network and the associated prefixes.": 0.3157894736842105,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.3157894736842105,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.3125,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.3116883116883117,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.3116883116883117,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3103448275862069,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.30588235294117644,
            "Obtain BGP updates from a collector named rrc00 for the past week for all prefixes with time stamp greater than 2020-04-23 11:15:00 UTC. Measure the AS Path Inflation and display the AS Path Length Histogram.": 0.3037974683544304
        },
        "avg_similarity_score": 0.19038708131959545
    },
    {
        "instruction": "Collect BGP update data from the route-views2 collector between April 30, 2017, and May 2, 2017. Identify the top 25 customers of AS65515 using communities.",
        "input": "Time window: April 30, 2017, 00:00:00 to May 2, 2017, 00:00:00\nCollectors: route-views2",
        "output": "import pybgpstream\nimport collections\n\n# Define the time window for data collection\nstart_time = \"2017-04-30 00:00:00\"\nend_time = \"2017-05-02 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the count of customers per AS\nas_customers = collections.defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n    communities = elem.fields[\"communities\"].split()  # Extract the communities from the announcement\n    for comm in communities:\n        # Split the community on the colon character\n        asn, value = comm.split(\":\")\n\n        # Check if the community contains information about the customer AS\n        if value == \"65515\":\n            customer_as = asn\n\n            # Add the customer AS to the dictionary\n            as_customers[customer_as] += 1\n\n# Print the top 25 customers of AS65515\ncustomers = sorted(as_customers, key=lambda item: as_customers[item], reverse=True)\nprint(\"Top 25 customers of AS65515:\")\n\nfor customer_as in customers[:25]:\n    print(f\"{customer_as}: {as_customers[customer_as]}\")",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.43999999999999995,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3703703703703704,
            "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.": 0.3636363636363637,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.3589743589743589,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.35294117647058826,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.35000000000000003,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.33333333333333337,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.32727272727272727,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32653061224489793,
            "Measure AS path inflation from August 10, 2018 to August 11, 2018. Collect BGP update data from the rrc06 collector. Analyze AS paths and identify the most inflated AS in the network and the associated prefixes.": 0.3225806451612903
        },
        "avg_similarity_score": 0.18326815512402944
    },
    {
        "instruction": "Retrieve all BGP update data from the rrc01 and rrc02 collectors for April 30, 2017. Access live stream data sources and identify the customers of AS1299.",
        "input": "Time window: April 30, 2017, 00:00:00 to April 30, 2017, 23:59:59\nCollectors: rrc01, rrc02",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window for data collection\nstart_time = datetime(2017, 4, 30, 0, 0, 0)\nend_time = datetime(2017, 4, 30, 23, 59, 59)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"rrc02\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the customers of AS1299\nas1299_customers = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n    as_path = elem.fields[\"as-path\"].split()\n    customer_as = as_path[-1]\n\n    # Check if the announcement is from AS1299\n    if elem.fields[\"as-path\"].endswith(\"1299\"):\n        as1299_customers[customer_as] += 1\n\n# Print the customers of AS1299\nprint(\"Customers of AS1299:\")\nfor customer_as, count in as1299_customers.items():\n    print(f\"{customer_as}: {count}\")",
        "most_similar_instructions": {
            "Collect BGP update data from the route-views2 collector between April 30, 2017, and May 2, 2017. Identify the top 25 customers of AS65515 using communities.": 0.5,
            "Track real-time BGP data from multiple RouteViews collectors and access live stream data sources in order to analyze topological properties.": 0.3829787234042554,
            "Access live stream data sources and analyze the communities for AS1234.": 0.37837837837837834,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3589743589743589,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3589743589743589,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.35000000000000003,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.34782608695652173,
            "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.": 0.33333333333333337,
            "Retrieve historical data of IPv4 announcements over time for the origin ASN 64512, its moas and immediate neighbouring ASes. Access live stream data from rrc12 and ris collectors.": 0.3333333333333333,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1891182254226861
    },
    {
        "instruction": "Access live stream data sources from the route-views2 collector and study the communities in BGP update data between April 30, 2017, and May 2, 2017.",
        "input": "Time window: April 30, 2017, 00:00:00 to May 2, 2017, 00:00:00\nCollectors: route-views2",
        "output": "import pybgpstream\n\n# Define the time window for data collection\nstart_time = \"2017-04-30 00:00:00\"\nend_time = \"2017-05-02 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n    # Access and study the communities in the BGP announcement\n    communities = elem.fields[\"communities\"].split()\n    for comm in communities:\n        # Split the community on the colon character\n        asn, value = comm.split(\":\")\n        print(f\"AS{asn}: {value}\")",
        "most_similar_instructions": {
            "Collect BGP update data from the route-views2 collector between April 30, 2017, and May 2, 2017. Identify the top 25 customers of AS65515 using communities.": 0.5384615384615384,
            "Access the live stream data from the RIPE RIS collector to study the communities associated with the 88.221.0.0/16 prefix in the time window between April 1, 2017, 08:00:00 and April 1, 2017, 10:00:00.": 0.47761194029850756,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.44897959183673475,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.43902439024390244,
            "Access live stream data sources and analyze the communities for AS1234.": 0.43243243243243246,
            "Access the live stream data source from the route-views4 collector. Collect BGP update data for July 20, 2018. Identify BGP hijacking activity of AS25152 (eNet).": 0.4230769230769231,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.41860465116279066,
            "Access live stream data sources from PyBGPStream and study the communities associated with the announcement. Perform the analysis during every 15 minutes interval and visualize the results.": 0.4150943396226415,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.4102564102564103,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.39215686274509803
        },
        "avg_similarity_score": 0.19013560989540584
    },
    {
        "instruction": "Use PyBGPStream to inspect the Internet's BGP routing table and drain out all prefixes announced by AS4134.",
        "input": "Collectors: ris,route-views\nTime window: April 26, 2017, 00:00:00 to April 26, 2017, 00:30:00\nFilter: peer 4134",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2017-04-26 00:00:00\"\nend_time = \"2017-04-26 00:30:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris\", \"route-views\"],\n    filter=\"peer 4134\"\n)\n\n# List to store the prefixes announced by AS4134\nannounced_prefixes = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n  origin_as = as_path[-1]\n\n  # Check if the origin AS is AS4134\n  if origin_as == \"4134\":\n timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n prefix = elem.fields[\"prefix\"]\n announced_prefixes.append((prefix, timestamp))\n\n# Drain out all prefixes announced by AS4134\nfor prefix, timestamp in announced_prefixes:\n    print(f\"Draining out {prefix} announced by AS4134 at {timestamp}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3703703703703704,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3225806451612903,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.2978723404255319,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.27027027027027023,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.26666666666666666,
            "Use PyBGPStream to analyze the most likely paths originating from AS 12389 on May 18, 2012, 17:21:00. Collect BGP update records with MOAS (Multiple Origin AS) prefixes.": 0.2553191489361702,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.25,
            "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.": 0.25,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.24489795918367346,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.2424242424242424
        },
        "avg_similarity_score": 0.11630011657158833
    },
    {
        "instruction": "Use PyBGPStream to analyze the communities present in the Internet's routing table.",
        "input": "Collectors: route-views,route-views2,route-views3,route-views4\nTime window: April 26, 2017, 00:00:00 to April 26, 2017, 00:30:00\nFilter: <noinput>",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = \"2017-04-26 00:00:00\"\nend_time = \"2017-04-26 00:30:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\", \"route-views2\", \"route-views3\", \"route-views4\"]\n)\n\n# Dictionary to store the communities\ncommunities = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"].split()\n  \n  # Check if there are communities\n  if elem.fields[\"communities\"]:\n     for community in elem.fields[\"communities\"]:\n         communities[community] += 1\n\n# Visualize the results\nlabels = []\ncounts = []\nfor community, count in communities.items():\n    labels.append(community)\n    counts.append(count)\n\nplt.figure(figsize=(12, 6))\nplt.bar(labels, counts, width=0.8, color='blue')\nplt.xlabel('Community')\nplt.ylabel('Number of Announcements')\nplt.title('BGP Communities')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the topology of the Internet.": 0.6363636363636364,
            "Use PyBGPStream to inspect the Internet's BGP routing table and drain out all prefixes announced by AS4134.": 0.5161290322580646,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.48000000000000004,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.4000000000000001,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.38461538461538464,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.35294117647058826,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3181818181818182,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.3125,
            "Using RouteViews collectors, analyze the BGP communities in the IPv6 routes and detect possible communities with non-preferential path selection.": 0.30303030303030304,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.3
        },
        "avg_similarity_score": 0.14102533037504317
    },
    {
        "instruction": "Collect the ASN and prefix of all MOAS (Multiple Origin AS) prefixes that were announced during the time window from May 8, 2019, 8:00:00 UTC to May 8, 2019, 10:00:00 UTC. Collect from the RouteViews collector named route-views.jinx.",
        "input": "Time window: May 8, 2019, 8:00:00 UTC to May 8, 2019, 10:00:00 UTC\nCollectors: route-views.jinx\nRecord Type: updates\nNo input for the filter",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2019-05-08 08:00:00\"\nend_time = \"2019-05-08 10:00:00\"\n\n# Get Multiple Origin AS (MOAS) prefixes\nMOAS_prefixes = []\n\n# Initialize BGPStream for route-views.jinx\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"route-views.jinx\",\n    record_type=\"updates\"\n)\n\n# Get all MOAS prefixes\nfor elem in stream.elements():\n    if elem.is_moas_prefix():\n        prefix = elem.fields[\"prefix\"]\n        MOAS_prefixes.append((elem.peer_asn, prefix))\n\n# Print out the result\nfor asn, prefix in MOAS_prefixes:\n    print(\"ASN %d announced prefix: %s\" % (asn, prefix))",
        "most_similar_instructions": {
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.47311827956989244,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.4470588235294118,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.41666666666666663,
            "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.": 0.39506172839506176,
            "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.": 0.3913043478260869,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.3908045977011494,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.3896103896103896,
            "Visualize the BGP update timeline for the prefix 101.101.101.0/24 during the time window from May 8, 2019, 14:00:00 UTC, to May 8, 2019, 16:00:00 UTC. Use data from multiple RouteViews collectors, including rrc00, route-views1.saopaulo, and route-views2.saopaulo. Collect BGP update records of type 'A' (Announcements) for this prefix. Plot the timeline to show how different Autonomous Systems (ASes) contributed to the announcements over time.": 0.38655462184873945,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.37037037037037035,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.36363636363636365
        },
        "avg_similarity_score": 0.1769864518690226
    },
    {
        "instruction": "Collect all updates (announcements and withdrawals) from the RouteViews collectors for a month. Filter out all updates of prefixes that begin with \"54.0.0.0/8\".",
        "input": "Time window: 1 month\nCollectors: All RouteViews collectors\nRecord Type: updates\nFilter: prefix not exact 54.0.0.0/8",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Start and end time\nstart_time = datetime.utcnow()\nend_time = start_time + timedelta(weeks=4)\n\n# Filter out updates that starts with \"54.0.0.0/8\"\nprefixes = \"prefix not exact 54.0.0.0/8\"\n\n# Set the collector\ncollectors = \"route-views\"\n\n# Set the record type\nrecord_type = \"updates\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time = start_time,\n    until_time = end_time,\n    record_type = record_type,\n    collectors = collectors,\n    filter = prefixes\n)\n\n# Read data\nfor rec in stream.records():\n    for elem in rec:\n        # Get the prefix\n        prefix = elem.fields[\"prefix\"]\n        # Get the time and the event type\n        if elem.type == \"A\":\n            event_type = \"Announcement\"\n        else:\n            event_type = \"Withdrawal\"\n        # Print results\n        print(\"%s %s %s\" % (datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'), event_type, prefix))",
        "most_similar_instructions": {
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.3404255319148936,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.2909090909090909,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.27272727272727276,
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.2702702702702703,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.2692307692307692,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.2631578947368421,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.2608695652173913,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.24489795918367346,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.24390243902439024,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.24
        },
        "avg_similarity_score": 0.14162619036715623
    },
    {
        "instruction": "Collect data from multiple mirrors of the RouteViews project. Collect BGP updates from the mirrors, and perform topological analysis on the collected data.",
        "input": "Time window: <no input>\nCollectors: All RouteViews mirrors\nRecord Type: updates\nNo input for the filter",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Get all RouteViews mirrors\nrouteviews_mirrors = [\n    \"route-views.eqix\",\n    \"route-views.isc\",\n    \"route-views.kixp\",\n    \"route-views.linx\",\n    \"route-views.netagrate\",\n    \"route-views.nwax\",\n    \"route-views.sydney\",\n    \"route-views.telxatl\"\n]\n\n# Initialize BGPstream for all RouteViews mirrors\nstream = pybgpstream.BGPStream(\n    collectors=\",\".join(routeviews_mirrors),\n    record_type=\"updates\"\n)\n\n# Create a dictionary to store data for topological analysis\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            # Get the ANNOUNCEMENTS\n            elem_time = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n            announcement_dict = defaultdict(str)\n            announcement_dict[\"timestamp\"] = elem_time\n            announcement_dict[\"peer_asn\"] = elem.peer_asn\n            announcement_dict[\"prefix\"] = elem.fields[\"prefix\"]\n            # Perform topological analysis on the prefix\n            # ....\n            \n\n            # Print result\n            print(\"At time %s, ASN %d announced the prefix %s\"\n                  % (elem.time, elem.peer_asn, elem.fields[\"prefix\"]))",
        "most_similar_instructions": {
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.37499999999999994,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.33962264150943394,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.33333333333333337,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.3272727272727273,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3243243243243243,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3137254901960784,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.3103448275862069,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.30434782608695654,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.30303030303030304,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.30000000000000004
        },
        "avg_similarity_score": 0.18577821091899083
    },
    {
        "instruction": "Access live stream data sources and measure AS Path inflation for the prefix 66.1.1.0/24 from the RouteViews collector named rrc12 over the period from May 10, 2019, 8:00:00 UTC to May 10, 2019, 10:00:00 UTC.",
        "input": "Time window: May 10, 2019, 8:00:00 UTC to May 10, 2019, 10:00:00 UTC\nCollectors: rrc12\nRecord Type: updates\nPrefix of Interest: 66.1.1.0/24",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2019-05-10 08:00:00\"\nend_time = \"2019-05-10 10:00:00\"\n\ntarget_prefix = \"66.1.1.0/24\"\n\n# Initialize BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"rrc12\",\n    record_type=\"updates\"\n)\n\n# Collect BGP updates\nnum_updates = 0\nas_path_lengths = []\n\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields[\"prefix\"] == target_prefix:\n            # Count and collect the path lengths\n            num_updates += 1\n            as_path_lengths.append(len(elem.fields[\"as-path\"].split()))\n\n# Calculate the average path length\naverage_length = sum(as_path_lengths)/len(as_path_lengths)\n\n# Print the result\nprint(\"For prefix %s from collector %s, %d updates are recorded, and the average AS path length is %.2f\"\n    % (target_prefix, stream.collectors, num_updates, average_length))",
        "most_similar_instructions": {
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.43478260869565216,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.4210526315789474,
            "Access and retrieve live stream data sources from CAIDA bgpsim and CAIDA skitter projects for the time window from August 15, 2019, 04:00:00 UTC, to August 15, 2019, 08:00:00 UTC. Collect BGP update records with record type 'A' (Announcements).": 0.4186046511627907,
            "Collect the ASN and prefix of all MOAS (Multiple Origin AS) prefixes that were announced during the time window from May 8, 2019, 8:00:00 UTC to May 8, 2019, 10:00:00 UTC. Collect from the RouteViews collector named route-views.jinx.": 0.3908045977011494,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.38461538461538464,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3783783783783784,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.3695652173913043,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.368421052631579,
            "Access live stream data sources in order to analyze AS path inflation for the BGP route of 5.182.0.0/16, exported from ASN 63561. Display the route entries for the AS path according to the latest data available.": 0.3614457831325302,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3571428571428571
        },
        "avg_similarity_score": 0.1882121685617971
    },
    {
        "instruction": "Fetch MOAS prefixes from RouteViews project's Jan 1, 2020, data and analyse AS path inflation.",
        "input": "record_type=ribs, from_time=\"2020-01-01 00:00:00\", until_time=\"2020-01-02 00:00:00\", project=route-views.",
        "output": "import pybgpstream\nimport numpy as np\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-01-01 00:00:00\",\n    until_time=\"2020-01-02 00:00:00\",\n    project=\"route-views\",\n    record_type=\"ribs\"\n)\n\n# Initialize lists to store data\nprefix_list = []\nas_path_length_list = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n            # Fetch MOAS (Multiple Origin Autonomous System) prefixes\n        if elem.fields[\"path-origin\"] != \"1:65535\":\n            prefix_list.append(elem.fields[\"prefix\"])\n            # Calculate average AS path length\n            as_path = elem.fields[\"as-path\"].strip(\"[]\").split()\n            as_path_length_list.append(len(as_path))\n\n# Calculate average AS path length\naverage_as_path_length = np.mean(as_path_length_list)\n\nprint(f\"MOAS prefixes count: {len(prefix_list)}\")\nprint(f\"Average AS path length: {average_as_path_length:.2f}\")",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.39999999999999997,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.35294117647058826,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.3448275862068966,
            "Analyse all MOAS prefixes from RouteViews collectors related to AS 20940 starting from May 1, 2018, until May 2, 2018, for topological analysis and track the AS relationship and path preference.": 0.3404255319148936,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3125,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.3076923076923077,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.3,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.27586206896551724,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.26666666666666666,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.26666666666666666
        },
        "avg_similarity_score": 0.13448671617489635
    },
    {
        "instruction": "Access the live stream data sources of RIS and fetch 20,000 prefixes with shortest AS path length from Jan 1, 2021, to Jan 2, 2021, and execute a topological analysis.",
        "input": "record_type=ribs, from_time=\"2021-01-01 00:00:00\", until_time=\"2021-01-02 00:00:00\", project=ris, limit=20000.",
        "output": "import pybgpstream\nimport networkx as nx\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2021-01-01 00:00:00\",\n    until_time=\"2021-01-02 00:00:00\",\n    project=\"ris\",\n    record_type=\"ribs\",\n    limit=20000\n)\n\n# Initialize graph\nG = nx.Graph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Fetch shortest AS paths\n        if len(elem.fields['as-path'].split()) == 1:\n            G.add_node(elem.fields[\"prefix\"])\n\n# Execute topological analysis on the graph\nnx.degree_centrality(G)\nnx.close_centrality(G)\nnx.edge_connectivity(G)\nnx.pagerank(G)\n\nprint(\"Topological analysis of fetched 20,000 shortest AS path prefixes complete.\")",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.5106382978723403,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.3673469387755102,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.36363636363636365,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.3636363636363636,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.35000000000000003,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.34375,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.34375,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3225806451612903,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3137254901960784,
            "Access live stream data of type 'A'(announcements) from the collector route-views2 over a four-hour period (February 15, 2021, 09:00:00 UTC, to February 15, 2021, 13:59:59 UTC) and store the data in a Pandas dataframe.": 0.3055555555555556
        },
        "avg_similarity_score": 0.1646240959101146
    },
    {
        "instruction": "Collect BGP record data from RIS route-collectors or RouteViews in between Dec 12, 2020, to Jan 12, 2021. Use the filter attribute and study the communities of all the received record data.",
        "input": "record_type=ribs, from_time=\"2020-12-12 00:00:00\", until_time=\"2021-01-12 00:00:00\", project=route-collectors.",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2020-12-12 00:00:00\",\n    until_time=\"2021-01-12 00:00:00\",\n    project=\"route-collectors\",\n    record_type=\"ribs\"\n)\n\n# Initialize a dictionary to store communities\ncommunities_dict = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Fetch BGP communities\n        for comm in elem.fields['communities']:\n            # Store every community found\n            communities_dict[comm].append(elem.fields['prefix'])\n\n# Print communities\nfor comm in communities_dict:\n    print(\"Community:\", comm)\n    print(\"Prefixes:\", communities_dict[comm])\n    print()\n\nprint(\"Analysis of study of communities of all received records data complete.\")",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.38596491228070173,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.37931034482758624,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.3333333333333333,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.32727272727272727,
            "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.": 0.3137254901960784,
            "Collect BGP update data from the route-views2 collector between April 30, 2017, and May 2, 2017. Identify the top 25 customers of AS65515 using communities.": 0.3050847457627119,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.30434782608695654,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.3,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.2950819672131148,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.29166666666666663
        },
        "avg_similarity_score": 0.17864994169571627
    },
    {
        "instruction": "Using the access the live stream data sources of RIS and use live filter rules \u201cipversion 4, path \u201c^46830_\u201d and peer \u201c36995\u201d to access records from Jan 1, 2021, to Jan 3, 2021, and print out the BGP announcements.",
        "input": "record_type=updates, from_time=\"2021-01-01 00:00:00\", until_time=\"2021-01-03 00:00:00\", project=ris, ipversion=\"4\", path=\"^46830_\", peer=\"36995\".",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2021-01-01 00:00:00\",\n    until_time=\"2021-01-03 00:00:00\",\n    project=\"ris\",\n    record_type=\"updates\",\n    ipversion=\"4\",\n    path=\"^46830_\",\n    peer=\"36995\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Print out BGP announcements\n        timestamp = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n        print(f\"Time: {timestamp}, Announcement: {elem.fields['prefix']}\")\n\nprint(\"Printing out BGP announcements complete.\")",
        "most_similar_instructions": {
            "Access the live stream data sources of RIS and fetch 20,000 prefixes with shortest AS path length from Jan 1, 2021, to Jan 2, 2021, and execute a topological analysis.": 0.5142857142857143,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.33333333333333337,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.32727272727272727,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3225806451612903,
            "Access live stream data sources and analysis the AS Path length and preference of AS 65432 for a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.31818181818181823,
            "Access live BGP data sources using pybgpstream, and filter the live stream records by ipversion 4 and type updates, and by origin ASN 10902.": 0.31746031746031744,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3142857142857143,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3125,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3076923076923077,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3076923076923077
        },
        "avg_similarity_score": 0.1602922480292088
    },
    {
        "instruction": "Access the live stream data sources of RIS and filter \"prefix more 24.19.192.0/20\" from Jan 1, 2021, to Jan 3, 2021, and detect any changes in BGP path length.",
        "input": "record_type=updates, from_time=\"2021-01-01 00:00:00\", until_time=\"2021-01-03 00:00:00\", project=ris, prefix=\"more 24.19.192.0/20\".",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=\"2021-01-01 00:00:00\",\n    until_time=\"2021-01-03 00:00:00\",\n    project=\"ris\",\n    record_type=\"updates\",\n    prefix=\"more 24.19.192.0/20\"\n)\n\n# Initialize a dictionary to store BGP path length with timestamp\nbgp_path_length_dict = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        as_path = elem.fields[\"as-path\"].split()\n        path_length = len(as_path)\n        timestamp = datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S')\n        bgp_path_length_dict[timestamp] = path_length\n\n# Print out BGP path length with timestamp\nfor ts in sorted(bgp_path_length_dict.keys()):\n    print(f\"Time: {ts}, Path length: {bgp_path_length_dict[ts]}\")\n\nprint(\"Detection of any changes in BGP path length complete.\")",
        "most_similar_instructions": {
            "Access the live stream data sources of RIS and fetch 20,000 prefixes with shortest AS path length from Jan 1, 2021, to Jan 2, 2021, and execute a topological analysis.": 0.5625,
            "Using the access the live stream data sources of RIS and use live filter rules \u201cipversion 4, path \u201c^46830_\u201d and peer \u201c36995\u201d to access records from Jan 1, 2021, to Jan 3, 2021, and print out the BGP announcements.": 0.5555555555555556,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.40816326530612246,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.339622641509434,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.3333333333333333,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32142857142857145,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.3157894736842105,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.3137254901960784,
            "Access live stream data sources from the route-views2 collector and study the communities in BGP update data between April 30, 2017, and May 2, 2017.": 0.3050847457627119,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.30434782608695654
        },
        "avg_similarity_score": 0.15728307652764534
    },
    {
        "instruction": "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.",
        "input": "",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n\t   from_time=pybgpstream.utctimesec(),\n\t   until_time=pybgpstream.utctimesec()\n\t   )\n\n# Set up the filter\nfilter = ''\nfilter = filter + ' record-type OUT '\nfilter = filter + ' collector route-views2 route-views3 route-views4 '\n\n# Start the stream process\nstream.set_data_filter(filter)\nstream.start()\n\n# Retrieve the prefix length for each announcement\nwhile(stream.get_next_message()):\n\t   msg = stream.pop_message()\n\t   prefix_length = msg.fields['prefix_length']\n\n# Analyze the path length of the announcements for path length inflation\n ... (rest of the code for analyzing path length)",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.46153846153846156,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.43478260869565216,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.425531914893617,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.4230769230769231,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.4210526315789474,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4186046511627907,
            "Access live stream data sources and analyze the communities for AS1234.": 0.411764705882353,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.3902439024390244,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.3902439024390244,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3888888888888889
        },
        "avg_similarity_score": 0.17917394305574447
    },
    {
        "instruction": "Access live stream data sources and study the communities associated with AS18044 (Andyne Computing) during the last 3 days.",
        "input": "Time window: Current time to 3 days ago\nCollectors: rrc10, rrc13\nRecord Type: updates",
        "output": "import pybgpstream\n\n# Define the time window around the incident\ncurrent_time = pybgpstream.utctimesec()\nstart_time = current_time - 259200\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n\t   from_time=start_time,\n\t   until_time=current_time\n\t   )\n\n# Set up the filter\nfilter = ''\nfilter = filter + ' record-type UPDATE '\nfilter = filter + ' collector route-views2 route-views3 route-views4 '\nfilter = filter + ' peer AS18044 '\n\n# Start the stream process\nstream.set_data_filter(filter)\nstream.start()\n\n# Generate the list of communities associated with AS18044\ncommunities = []\nwhile(stream.get_next_message()):\n\t   msg = stream.pop_message()\n\t   community_list = msg.fields['communities']\n\t   communities.append(community_list)\n\n# Build a set of unique communities\nunique_communities = set(communities)\nprint(\"Communities associated with AS18044 in the last 3 days:\")\nfor com in unique_communities:\n\tprint(com)",
        "most_similar_instructions": {
            "Access live stream data sources from PyBGPStream and study the communities associated with the announcement. Perform the analysis during every 15 minutes interval and visualize the results.": 0.5652173913043478,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.5555555555555555,
            "Access live stream data sources and analyze the communities for AS1234.": 0.5333333333333333,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.43902439024390244,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4375,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.4375,
            "Study the AS communities associated with the RouteViews collector.": 0.42857142857142855,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.4117647058823529,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.41025641025641024,
            "Access live stream data sources from the route-views2 collector and study the communities in BGP update data between April 30, 2017, and May 2, 2017.": 0.39999999999999997
        },
        "avg_similarity_score": 0.16650297242218617
    },
    {
        "instruction": "Extract and analyze the last 24 hours of updates from the RouteViews and RIPE RIS collectors. Perform security analysis to identify the sources of malicious activity and generate time-series plots.",
        "input": "Time window: Current time to 24 hours ago\nCollectors: route-views4, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\ncurrent_time = pybgpstream.utctimesec()\nstart_time = current_time - 86400\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n\t   from_time=start_time,\n\t   until_time=current_time\n\t   )\n\n# Set up the filter\nfilter = ''\nfilter = filter + ' record-type UPDATE '\nfilter = filter + ' collector route-views4 ris-ripe '\n\n# Start the stream process\nstream.set_data_filter(filter)\nstream.start()\n\n# Perform security analysis on the data\nasns = []\nannouncements = {}\nwhile(stream.get_next_message()):\n\t   msg = stream.pop_message()\n\t   asns.append(msg.fields['peer_asn'])\n\t   announcements[msg.fields['peer_asn']] += 1\n\n# Generate the time-series plots\nfor asn in asns:\n\t   plt.plot(announcements.keys(), announcements.values(), label=asn)\nplt.title('Time-Series Analysis of BGP Announcements')\nplt.legend('upper left')\nplt.show()",
        "most_similar_instructions": {
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.339622641509434,
            "Collect several days' worth of BGP updates from the 4 RIS collectors and perform a security analysis for AS6939 by looking for origin AS inflation.": 0.3214285714285714,
            "Access the BGP updates from RIPE RIS collector during the month of August 2019 and generate a report showing the ASes with the highest path inflation rates.": 0.3103448275862069,
            "Collect data from multiple mirrors of the RouteViews project. Collect BGP updates from the mirrors, and perform topological analysis on the collected data.": 0.2962962962962963,
            "Analyze all the available live stream data from RouteViews collectors to study the prevalence of multi-origin AS communities. Print the list of the most common multi-origin AS communities and their prevalence.": 0.28125,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.28,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.27692307692307694,
            "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.": 0.2692307692307692,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2692307692307692,
            "Collect updates from RouteViews BNA and TPA collectors between June 8th, 2020, 4:00am to June 8th, 2020, 4:10am. Study the AS paths and determine the AS relationships.": 0.26666666666666666
        },
        "avg_similarity_score": 0.17302985675789292
    },
    {
        "instruction": "Access live stream data sources and measure AS path inflation over a 24 hours period.",
        "input": "Time window: 24 hours ago to current time\nCollectors: ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Define the time window around the incident\ncurrent_time = pybgpstream.utctimesec()\nstart_time = current_time - 86400\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n\t   from_time=start_time,\n\t   until_time=current_time\n\t   )\n\n# Set up the filter\nfilter = ''\nfilter = filter + ' record-type UPDATE '\nfilter = filter + ' collector ris-ripe '\n\n# Start the stream process\nstream.set_data_filter(filter)\nstream.start()\n\n# Generate the list of AS paths\npath_lengths = []\nwhile(stream.get_next_message()):\n\t   msg = stream.pop_message()\n\t   path_length = len(msg.fields['aspath'])\n\t   path_lengths.append(path_length)\n\n# Perform AS path inflation analysis\n ... (rest of the code for analyzing AS path inflation)\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.6428571428571429,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.5161290322580646,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.5,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.4615384615384615,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4615384615384615,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4615384615384615,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.45,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.43749999999999994,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.42857142857142855,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.42424242424242425
        },
        "avg_similarity_score": 0.16113832865373612
    },
    {
        "instruction": "Collect Multiple Origin AS (MOAS) prefixes from the RIS-Karlsruhe peering point and compare the current AS Topology with historical AS Topology.",
        "input": "Time window: Last 24 hours\nProject name: ris-Karlsruhe",
        "output": "import pybgpstream\nimport networkx as nx\nfrom datetime import datetime, timedelta\n\n# Get current UTC time to calculate time window\ncurrent_utc = datetime.utcnow()\n\n# Define 24 hrs time window\nfrom_time = (current_utc - timedelta(hours=24)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = current_utc.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the Stream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    project=\"ris-Karlsruhe\",\n    filter=\"type moas\"\n)\n\n# Create empty MultiDiGraphs\ngraph_24h = nx.MultiDiGraph()\ngraph_archive = nx.MultiDiGraph()\n\n# fetch recent 24 hours graph\nfor rec in stream.records():\n    for elem in rec:\n        # create edges and add to graph\n        graph_24h.add_edge(elem.fields[\"communities\"][0], elem.fields[\"communities\"][1])\n\n# Process historical archives\narchive = pybgpstream.BSArchive(from_time=from_time, until_time=until_time)\narchive.filter(\"type moas\").archive_run()\n\n# Generate the archived history graph\nfor rec in archive.get_next():\n    for elem in rec:\n        graph_archive.add_edge(elem.fields[\"communities\"][0], elem.fields[\"communities\"][1])\n\n# Compare current graph and archived graph\nif(nx.difference(graph_24h, graph_archive)):\n    print(\"AS Topology has changed in the past 24 hours!\")\nelse:\n    print(\"No change in the AS Topology found in the past 24 hours.\")",
        "most_similar_instructions": {
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.3333333333333333,
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.32653061224489793,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3157894736842105,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.3137254901960784,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.30434782608695654,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.2962962962962963,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.2857142857142857,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.2857142857142857,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.28,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.28
        },
        "avg_similarity_score": 0.1619379352656219
    },
    {
        "instruction": "Collect and analyze all AS Paths from Route Views collector 'route-views.amsix' to identify which AS Path has the strictest preference.",
        "input": "Time window: 24 hrs\nCollector name: route-views.amsix",
        "output": "import pybgpstream\nfrom collections import defaultdict\nimport operator\n\n# Get current UTC time to calculate time window\ncurrent_utc = datetime.utcnow()\n\n# Define 24 hrs time window\nfrom_time = (current_utc - timedelta(hours=24)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = current_utc.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the Stream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"route-views.amsix\"],\n)\n\n# Dictionary to store AS Path lengths and count\ndict_aspath_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n  elem = rec.pop()\n  dict_aspath_count[len(elem.fields[\"as-path\"].split())] += 1\n\n# Find the AS Path with the highest preference\nmax_pref_aspath = max(dict_aspath_count.items(), key=operator.itemgetter(1))\n\n# Print the result\nprint(\"The AS Path with the strictest preference is of length %d, with %d occurrences in the past 24 hours\" %\n(max_pref_aspath[0], max_pref_aspath[1]))",
        "most_similar_instructions": {
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.30434782608695654,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.30434782608695654,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.2807017543859649,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.27450980392156865,
            "Retrieve BGP updates from route-views.linx and shaoxing to study the AS communities as well as the preferences of certain ASes.": 0.2727272727272727,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.27027027027027023,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.2666666666666666,
            "Generate a visualization of AS paths from AS13335 Cloudflare, limited to the last 1000 routes observed.": 0.2631578947368421,
            "Collect BGP announcement data for IPv4 prefix 198.51.100.0/24 from the RouteViews2 collector. Analyze the data to find out which AS is the origin of the prefix and which AS path is used by the prefix.": 0.2622950819672131,
            "Access live stream data sources and extract records related to routes propagated from AS65432. Collect BGP data from route-views.isc, route-views.jinx, and route-views.kixp collectors. Output the records with their AS-Path and Communities information.": 0.2622950819672131
        },
        "avg_similarity_score": 0.15833169783085924
    },
    {
        "instruction": "Collect all announcements from AS56516 using the RRC09 collector over the past week. Filter the announcements to show only announced changes for which the length of the AS Path is increasing.",
        "input": "Time window: Last 7 days\nCollectors: rrc09\nFilter: path longer",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Get current UTC time to calculate time window\ncurrent_utc = datetime.utcnow()\n\n# Define 7 days time window\nfrom_time = (current_utc - timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = current_utc.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the Stream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"rrc09\"],\n    filter=\"peer 56516 and type updates and path longer\"\n)\n\n# Dictionary to store the announcements logged by type\nannouncements = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n  for elem in rec:\n    prefix = elem.fields[\"prefix\"]\n    path = elem.fields[\"as-path\"]\n    announcement_type = elem.type\n    announcements[announcement_type].append(\"%s => %s\" % (prefix, path))\n\n# Print the results\nprint(\"Announced Changes with increasing path length:\")\nfor as_change in announcements[\"A\"]:\n  print(\"%s\" % as_change)",
        "most_similar_instructions": {
            "Collect BGP announcement data for IPv4 prefix 198.51.100.0/24 from the RouteViews2 collector. Analyze the data to find out which AS is the origin of the prefix and which AS path is used by the prefix.": 0.3714285714285714,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3214285714285714,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.3103448275862069,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3050847457627119,
            "Collect and analyze all AS Paths from Route Views collector 'route-views.amsix' to identify which AS Path has the strictest preference.": 0.3018867924528302,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.30000000000000004,
            "Collect BGP records, exported from ASN 63572, and analyze the origin ASN attached to the BGP update records. Create a visualization of the AS path topology and record the connectivity between ASNs.": 0.28571428571428575,
            "Collect all unannounced announcements from the RIS collector in London (rrc03).": 0.2857142857142857,
            "Obtain BGP updates from a collector named rrc00 for the past week for all prefixes with time stamp greater than 2020-04-23 11:15:00 UTC. Measure the AS Path Inflation and display the AS Path Length Histogram.": 0.2857142857142857,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.2758620689655172
        },
        "avg_similarity_score": 0.16329008652919658
    },
    {
        "instruction": "Access live stream data sources from five different RouteViews collectors to identify any significant differences related to peers, advertisement or withdrawn prefixes.",
        "input": "Time window: Last 5 minutes\nCollectors: route-views2, route-views3, route-views4, route-views6, route-views7",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Get current UTC time to calculate time window\ncurrent_utc = datetime.utcnow()\n\n# Define 5 mins time window\nfrom_time = (current_utc - timedelta(minutes=5)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = current_utc.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the Stream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\",\n                \"route-views6\", \"route-views7\"]\n)\n\n# Dictionary to store BGP data of the collectors\nbgp_dict = defaultdict(list)\n\n# Fetch collectors each time for 5 mins\nfor rec in stream.records():\n    for elem in rec:\n  collectors = elem.collector\n  peers = elem.get_peer_address()\n  announcements_withdrawals = elem.fields['prefix'], elem.type\n  bgp_dict[collectors].append([peers, announcements_withdrawals])\n\n# Print the results\nprint(\"Peer, Announcement & Withdrawal information of the collectors in the last 5 mins\")\nfor key, value in bgp_dict.items():\n    print(\"Collector: %s\" % key)\n    for item in value:\n  peers = item[0]\n  announcement_withdrawal = item[1]\n  print(\"Peer: %s | Announcement/Withdrawal: %s\" % (peers, announcement_withdrawal))\n  print(\"---------\")",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.43243243243243246,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.4,
            "Collect and access live stream data from the RouteViews collectors during the past week to detect any prefix inflation for AS Paths containing ASN 20940.": 0.3829787234042554,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.380952380952381,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.3684210526315789,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.36363636363636365,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3555555555555555,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.35000000000000003,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.34782608695652173,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.3255813953488372
        },
        "avg_similarity_score": 0.13215768822005672
    },
    {
        "instruction": "Use PyBGPStream with the \"from_time\" parameter to measure AS path inflation by monitoring the growth in the number of AS paths over a certain period.",
        "input": "Time window: Last 24 hours\nNo input",
        "output": "import pybgpstream\nfrom collections import defaultdict\nfrom datetime import datetime, timedelta\n\n# Get current UTC time to calculate time window\ncurrent_utc = datetime.utcnow()\n\n# Define 24 hrs time window\nfrom_time = (current_utc - timedelta(hours=24)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = current_utc.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the Stream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n)\n\n# Dictionary to store AS Path lengths and count\ndict_aspath_count = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  if elem.type == \"A\":  # BGP announcements\n    dict_aspath_count[len(elem.fields[\"as-path\"].split())] += 1\n\n# Measure AS Path inflation\ninflation_rate = ((\n    (max(dict_aspath_count.keys()) - min(dict_aspath_count.keys()))\n                    / min(dict_aspath_count.keys())) * 100)\n\n# Print the result\nprint(\"AS Path inflation over the last 24 hours is %.2f%%\" % inflation_rate)",
        "most_similar_instructions": {
            "Use PyBGPStream to measure AS path inflation.": 0.42424242424242425,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.38461538461538464,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.34782608695652173,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.3414634146341463,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.33962264150943394,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.3111111111111111,
            "Use PyBGPStream to analyze the communities present in the Internet's routing table.": 0.30769230769230776,
            "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.": 0.30303030303030304,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.3,
            "Measure AS Path Inflation phenomenon between October 6, 2018, and October 13, 2018, and visualize the results as a bar chart.": 0.2978723404255319
        },
        "avg_similarity_score": 0.17304320028789166
    },
    {
        "instruction": "Collect data from RIS collectors. Analyze AS Relationship network and extract top K AS-pairs where there are a large number of BGP prefix exchanges between them.",
        "input": "Time window: April 26, 2018, 00:00:00 to April 27, 2018, 00:00:00\nCollectors: ris-routeviews, ris-rrc01, ris-rrc02, ris-rrc03",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2018-04-26 00:00:00\"\nend_time = \"2018-04-27 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-routeviews\", \"ris-rrc01\", \"ris-rrc02\", \"ris-rrc03\"],\n    record_type=\"updates\"\n)\n\n# Create an empty dictionary to store AS relationships\nas_relation = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Store only Announcements and Withdrawals\n   if elem.type not in ['A', 'W']:\n  continue\n\n   # Get the AS Path\n   as_path = elem.fields[\"as-path\"].split()\n\n   # Get the AS relationships\n   if len(as_path) > 1:\n  as_from = as_path[-2]\n  as_to = as_path[-1]\n\n  # Store the AS relationships\n  if (as_from, as_to) not in as_relation:\n as_relation[(as_from, as_to)] = 0\n  as_relation[(as_from, as_to)] += 1\n\n# Count the number of AS-pairs\ncounted = Counter(as_relation)\n\n# Sort the AS-pairs by count\nsorted_counted = sorted(counted.items(), key=lambda x: x[1], reverse=True)\n\n# Print top K AS-pairs sorted by count\ntop_k = 10\nprint('Top {} AS-pairs:'.format(top_k))\nfor i, pair in enumerate(sorted_counted):\n if i > (top_k - 1):\n  break\n print('{}. AS{} <-> AS{}: Count = {}'.format(i+1, pair[0][0], pair[0][1], pair[1]))",
        "most_similar_instructions": {
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.37037037037037035,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.32432432432432434,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.30769230769230765,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.29268292682926833,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.2909090909090909,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.2857142857142857,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.2857142857142857,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.2857142857142857,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.25806451612903225,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.2545454545454545
        },
        "avg_similarity_score": 0.15074841913136172
    },
    {
        "instruction": "Use the BGPStream library to create a topological visualization of the ASes involved in the hijacking incident.",
        "input": "Time window: April 25, 2018, 23:00:00 to April 26, 2018, 23:00:00\nCollectors: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Initialize a NetworkX graph object\nG = nx.Graph()\n\n# Define the time window around the incident\nstart_time = \"2018-04-25 23:00:00\"\nend_time = \"2018-04-26 23:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Get the AS Path\n   as_path = elem.fields[\"as-path\"].split()\n\n   # Get the AS relationships\n   for i, asn in enumerate(as_path):\n  # Get the current AS and the previous AS (each AS counts once no matter how many times it passes in the AS path)\n  if i == 0:\n   prev_asn = asn\n   continue\n  curr_asn = asn\n  G.add_edge(prev_asn, curr_asn)\n  prev_asn = curr_asn\n\n# Plot the graph\nplt.figure(figsize=(12, 8))\nplt.title('AS Hijacking Incident (April 2018)')\npos = nx.spring_layout(G)\nnx.draw(G, pos, node_color='red', node_size=2000, with_labels=True, font_color='white')\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the communities present in the Internet's routing table.": 0.33333333333333337,
            "Collect BGP records, exported from ASN 63572, and analyze the origin ASN attached to the BGP update records. Create a visualization of the AS path topology and record the connectivity between ASNs.": 0.32653061224489793,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.30769230769230765,
            "Use PyBGPStream with the \"from_time\" parameter to measure AS path inflation by monitoring the growth in the number of AS paths over a certain period.": 0.2790697674418605,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.27586206896551724,
            "Analyze the AS paths of communities in the networks of RouteViews geographically to gain insights into topological characteristics of the Internet.": 0.2631578947368421,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.2580645161290323,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.25,
            "Collect and analyze live stream data from multiple RouteViews collectors during the last day to produce a graphical chart of the AS relationships among the top-10 ISPs over the last day.": 0.24489795918367344,
            "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.": 0.24390243902439027
        },
        "avg_similarity_score": 0.1393613761267619
    },
    {
        "instruction": "Access live stream data sources from route-views, ris, and bgpmon for BGP updates between April 25, 2018, and April 26, 2018. Identify and measure AS path inflation for hijacked prefixes from AS10297 (eNet).",
        "input": "Time window: April 25, 2018, 00:00:00 to April 26, 2018, 00:00:00\nCollectors: route-views2, route-views3, bgpmon, ris-ripe",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2018-04-25 00:00:00\"\nend_time = \"2018-04-26 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"bgpmon\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Create an empty dictionaries to store AS paths and AS path lengths\nas_paths = {}\nas_path_lengths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   # Store only Announcements and Withdrawals\n   if elem.type not in ['A', 'W']:\n  continue\n\n   # Get the AS Path\n   as_path = elem.fields[\"as-path\"].split()\n   path_length = len(as_path) - 1  # minus 1 for the origin AS\n\n   # Get the AS relationships\n   if len(as_path) > 0:\n  origin_as = as_path[-1]\n\n  # Store AS paths\n  if origin_as not in as_paths:\n as_paths[origin_as] = []\n  as_paths[origin_as].append(as_path)\n\n  # Store AS path lengths\n  if origin_as not in as_path_lengths:\n as_path_lengths[origin_as] = []\n  as_path_lengths[origin_as].append(path_length)\n\n# Measure AS path inflation\nfor origin_as, lengths in as_path_lengths.items():\n if origin_as == \"10297\":\n  # Get the path length means\n  mean_length_all = sum(lengths) / len(lengths)\n  mean_length_uniq = sum(set(lengths)) / len(set(lengths))\n\n  # Calculate the AS path inflation\n  inflation = mean_length_all / mean_length_uniq\n  print('AS10297 Path Length Inflation: {}'.format(inflation))\n\n# Output the AS paths\nfor origin_as, paths in as_paths.items():\n if origin_as == \"10297\":\n  print('AS10297 AS Paths:')\n  for path in paths:\n   print('  {}'.format(' -> '.join(path)))",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.44000000000000006,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.41379310344827586,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.41379310344827586,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.41269841269841273,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.40816326530612246,
            "Access live stream data sources from the route-views2 collector and study the communities in BGP update data between April 30, 2017, and May 2, 2017.": 0.4000000000000001,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3829787234042553,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.3728813559322034,
            "Access the live stream data source from the route-views4 collector. Collect BGP update data for July 20, 2018. Identify BGP hijacking activity of AS25152 (eNet).": 0.33333333333333337,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.326530612244898
        },
        "avg_similarity_score": 0.17287725165311205
    },
    {
        "instruction": "Perform MOAS (Multiple Origin AS) prefix analysis for sponsorships of prefixes from RouteViews collectors.",
        "input": "Time window: <noinput>\nCollectors: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Create a dictionary to store the prefix origin ASes\nprefix_origins = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type != 'A':\n  continue\n\n   # Get the AS Path\n   as_path = elem.fields[\"as-path\"].split()\n   origin_as = as_path[-1]\n   prefix = elem.fields[\"prefix\"]\n\n   # Store the prefix origin ASes\n   if prefix not in prefix_origins:\n  prefix_origins[prefix] = []\n   if origin_as not in prefix_origins[prefix]:\n  prefix_origins[prefix].append(origin_as)\n\n# Print the prefixes with multiple origin ASes\nfor prefix, origins in prefix_origins.items():\n if len(origins) > 1:\n  print('{}: {}'.format(prefix, ', '.join(origins)))",
        "most_similar_instructions": {
            "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.": 0.35714285714285715,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.34285714285714286,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.3333333333333333,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.3225806451612903,
            "Analyze MOAS Prefixes and their related ASes from RouteViews collectors for the year 2010 using Event Correlation.": 0.3225806451612903,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.30434782608695654,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.29629629629629634,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.2941176470588235,
            "Retrieve data associated with the AS 16204 and analyze the Maximum Origin AS (MOAS) prefixes. Collect data from RIS and RouteViews collectors with the filter \"peer 16204\".": 0.29268292682926833,
            "Retrieve the full list of active Measuring AS (MOAS) prefixes from the Routeviews collector.": 0.2857142857142857
        },
        "avg_similarity_score": 0.12789358447220725
    },
    {
        "instruction": "Using the PyBGPStream library, collect MOAS prefixes data from Route-Views4 collector, for a time window of 04:00:00 to 08:00:00 on November 28, 2004. Visualize the count of unique MOAS prefixes and the ASNs that originated them in a bar chart.",
        "input": "Time window: November 28, 2004, 04:00:00 to November 28, 2004, 08:00:00\nCollector: route-views4",
        "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom datetime import datetime\n\n# Define the time window\nstart_time = \"2004-11-28 04:00:00\"\nend_time = \"2004-11-28 08:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views4\"],\n    record_type=\"updates\"\n)\n\n# Counters to store the MOAS prefixes and their src ASN\nmoas_prefixes = Counter()\nasn_src_counter = Counter()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            prefix = elem.fields[\"prefix\"]\n            as_path = elem.fields[\"as-path\"].split()\n            origin_as = as_path[-1]  # Get the origin AS of the prefix\n            moas_prefixes[prefix] += 1\n            asn_src_counter[origin_as] += 1\n\n# Data to plot\nlabel = list(moas_prefixes.keys())\ncount = list(moas_prefixes.values())\nadd_label = list(asn_src_counter.keys())\nadd_count = list(asn_src_counter.values())\n\n# Create the bar chart\nfig, ax = plt.subplots()\nax.bar(label, count, width=0.8, label=\"MOAS Prefixes\")\nax.bar(add_label, add_count, width=0.8, bottom=count, label=\"Origin ASN\")\nax.set_xlabel('Prefix/ASN')\nax.set_ylabel('Count')\nax.set_title('MOAS Prefixes and their Origin ASN')\nax.legend()\n\nfig.tight_layout()\nplt.show()",
        "most_similar_instructions": {
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.35443037974683544,
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.3368421052631579,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.3333333333333333,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.3255813953488372,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.3177570093457944,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.31707317073170727,
            "Compute the aggregate metrics of global AS relationships using MOAS based prefixes for the time window between April 17, 2015, 00:00:00 and April 18, 2015, 00:00:00. Visualize the relationship count by AS and AS-Path (e.g. Longest-Prefix Match)": 0.31460674157303375,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.30769230769230765,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.30188679245283023
        },
        "avg_similarity_score": 0.17950534126494241
    },
    {
        "instruction": "Using MOAS, collect records from the RouteViews collector and measure AS Path inflation from AS10297 (eNet) for the month of August 2018.",
        "input": "Time window: August 1, 2018, 00:00:00 to August 31, 2018, 00:00:00\nCollectors: route-views2\nFilter: Type=Moas, ASN=10297",
        "output": "import pybgpstream\nfrom collections import defaultdict\n\n# Define the time window\nstart_time = \"2018-08-01 00:00:00\"\nend_time = \"2018-08-31 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\"],\n    record_type=\"updates\",\n    filters=[('type', 'moas'), ('asn', '10297')]\n)\n\n# Dictionary to store the AS paths per BGP record\nas_path_dict = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   as_path = elem.fields[\"as-path\"].split()\n   as_path_dict[as_path[0]].append(as_path)\n\n# Collect all the AS Paths\nall_paths = []\nfor _, paths in as_path_dict.items():\n    for path in paths:\n   all_paths.append(path)\n\n# Measure AS Path inflation\nas_path_inflation_count = 0\nfor path in all_paths:\n    if len(path) > 1:\n as_path_inflation_count += 1\n\n# Calculate the percentage of AS Path Inflation\nas_path_inflation_percentage = (as_path_inflation_count / len(all_paths)) * 100\n\nprint(\"AS Path Inflation Percentage: %.2f%%\" % as_path_inflation_percentage)",
        "most_similar_instructions": {
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.5000000000000001,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.45,
            "Measure AS path inflation from the RouteViews collector.": 0.39999999999999997,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.380952380952381,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.37931034482758624,
            "Fetch MOAS prefixes from RouteViews project's Jan 1, 2020, data and analyse AS path inflation.": 0.3684210526315789,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.36000000000000004,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.35294117647058826,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.3529411764705882,
            "Study the communities of ASN 65002 for the month of April 2018.": 0.3529411764705882
        },
        "avg_similarity_score": 0.19747995930071366
    },
    {
        "instruction": "Collect BGP update data from November 21, 2019, to December 12, 2019, from RIPE RIS RouteCollectors to analyse v6 day one customers for ASN 3356.",
        "input": "Time window: November 21, 2019, 00:00:00 to December 12, 2019, 00:00:00\nCollectors: route-collectors\nFilter: Type=Updates, ASN=3356",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-11-21 00:00:00\"\nend_time = \"2019-12-12 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-collectors\"],\n    record_type=\"updates\",\n    filter=\"type updates and asn 3356\"\n)\n\n# Initialize a set to store unique IPv6 customers\nv6_day_one_customers_set = set()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.fields[\"peer-asn\"] not in v6_day_one_customers_set:\n     if elem.fields[\"as-path\"][:2] == '_3':\n         v6_day_one_customers_set.add(elem.fields[\"peer-asn\"])\n\n# Print the unique IPv6 customers\nprint(\"Unique IPv6 customers for ASN 3356:\")\nfor customer in v6_day_one_customers_set:\n    print(customer)",
        "most_similar_instructions": {
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.29629629629629634,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.2909090909090909,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.2857142857142857,
            "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.": 0.28125,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.2666666666666666,
            "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.": 0.2641509433962264,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.2631578947368421,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.25925925925925924,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.25641025641025644,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.2553191489361702
        },
        "avg_similarity_score": 0.1197459885694814
    },
    {
        "instruction": "Access live stream data sources to analyse the AS relationships from October 25, 2019, to November 5, 2019 by collecting records from RouteViews and RIPE RIS.",
        "input": "Time window: October 25, 2019, 00:00:00 to November 5, 2019, 23:59:59\nCollectors: route-views2, ris-ripe",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2019-10-25 00:00:00\"\nend_time = \"2019-11-05 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the AS relationships\nas_relationships = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   as_path = elem.fields[\"as-path\"].split()\n   origin_asn = as_path[-1]\n   \n   # Store the AS relationships\n   for asn in as_path[1:]:\n if (origin_asn, asn) not in as_relationships:\n     as_relationships[(origin_asn, asn)] = 0\n  as_relationships[(origin_asn, asn)] += 1\n\n# Print the AS relationships\nprint(\"AS Relationships:\")\nfor origin_asn, asn in as_relationships.keys():\n    print(f\"  {origin_asn} -> {asn}: {as_relationships[(origin_asn, asn)]}\")",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.3902439024390244,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.38461538461538464,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.37500000000000006,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.3636363636363637,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.3589743589743589,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.34782608695652173,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.33333333333333337,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.32653061224489793,
            "Access live stream data sources and analyze the communities for AS1234.": 0.3243243243243243,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.32
        },
        "avg_similarity_score": 0.16545597722488758
    },
    {
        "instruction": "Analyze the number of AS Groups and AS relationships for the IPV4 prefix 1.0.0.0/8 by using the RIB data from RIPE RIS collectors.",
        "input": "Project: ripe\nCollectors: ris-rrc00, ris-rrc01, ris-rrc02, ris-rrc03, ris-rrc04, ris-rrc05, ris-rrc06, ris-rrc07\nRecord Type: ribs\nFilter: prefix more 1.0.0.0/8",
        "output": "import pybgpstream\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Set data collection parameters \nstream.add_filter('project','ripe')\nstream.add_filter('collector','ris-rrc00,ris-rrc01,ris-rrc02,ris-rrc03,ris-rrc04,ris-rrc05,ris-rrc06,ris-rrc07')\nstream.add_filter('record_type', 'ribs')\nstream.add_filter('prefix more', '1.0.0.0/8')\n\n# Create a dictionary to store AS Groups and AS Relationships\nas_groups = defaultdict(set)\nas_relationships = defaultdict(set)\n\n# Read the data and process it\nfor rec in stream.get_next():\n    \n    # Parse the data\n    ... (rest of the code to extract the AS groups and AS relationships from the data)\n\n# Plot and show the results\nplt.bar(range(len(as_groups)), list(as_groups.values()), align='center')\nplt.xlabel('AS Groups')\nplt.xticks(range(len(as_groups)), list(as_groups.keys()), rotation=45)\nplt.ylabel('Number of Occurrences')\nplt.title('Number of AS Groups for the Prefix 1.0.0.0/8')\n\nplt.figure()\nplt.scatter(x = list(as_relationships.keys()), y = list(as_relationships.values()))\nplt.xlabel('AS Relationships')\nplt.ylabel('Number of Occurrences')\nplt.title('Number of AS Relationships for the Prefix 1.0.0.0/8')\n\nplt.show()",
        "most_similar_instructions": {
            "Find the origin AS (ASN) for the prefix 1.0.0.0/16 using RIB entries collected from the Routeviews.sydney project.": 0.4897959183673469,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.43478260869565216,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.4186046511627907,
            "Analyze the relationship between AS paths between two routes for the 10.0.0.0/8 prefix in the Routeviews collectors using path length or preference analysis": 0.4074074074074074,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.39999999999999997,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.39344262295081966,
            "Analyze the relationship between AS196488 and AS12640 using prefixes from RIS collectors.": 0.358974358974359,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.35294117647058826,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.3508771929824561,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17441557839157984
    },
    {
        "instruction": "Access live stream data sources and perform a security analysis by examining the path length and preference count for the Prefix 81.185.112.0/22",
        "input": "Project: ris\nCollectors: ris-rrc01\nRecord Type: Updates\nFilter: prefix more 81.185.112.0/22",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Set collection parameters for the stream\nstream.add_filter('project','ris')\nstream.add_filter('collector','ris-rrc01')\nstream.add_filter('record_type', 'updates')\nstream.add_filter('prefix more', '81.185.112.0/22')\n\n# Initialise the data variables\npath_lengths = []\npreferences = []\n\n# Read the data and process it\nfor rec in stream.get_next():\n\n    # Parse the data\n    ... (rest of the code to analyse the path length and preference count)\n\n# Plot and show the results\nplt.hist(path_lengths, bins=30, range=(0,30), facecolor='blue', alpha=0.75)\nplt.xlabel('Path length (in AS hops)')\nplt.ylabel('Number of occurrences')\nplt.title('Path length security analysis - Prefix 81.185.112.0/22')\n\nplt.figure()\nplt.hist(preferences, bins=10, range=(0,10), facecolor='green', alpha=0.75)\nplt.xlabel('Preferences')\nplt.ylabel('Number of occurrences')\nplt.title('Preferences security analysis - Prefix 81.185.112.0/22')\n\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.44897959183673475,
            "Access live stream data sources and analyze the communities for AS1234.": 0.43243243243243246,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4102564102564103,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.39215686274509803,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.380952380952381,
            "Access live stream data sources from PyBGPStream and study the communities associated with the announcement. Perform the analysis during every 15 minutes interval and visualize the results.": 0.3773584905660377,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.372093023255814,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.3636363636363637,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.3636363636363637,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.3636363636363637
        },
        "avg_similarity_score": 0.17460258770158438
    },
    {
        "instruction": "Access live stream data sources and perform a MOAS analysis by examining the AS paths of BGP enrichment prefixes.",
        "input": "Project: ris\nCollectors: ris-rrc00, ris-rrc01, ris-rrc02, ris-rrc03, ris-rrc04, ris-rrc05, ris-rrc06, ris-rrc07\nRecord Type: Updates\nFilter: <none>",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Set collection parameters for the stream\nstream.add_filter('project','ris')\nstream.add_filter('collector','ris-rrc00,ris-rrc01,ris-rrc02,ris-rrc03,ris-rrc04,ris-rrc05,ris-rrc06,ris-rrc07')\nstream.add_filter('record_type', 'updates')\n\n# Create a dictionary to store AS Paths of BGP enrichment prefixes\nas_paths = defaultdict(set)\n\n# Read the data and process it\nfor rec in stream.get_next():\n    \n    # Parse the data\n    ... (rest of the code to extract the AS Paths from the data)\n\n# Plot and show the results\nplt.hist(list(as_paths.values()), bins=30, range=(0,30), facecolor='blue', alpha=0.75)\nplt.xlabel('Path length (in AS hops)')\nplt.ylabel('Number of occurrences')\nplt.title('MOAS Analysis of BGP enrichment prefixes')\n\nplt.show()",
        "most_similar_instructions": {
            "Access live stream data sources and perform a security analysis by examining the path length and preference count for the Prefix 81.185.112.0/22": 0.5333333333333333,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.5,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.47619047619047616,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4666666666666667,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4375,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.43243243243243246,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.42857142857142855,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4186046511627907,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.4166666666666667,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.4166666666666667
        },
        "avg_similarity_score": 0.18453900300552833
    },
    {
        "instruction": "Analyze the path length of BGP announcements routed through AS 619 for the IPV6 prefix 2001:0DB8::/32 by using the RIB updates from RouteViews collectors.",
        "input": "Project: route-views\nCollectors: route-views2, route-views3, route-views4, route-views6\nRecord Type: Updates\nFilter: ipversion 6 and peer 619 and prefix more 2001:0DB8::/32",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Set collection parameters for the stream\nstream.add_filter('project','route-views')\nstream.add_filter('collector','route-views2, route-views3, route-views4,route-views6')\nstream.add_filter('record_type', 'updates')\nstream.add_filter('ipversion', 6)\nstream.add_filter('peer', 619)\nstream.add_filter('prefix more', '2001:0DB8::/32')\n\n# Initialise the data variable\npath_lengths = []\n\n# Read the data and process it\nfor rec in stream.get_next():\n\n    # Parse the data\n    ... (rest of the code to analyse the path length)\n\n# Plot and show the results\nplt.hist(path_lengths, bins=30, range=(0,30), facecolor='blue', alpha=0.75)\nplt.xlabel('Path length (in AS hops)')\nplt.ylabel('Number of occurrences')\nplt.title('Path length analysis - AS 619 and Prefix 2001:0DB8::/32')\n\nplt.show()",
        "most_similar_instructions": {
            "Analyze the number of AS Groups and AS relationships for the IPV4 prefix 1.0.0.0/8 by using the RIB data from RIPE RIS collectors.": 0.49056603773584906,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.4444444444444445,
            "Analyze the path length or preference of each AS in the Internet using PyBGPStream and identify the BGP updates from each RIS route collector.": 0.43999999999999995,
            "Find the origin AS (ASN) for the prefix 1.0.0.0/16 using RIB entries collected from the Routeviews.sydney project.": 0.37500000000000006,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.34782608695652173,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.3404255319148936,
            "Analyze the relationship between AS paths between two routes for the 10.0.0.0/8 prefix in the Routeviews collectors using path length or preference analysis": 0.33962264150943394,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.33333333333333337,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.33333333333333337,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.3111111111111111
        },
        "avg_similarity_score": 0.1704025614339354
    },
    {
        "instruction": "Collect announcement data from the RouteViews collector for the IPV4 prefix 1.2.4.0/22 and examine the ASN communities associated with it.",
        "input": "Project: route-views\nCollectors: route-views2 \nRecord Type: Updates\nFilter: prefix more 1.2.4.0/22",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream()\n\n# Set collection parameters for the stream\nstream.add_filter('project','route-views')\nstream.add_filter('collector','route-views2')\nstream.add_filter('record_type', 'updates')\nstream.add_filter('prefix more', '1.2.4.0/22')\n\n# Create a dictionary to store the ASN communities associated with the prefix\nasn_communities = defaultdict(set)\n\n# Read the data and process it\nfor rec in stream.get_next():\n    \n    # Parse the data\n   ... (rest of the code to extract the ASN communities associated with the prefix)\n\n# Plot and show the results\nplt.bar(range(len(asn_communities)), list(asn_communities.values()), align='center')\nplt.xlabel('ASN Communities')\nplt.xticks(range(len(asn_communities)), list(asn_communities.keys()), rotation=45)\nplt.ylabel('Number of occurrences')\nplt.title('ASN Communities associated with the prefix 1.2.4.0/22')\n\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.5,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.4230769230769231,
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.41379310344827586,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.4074074074074074,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.3829787234042554,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.380952380952381,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.3636363636363636,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.35294117647058826,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3461538461538462,
            "Compute the average AS Path inflation for the prefix 1.2.3.0/22 and filter based on the AS path using regular expressions (ex. '_4455_'). Use data from the RRC06 and RIS collectors.": 0.3448275862068966
        },
        "avg_similarity_score": 0.1961616680130731
    },
    {
        "instruction": "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.",
        "input": "Time window: 30 day\nCollector: route-views.bboi\nRecord type: updates\nFilter: path \"_3549_\"",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window\ntime_window = 30\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=datetime.utcnow() - timedelta(time_window),\n    until_time=datetime.utcnow(),\n    collectors=[\"route-views.bboi\"],\n    record_type=\"updates\",\n    filter=\"path _3549_\"\n)\n\n# Keys are dates, values are AS path lengths\nas_path_lengths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  timestamp_day = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d')\n  as_path_lengths[timestamp_day] += len(elem.fields['as-path'].split())\n\n# Summarize the data\nprint(\"Date   | Average AS Path Length\")\nprint(\"-\" * 35)\n\nfor day in sorted(as_path_lengths.keys()):\n    print(f\"{day:10} | {as_path_lengths[day]/100:17.2f}\")\n\n# Visualize the data\nplt.bar(list(as_path_lengths.keys()), as_path_lengths.values())\nplt.title(\"AS Path Inflation (30 days)\")\nplt.ylabel(\"AS Path Length\")\nplt.savefig(\"AS_Path_Inflation.png\")\n\n# Save the results in a text document\nwith open('AS_path_inflation_30day.txt', 'w') as output_file:\n    output_file.write(\"Date   | Average AS Path Length\\n\")\n    output_file.write(\"-\" * 35 + \"\\n\")\n    for day in sorted(as_path_lengths.keys()):\n        output_file.write(f\"{day:10} | {as_path_lengths[day]/100:17.2f}\\n\")",
        "most_similar_instructions": {
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.4230769230769231,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.42105263157894735,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.38095238095238093,
            "Measure the AS path inflation using PyBGPStream to collect data from route-views.jinx collector.": 0.37209302325581395,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.3684210526315789,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.35714285714285715,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.34782608695652173,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.3448275862068965,
            "Collect BGP update records for prefix 192.168.0.0/16 from the collector rrc05 and analyze the AS Path inflation of the prefix for the 2020-01-15 time window starting from 16:00:00.": 0.34375000000000006,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.3380281690140845
        },
        "avg_similarity_score": 0.1777851959183462
    },
    {
        "instruction": "Use PyBGPStream library to access the live stream data sources and measure the number of unique ASNs that have made at least 10 announcements in the past 12 hours.",
        "input": "Time window: 12 hours\nRecord type: updates\n<noinput>",
        "output": "import pybgpstream\nimport datetime\nfrom collections import defaultdict\n\n# Define time window for the last 12 hours\ntime_window = 12\nstart_time = datetime.datetime.utcnow() - datetime.timedelta(hours=time_window)\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    record_type=\"updates\"\n)\n\n# Count the number of unique ASNs with at least 10 announcements\nann_counts = defaultdict(int)\nfor rec in stream.records():\n    for elem in rec:\n  asn = elem.fields['as-path'].split()[-1]\n  if asn.isdigit():\n      ann_counts[asn] += 1\n\ncount = 0\nfor asn in ann_counts:\n    if ann_counts[asn] >= 10:\n  count += 1\n\nprint(f\"Number of unique ASNs with at least 10 announcements in the past {time_window} hours: {count}\")\n\n# Save the results in a text document\nwith open('unique_ASNs_10_announcements.txt', 'w') as output_file:\n    output_file.write(f\"Number of unique ASNs with at least 10 announcements in the past {time_window} hours: {count}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.5217391304347826,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.47619047619047616,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.40816326530612246,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.39999999999999997,
            "Access live stream data sources available through PyBGPStream and generate a report on top five ASes that announced highest number of IPv6 prefixes over the past 24 hours.": 0.3859649122807017,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.3793103448275862,
            "Access live stream data sources and obtain the list of ASes that become visible for the first time within the day using the ris collectors.": 0.3703703703703704,
            "Use PyBGPStream to access live stream data sources, and study the topology changes between March 11th, 2020 00:00 and March 11th, 2020 06:00 UTC.": 0.3636363636363637,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.36363636363636365,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.35294117647058826
        },
        "avg_similarity_score": 0.17620046742632423
    },
    {
        "instruction": "Collect BGP record data from route-views.nwax collector. Perform a topological analysis to compute the average path length associated with the AS paths contained in the records, and include the computed paths that are longer than 8 ASes in length.",
        "input": "Collector: route-views.nwax\nRecord type: ribs\n<noinput>",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Inialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=datetime.utcnow(),\n    collectors=[\"route-views.nwax\"],\n    record_type=\"ribs\"\n)\n\n# Compute the path length for each AS path\npath_lengths = []\nfor rec in stream.records():\n    for elem in rec:\n   as_path = elem.fields['as-path'].split()\n   if len(as_path) > 8:\n  path_lengths.append(len(as_path))\n\n# Compute the average\navg_path_length = sum(path_lengths)/len(path_lengths)\nprint(f\"Average path length: {avg_path_length:.2f}\")\n\n# Visualize the data\nplt.hist(path_lengths,bins=20)\nplt.title(\"Path Length Distribution\")\nplt.xlabel(\"Path Length (number of ASes)\")\nplt.savefig(\"Path_length_distribution.png\")\n\n# Save the results in a text document\nwith open('path_lengths_analysis.txt', 'w') as output_file:\n    output_file.write(f\"Average path length: {avg_path_length:.2f}\")",
        "most_similar_instructions": {
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3428571428571428,
            "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.": 0.3209876543209877,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.30769230769230765,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.2898550724637681,
            "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.": 0.2898550724637681,
            "Collect BGP updates from RIS RRC00 between July 1, 2015 and July 5, 2015. Perform topological analysis to identify the leading AS paths for the top 20 prefixes by using Multiple Origin AS (MOAS) prefixes.": 0.2894736842105263,
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.28865979381443296,
            "Retrieve BGP updates from route-views.linx and shaoxing to study the AS communities as well as the preferences of certain ASes.": 0.28571428571428575,
            "Measure AS path inflation from August 10, 2018 to August 11, 2018. Collect BGP update data from the rrc06 collector. Analyze AS paths and identify the most inflated AS in the network and the associated prefixes.": 0.28571428571428575,
            "Collect BGP update data for the past 24 hours. Extract MOAS (Multiple Origin AS) information and display it in a table, listing the prefixes and the associated AS paths.": 0.2857142857142857
        },
        "avg_similarity_score": 0.1692936901692768
    },
    {
        "instruction": "Using PyBGPStream library, collect BGP data from ris.ripe collector and analyze at least 10 MOAS (Multiple Origin AS) prefixes over the past 180 day time window.",
        "input": "Time window: 180 day \nCollector: ris.ripe\nRecord type: ribs\n<noinput>",
        "output": "import pybgpstream\nimport ipaddress\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Define the time window\ntime_window = 180\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=datetime.utcnow() - timedelta(time_window),\n    until_time=datetime.utcnow(),\n    collectors=[\"ris.ripe\"],\n    record_type=\"ribs\"\n)\n\n# Dictionary to store MOAS prefixes as keys and lists of\n# ASNs announcing them as values\nmoas = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n  pfx = ipaddress.IPv4Network(elem.fields['prefix'])\n  # Select only prefixes longer than /24\n  if pfx.prefixlen <= 24: \n      # Get the list of ASN that make announcements and filter out duplicates\n      asns = list(set(elem.fields['as-path'].split()))\n  # If more than one ASN is announcing the same prefix, it's a MOAS\n  if len(asns) > 1:\n      moas[str(pfx.with_prefixlen)].extend([asn for asn in asns if asn not in moas[str(pfx)]])\n\n# Analyze at least 10 MOAS prefixes\ncount = 0\nprint(\"Prefix     | Origin ASNs\")\nprint(\"-\" * 23)\nfor pfx in moas.keys():\n    if count == 10:\n  break\n    print(f\"{pfx:10} | {','.join(moas[pfx])}\")\n    count += 1\n\n# Save the results in a text document\nwith open('MOAS_prefixes_180day.txt', 'w') as output_file:\n    output_file.write(\"Prefix     | Origin ASNs\\n\")\n    output_file.write(\"-\" * 23 + \"\\n\")\n    count = 0\n    for pfx in moas.keys():\n        if count == 10:\n      break\n        output_file.write(f\"{pfx:10} | {','.join(moas[pfx])}\\n\")\n        count += 1",
        "most_similar_instructions": {
            "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.": 0.509090909090909,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.39999999999999997,
            "Collect BGP announcements from four BGPStream collectors and analyze the most common AS-paths for five different prefixes in the specified time window.": 0.39999999999999997,
            "Collect BGP announcements from multiple remote peers and retrieve information associated with the source of the announcements. Use data from RIS and RouteViews collectors to analyze the MOAS (Multiple Origin AS) prefixes representing the origin of an announcement.": 0.39999999999999997,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.38596491228070173,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.37837837837837834,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.36363636363636365,
            "Access a live stream data source using PyBGPStream and anlyze the top 5 most common MOAS (Multiple Origin AS) prefixes in the chosen stream.": 0.35294117647058826,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.32727272727272727,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.32653061224489793
        },
        "avg_similarity_score": 0.18977545226335577
    },
    {
        "instruction": "Using the PyBGPStream library, collect BGP announcements associated with the prefix 192.250.68.0/24, excluding AS paths that include ASN 64467.",
        "input": "Time Window: All records from 2020-01-01 to 2021-10-01\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nFilter:  Prefix exact 192.250.68.0/24 and Path !*_64467_*",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-01-01 00:00:00\"\nend_time = \"2021-10-01 00:00:00\"\n\n# Define the prefix\nprefix = \"192.250.68.0/24\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    filter=\"prefix exact %s and path !*_64467_*\" % (prefix,),\n    record_type=\"updates\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    print(\"Time: %s, Peer Address: %s\\nAS Path: %s\\n\" % (\n        datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'),\n        rec.peer_address,\n        rec.as_path\n    ))",
        "most_similar_instructions": {
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.3333333333333333,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.31818181818181823,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.31111111111111117,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.31111111111111117,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.3076923076923077,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.30188679245283023,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.28571428571428575,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.27906976744186046,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.27906976744186046,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.27777777777777773
        },
        "avg_similarity_score": 0.14410957073428515
    },
    {
        "instruction": "Using the PyBGPStream library, collect BGP MOAS records related to ASN 54472.",
        "input": "Time window: 2020-01-01 to 2021-10-01 \nCollectors: route-views2, route-views3, route-views4 \nFilter: Peer 54472 and Type MOAS",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-01-01 00:00:00\"\nend_time = \"2021-10-01 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    filter=\"peer 54472 and type moas\",\n    record_type=\"moas\"\n)\n\n# Process BGP records\nfor rec in stream.records():\n    print(\"Time: %s, Peer ASN: %s\\nMOAS Prefix: %s\\n\" % (\n        datetime.utcfromtimestamp(rec.time).strftime('%Y-%m-%d %H:%M:%S'),\n        rec.peer_asn,\n        rec.prefix\n    ))",
        "most_similar_instructions": {
            "Using the PyBGPStream library, collect BGP announcements associated with the prefix 192.250.68.0/24, excluding AS paths that include ASN 64467.": 0.4,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3555555555555555,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.3225806451612903,
            "Using PyBGPStream library, collect BGP data from ris.ripe collector and analyze at least 10 MOAS (Multiple Origin AS) prefixes over the past 180 day time window.": 0.30769230769230765,
            "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.": 0.3,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.29411764705882354,
            "Using PyBGPStream Library, collect BGP update data from RIS collectors to detect any anomalies in AS path length for prefix 205.157.0.0/16 for the past 24 hours.": 0.28571428571428575,
            "Access live stream data Sources and collect events related to ASN 21100. Perform network configuration and reliability analysis.": 0.26666666666666666,
            "Collect BGP update records from KIXP and RouteViews with matching prefixes which include ASN 65577:1234 in their AS paths.": 0.25,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.25
        },
        "avg_similarity_score": 0.11855064553345318
    },
    {
        "instruction": "Using the PyBGPStream library, measure AS inflation for ASN 32329.",
        "input": "Time window: 2020-01-01 to 2020-12-31 \nCollectors: route-views2, route-views3, route-views4 \nFilter: Peer 32329",
        "output": "import pybgpstream\nimport statistics\n\n# Define the time window\nstart_time = \"2020-01-01 00:00:00\"\nend_time = \"2020-12-31 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\"],\n    filter=\"peer 32329\",\n    record_type=\"updates\"\n)\n\n# Store the length of AS paths establishing BGP announcements from ASN 32329\nas_path_lengths = []\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.peer_asn == 32329 and \"as-path\" in elem.fields.keys():\n            as_path = elem.fields[\"as-path\"].split()\n            as_path_lengths.append(len(as_path))\n\n# Print the average AS Path length\nprint(\"Average AS Path Length: %s\" % (statistics.mean(as_path_lengths)))",
        "most_similar_instructions": {
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.6363636363636365,
            "Use PyBGPStream to measure AS path inflation.": 0.47058823529411764,
            "Using the PyBGPStream library, collect BGP MOAS records related to ASN 54472.": 0.45454545454545453,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.4347826086956522,
            "Using the PyBGPStream library and the RouteViews collectors, access live updates about AS-level destination prefixes from ASN 64496.": 0.41379310344827586,
            "Using MOAS, collect records from the RouteViews collector and measure AS Path inflation from AS10297 (eNet) for the month of August 2018.": 0.37499999999999994,
            "Using the PyBGPStream library, collect BGP announcements associated with the prefix 192.250.68.0/24, excluding AS paths that include ASN 64467.": 0.36363636363636365,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.3333333333333333,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3333333333333333,
            "Measure AS path inflation from the RouteViews collector.": 0.33333333333333326
        },
        "avg_similarity_score": 0.12733050012635502
    },
    {
        "instruction": "Using the PyBGPStream library, access the live RIS Stream to analyze the fluctuations in IPv4 routing table entries during the last month.",
        "input": "Time window: Last 30 days \nCollectors: ris-live",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Define the time window\nfrom_time = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')\nuntil_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=from_time,\n    until_time=until_time,\n    collectors=[\"ris-live\"],\n    record_type=\"ribs\"\n)\n\n# Store ipv4 to information\nipv4_counts = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    ipv4_counts[datetime.utcfromtimestamp(rec.time)] += 1\n\n# Plot fluctuation of IPv4 routing table entries\ndates = [d.strftime(\"%Y-%m-%d %H:%M:%S\") for d in sorted(ipv4_counts.keys())]\ncounts = [ipv4_counts[d] for d in sorted(ipv4_counts.keys())]\n\nplt.figure(figsize=(12, 6))\nplt.plot(dates, counts, marker='o', color='blue', linestyle='-')\nplt.xlabel('Time')\nplt.ylabel('Number of IPv4 Routing Table Entries')\nplt.title('Fluctuations in IPv4 Routing Table Entries')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the communities present in the Internet's routing table.": 0.39999999999999997,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.36363636363636365,
            "Use PyBGPStream library to access the live stream data sources and measure the number of unique ASNs that have made at least 10 announcements in the past 12 hours.": 0.35294117647058826,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.35000000000000003,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3428571428571428,
            "Access live stream data sources and study the communities associated with AS18044 (Andyne Computing) during the last 3 days.": 0.3414634146341463,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3404255319148936,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3333333333333333,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.3333333333333333,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3225806451612903
        },
        "avg_similarity_score": 0.15911626363124198
    },
    {
        "instruction": "Collect the BGP announcements and updates related to the MOAS prefix 195.70.160.0/20 during the time window from April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00.",
        "input": "Time window: April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00\nRecord Type: updates\nMOAS Prefix of Interest: 195.70.160.0/20",
        "output": "import pybgpstream\n\n# Define the time window around the MOAS incident\nstart_time = \"2019-04-18 00:00:00\"\nend_time = \"2019-04-20 23:59:00\"\n\n# Initialize the BGPStream and indicate the type of records to collect\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"updates\",\n)\n\n# Filter for announcements\nfor elem in stream:\n    if elem.type == \"A\" and elem.fields[\"prefix\"] == \"195.70.160.0/20\":\n        print(elem.fields[\"prefix\"], elem.fields[\"as-path\"], elem.fields[\"time\"])",
        "most_similar_instructions": {
            "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.": 0.4390243902439025,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.42857142857142855,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.41935483870967744,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.4155844155844156,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.41269841269841273,
            "Collect the ASN and prefix of all MOAS (Multiple Origin AS) prefixes that were announced during the time window from May 8, 2019, 8:00:00 UTC to May 8, 2019, 10:00:00 UTC. Collect from the RouteViews collector named route-views.jinx.": 0.38461538461538464,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.358974358974359,
            "Utilize the PyBGPStream library to analyze the AS relationships among networks in different countries. Specifically, compare and contrast the AS relationships among networks in the United States, Australia, and India for the time window from August 10, 2019, 00:00:00 UTC, to August 20, 2019, 00:00:00 UTC.": 0.35714285714285715,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.3478260869565218,
            "Measure AS path inflation on prefix 22.83.164.0/22 from the source ASN 52657 on route-views, bgp.he.net, and route-views.eqix. Collect the data for the time window from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and analyze the path inflation.": 0.34090909090909094
        },
        "avg_similarity_score": 0.1715415820412562
    },
    {
        "instruction": "Measure AS path inflation for the AS path '65013 3549 4609 14129 18436'.",
        "input": "AS path: 65013 3549 4609 14129 18436",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the AS path of interest\naspathstring = \"65013 3549 4609 14129 18436\"\n\n# Initialize the BGPStream and filter based on the AS path\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\",\n    filter=\"path %s\" % aspathstring\n)\n\n# Collect ASes and count occurrences\nases = []\nfor elem in stream:\n    ases.append(elem.fields['as-path'].split(' '))\n\n# Count occurrences of each AS\nc = Counter()\nfor ases in ases:\n    for asn in ases:\n        c[asn] += 1\n\n# Compute path inflation (number of announcements seen by each AS in the path)\npathinflation = []\nfor asn in aspathstring.split(' '):\n    pathinflation.append(c[asn])\n\n# Print the results\npath_length = len(aspathstring.split(' '))\nprint(\"AS path length: \", path_length)\nprint(\"Path Inflation: \", pathinflation)",
        "most_similar_instructions": {
            "Measure AS path inflation from the RouteViews collector.": 0.4761904761904762,
            "Calculate and visualize AS path inflation for AS path length 5 and below over the past day.": 0.4000000000000001,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.4,
            "Use PyBGPStream to measure AS path inflation.": 0.4,
            "Measure AS path inflation for ASN 15412 using data from RouteViews' CC project.": 0.38461538461538464,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.38461538461538464,
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.3636363636363637,
            "Monitor the network connections from RouteViews2 in order to measure AS path inflation in the given time window. Calculate and visualize the AS Path length distribution.": 0.3589743589743589,
            "Measure AS Path Inflation phenomenon between October 6, 2018, and October 13, 2018, and visualize the results as a bar chart.": 0.35294117647058826,
            "Using the PyBGPStream library, measure AS inflation for ASN 32329.": 0.34782608695652173
        },
        "avg_similarity_score": 0.1303342140870214
    },
    {
        "instruction": "Access live stream data sources from all RouteViews collectors.",
        "input": "",
        "output": "import pybgpstream\n# Initialize the BGPStream with all the RouteViews collectors\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\",\n    collectors=[\n      \"route-views2\",\n      \"route-views3\",\n      \"route-views4\",\n      \"route-views6\",\n      \"route-views.sbvl\",\n      \"route-views.wide\",\n     ]\n)\n# Check if any live data sources are available\nfor source in stream.sources():\n    print(source)",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.5833333333333334,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.56,
            "Access live stream data sources from five different RouteViews collectors to identify any significant differences related to peers, advertisement or withdrawn prefixes.": 0.5161290322580644,
            "Access live stream data sources and analyze the communities for AS1234.": 0.5,
            "Perform time-series analysis of AS path length and preference value through live stream data sources from RouteViews suit of collectors.": 0.4666666666666666,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4545454545454546,
            "Access a live AS relationship stream from RIS collectors for the ASN 237.": 0.4545454545454546,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.4545454545454546,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.43750000000000006,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.43750000000000006
        },
        "avg_similarity_score": 0.14791126990206058
    },
    {
        "instruction": "Identify the top 10 Autonomous Systems (ASes) involved in announcing BGP routes from 2020-05-07 12:00:00 to 2020-05-07 15:00:00.",
        "input": "Time window: 2020-05-07 12:00:00 to 2020-05-07 15:00:00",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window\nstart_time = \"2020-05-07 12:00:00\"\nend_time = \"2020-05-07 15:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    record_type=\"updates\"\n)\n\n# Collect all ASes\nases = []\nfor elem in stream:\n    # Get the originating AS\n    ases.append(elem.fields['as-path'].split(' ')[-1])\n\n# Count occurrences of each AS\nc = Counter()\nfor ases in ases:\n    c[ases] += 1\n\n# Print the top 10 ASes\ntop_10 = c.most_common(10)\nprint(\"Top 10 Autonomous Systems:\")\nprint(top_10)",
        "most_similar_instructions": {
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3389830508474576,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.32142857142857145,
            "Access live stream data sources to study the AS communities from October 10, 2020, 15:00:00 UTC, until October 10, 2020, 16:00:00 UTC.": 0.3076923076923077,
            "Analyze the time-series data of the BGP updates received between September 10, 2020, 03:00:00 UTC, to September 10, 2020, 06:00:00 UTC, generated from the route-views.amsix collector.": 0.3050847457627119,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.29090909090909095,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.29090909090909095,
            "Analyze the historical trends in BGP updates from the RouteViews collector over a one-week time window starting on October 8, 2016, 00:00:00.": 0.27450980392156865,
            "Access the live stream data sources from April 1, 2020, 00:00:00 UTC, to April 1, 2020, 05:59:59 UTC, and retrieve BGP announcements of 'A' (Announcement) type from collector rrc00.": 0.2711864406779661,
            "Analyze the security incidents that have taken place in the BGP network based on data from the RIS collector over a four-day time window starting on June 12, 2015, 00:00:00.": 0.2711864406779661,
            "Find out the AS paths length distribution of prefixes announced by AS20057 during the June 20, 2008 from 12:00:00 to 12:30:00 using PyBGPStream.": 0.2641509433962264
        },
        "avg_similarity_score": 0.11485957869725798
    },
    {
        "instruction": "Study the communities of the prefix 64.236.160.0/19.",
        "input": "Prefix of Interest: 64.236.160.0/19",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\",\n    filter=\"prefix exact 64.236.160.0/19\"\n)\n\n# Iterate over the stream and collect all the communities\nfor elem in stream:\n    if elem.type == \"A\":\n        communities = elem.fields['communities'].split(' ')\n        print(\"Found communities for prefix: %s\" % elem.fields['prefix'])\n        print(communities)",
        "most_similar_instructions": {
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.4666666666666667,
            "Study the communities of ASN 65002 for the month of April 2018.": 0.43478260869565216,
            "Study the AS communities associated with the RouteViews collector.": 0.39999999999999997,
            "Study the communities assigned to AS64410 from the RouteViews collector.": 0.380952380952381,
            "Analyze the communities and study the impact of move on the BGP announcements for the prefix 1.2.3.0/24.": 0.37499999999999994,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.3703703703703703,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.3636363636363636,
            "Study the communities of AS 15487 and generate a report with statistics and top-10 announcements for the AS.": 0.3333333333333333,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.29268292682926833
        },
        "avg_similarity_score": 0.12953840257704036
    },
    {
        "instruction": "Correlate the BGP announcements and updates for the AS path '6667 3549 1700 7311 26844' during the time window from November 12, 2018, 00:00:00 to November 14, 2018, 23:59:59.",
        "input": "Time window: November 12, 2018, 00:00:00 to November 14, 2018, 23:59:59\nAS Path of Interest: 6667 3549 1700 7311 26844",
        "output": "import pybgpstream\nimport pandas as pd\n\n# Define the time window around the MOAS incident\nstart_time = \"2018-11-12 00:00:00\"\nend_time = \"2018-11-14 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    filter=\"path 6667 3549 1700 7311 26844\",\n    record_type=\"updates\",\n)\n\n# Create an empty dataframe to store records\ndf = pd.DataFrame()\n\n# Iterate over the stream and collect records\nfor elem in stream:\n    df = df.append({\n        \"time\": elem.time,\n        \"as_path\": elem.fields['as-path'],\n        \"update_type\": elem.type,\n        \"prefix\": elem.fields['prefix'],\n    }, ignore_index=True)\n\n# Correlate events in the dataframe\ncorrelations = df.groupby(['time', 'as_path', 'update_type', 'prefix']).size()\nprint(\"Event correlations in the given AS path and time window\")\nprint(correlations)",
        "most_similar_instructions": {
            "Collect the BGP announcements and updates related to the MOAS prefix 195.70.160.0/20 during the time window from April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00.": 0.5074626865671642,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.4262295081967213,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.41935483870967744,
            "Separate the BGP announcements into valid and invalid updates received by the AS 13414 for the time window from April 18, 2021, 00:00:00 UTC, to April 18, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and listen live to any subsequent announcements.": 0.40963855421686746,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.39473684210526316,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.36363636363636365,
            "Study the BGP communities for all the outgoing updates sent by the ASN 65530 during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC. Collect the data from all the route-views collectors and analyze the distribution of the BGP communities.": 0.35714285714285715,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3548387096774193,
            "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.": 0.34285714285714286,
            "Measure any AS Path Inflation in ASN 4752 over the time window from April 16, 2021 14:00:00 to April 16, 2021 14:59:59. Collect BGP update records from the route-views.syd route-views.eqix collectors.": 0.33333333333333337
        },
        "avg_similarity_score": 0.17240961336465702
    },
    {
        "instruction": "Access data sources from RouteViews collector bview during the time window from June 25, 2018, 00:00:00 to June 27, 2018, 23:59:59.",
        "input": "Time window: June 25, 2018, 00:00:00 to June 27, 2018, 23:59:59\nCollectors: bview",
        "output": "import pybgpstream\n\n# Define the collector and time window\nstart_time = \"2018-06-25 00:00:00\"\nend_time = \"2018-06-27 23:59:59\"\ncollector = \"bview\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=collector,\n    record_type=\"updates\"\n)\n\n# Check if any live data sources are available\nfor source in stream.sources():\n    print(source)",
        "most_similar_instructions": {
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.49056603773584906,
            "Correlate the BGP announcements and updates for the AS path '6667 3549 1700 7311 26844' during the time window from November 12, 2018, 00:00:00 to November 14, 2018, 23:59:59.": 0.4827586206896552,
            "Analyze the topology of ASN 1221 over the time window from June 1, 2021, 00:00:00 UTC, to June 7, 2021, 23:59:59 UTC. Collect BGP rib records from the route-views.sg collector only.": 0.4193548387096775,
            "Access the live stream data sources and retrieve BGP withdrawals of 'W' (Withdrawal) type from the collectors bgp.as6453.net and route-views.eqix for the time window from April 21, 2020, 00:00:00 UTC, to April 21, 2020, 05:59:59 UTC.": 0.4057971014492754,
            "Collect the BGP announcements and updates related to the MOAS prefix 195.70.160.0/20 during the time window from April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00.": 0.3728813559322034,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.3714285714285714,
            "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.": 0.35616438356164387,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.3548387096774193,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.35294117647058815,
            "Access live stream data sources and study AS relationships at the time window from February 13, 2021, 04:00:00 UTC, to February 14, 2021, 10:48:00 UTC for the ASN 11164.": 0.3448275862068965
        },
        "avg_similarity_score": 0.16660716502246858
    },
    {
        "instruction": "Perform historical trends analysis for the prefix 64.194.5.128/25.",
        "input": "Prefix of Interest: 64.194.5.128/25",
        "output": "import pybgpstream\n\n# Initialize the BGPStream and filter based on the prefix\nstream = pybgpstream.BGPStream(\n    record_type=\"ribs\",\n    filter=\"prefix exact 64.194.5.128/25\"\n)\n\n# Start recording announcements for the prefix\nannouncement_history = {}\nfor elem in stream:\n    as_path = elem.fields['as-path'].split(' ')\n    timestamp = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:%M:%S')\n    announcement_history[timestamp] = as_path\n\n# Perform historical trends analysis\nfor as_path in announcement_history.values():\n    print(\"AS_PATH: %s\" % as_path)\n    print(\"LENGTH: %s\" % len(as_path))\n    print(\"\")",
        "most_similar_instructions": {
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.35714285714285715,
            "Access live stream data sources and perform a security analysis by examining the path length and preference count for the Prefix 81.185.112.0/22": 0.2631578947368421,
            "Study the communities of the prefix 64.236.160.0/19.": 0.2608695652173913,
            "Perform a security analysis to detect the BGP prefix hijacking incidents on January 01, 2020, by identifying non-origin AS entries.": 0.24242424242424246,
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.23529411764705885,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.23529411764705885,
            "Perform MOAS (Multiple Origin AS) prefix analysis for sponsorships of prefixes from RouteViews collectors.": 0.23076923076923075,
            "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.": 0.20689655172413793,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.1951219512195122,
            "Access live stream data sources and perform a MOAS analysis by examining the AS paths of BGP enrichment prefixes.": 0.1935483870967742
        },
        "avg_similarity_score": 0.08928161600851678
    },
    {
        "instruction": "Retrieve all the MOAS (Multiple Origin AS) prefixes observed by the RouteViews Project between April 16, 2020, 12:00:00 and April 30, 2020, 12:00:00.",
        "input": "Time window: April 16, 2020, 12:00:00 to April 30, 2020, 12:00:00\nCollector: RouteViews",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-04-16 00:00:00\"\nend_time = \"2020-04-30 12:00:00\"\n\n# Initialize the BGPStream to use RouteViews collector\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    project=\"routeviews\",\n)\n\n# Get the list of MOAS (Multiple Origin AS) prefixes\nmoas_prefixes = set()\n\nfor elem in stream:\n    if elem.type == \"A\":\n        moas_prefixes.add(elem.fields['prefix'])\n\nprint(f\"MOAS Prefixes: {moas_prefixes}\")",
        "most_similar_instructions": {
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.48387096774193544,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.456140350877193,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.4285714285714286,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.3829787234042553,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.375,
            "Find out the AS paths length distribution of prefixes announced by AS20057 during the June 20, 2008 from 12:00:00 to 12:30:00 using PyBGPStream.": 0.37037037037037035,
            "Collect the MOAS (Multiple Origin AS) prefixes that are being announced by ASN 7018.": 0.3414634146341463,
            "Compute the aggregate metrics of global AS relationships using MOAS based prefixes for the time window between April 17, 2015, 00:00:00 and April 18, 2015, 00:00:00. Visualize the relationship count by AS and AS-Path (e.g. Longest-Prefix Match)": 0.3380281690140845,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.32727272727272727,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.32727272727272727
        },
        "avg_similarity_score": 0.15503484110455631
    },
    {
        "instruction": "Measure the AS path inflation of the prefix 192.0.2.0/24 worldwide, from March 10, 2016, 00:00:00 to March 20, 2016, 23:59:00 by accessing live stream data sources from RIS and RouteViews projects.",
        "input": "Time window: March 10, 2016, 00:00:00 to March 20, 2016, 23:59:00\nCollectors: ris-any, route-views3\nRecord Type: updates\nPrefix of Interest: 192.0.2.0/24",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2016-03-10 00:00:00\"\nend_time = \"2016-03-20 23:59:00\"\n\n# Initialize the BGPStream to use multiple routeviews and RIS collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-any\", \"route-views3\"],\n    record_type=\"updates\",\n)\n\nas_path_length_data = {}\n\nfor elem in stream:\n    if elem.type == \"A\" and elem.fields[\"prefix\"] == \"192.0.2.0/24\":\n   as_path = elem.fields[\"as-path\"].split(\" \")\n   path_length = len(as_path)\n\n   if path_length not in as_path_length_data:\n  as_path_length_data[path_length] = 1\n   else:\n  as_path_length_data[path_length] += 1\n\n# Calculating the AS Path Inflation\ntotal_announcements = sum(as_path_length_data.values())\n\nfor path_length, count in as_path_length_data.items():\n    inflation = (count / total_announcements) * 100\n    print(f\"Path Length: {path_length}, Inflation: {inflation:.2f}%\")",
        "most_similar_instructions": {
            "Collect the BGP announcements and updates related to the MOAS prefix 195.70.160.0/20 during the time window from April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00.": 0.35616438356164387,
            "Access live stream data sources and measure AS Path inflation for the prefix 66.1.1.0/24 from the RouteViews collector named rrc12 over the period from May 10, 2019, 8:00:00 UTC to May 10, 2019, 10:00:00 UTC.": 0.34146341463414637,
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.32835820895522383,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.32727272727272727,
            "Perform analysis to measure AS path inflation (i.e. artificially lengthened AS paths) for the time window of February 25, 2021, 00:00:00 UTC, to March 3, 2021, 23:59:59 UTC. Use data from route-views2.sfmix and route-views.wide collectors. Focus on collecting BGP update records with ipversion 4.": 0.32608695652173914,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.3235294117647059,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3157894736842105,
            "Analyze the BGP communities of the prefix 64.233.161.0/24. Use data from rrc00 and RIS collectors.": 0.3103448275862069,
            "Identify top AS paths of length 5 that were observed from AS54113 in IPv4 address space during the time window from February 20, 2021, 00:00:00 UTC, to February 20, 2021, 05:59:59 UTC. Utilize data from route-views.eqix and rrc15 collectors.": 0.3095238095238095,
            "Correlate the BGP announcements and updates for the AS path '6667 3549 1700 7311 26844' during the time window from November 12, 2018, 00:00:00 to November 14, 2018, 23:59:59.": 0.3055555555555555
        },
        "avg_similarity_score": 0.16922534736650488
    },
    {
        "instruction": "Retrieve BGP feeds from RouteViews Project to analyze the security problem associated with known Chinese Origin AS52763 PREFIX ranges.",
        "input": "Collector: Routeviews\nPrefix of Interest: AS 52763 PREFIX ranges",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use RouteViews collector\nstream = pybgpstream.BGPStream(\n    project=\"routeviews\",\n)\n\n# Filter the BGP feed to retrieve only records matching the given ASN\nstream.add_filter(\"collector\", \"routeviews\")\nstream.add_filter(\"as-path\", f\"_{52763}_\")\n\n# Analysis of Chinese Origin ASN 52763 Prefixes\nfor elem in stream:\n    if elem.type == \"A\":\n        origin_asn = elem.fields[\"as-path\"].strip().split(\" \")[-1]\n        prefix = elem.fields[\"prefix\"]\n        print(f\"Origin ASN: {origin_asn}, Prefix: {prefix}\")",
        "most_similar_instructions": {
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.3870967741935484,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.326530612244898,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.27906976744186046,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.27586206896551724,
            "Collect BGP rib data from all RouteViews and RIS collectors for the prefix 96.86.128.0/18. Identify the communities associated with this prefix that either contain ASN 393852 (Swiftway) or 394320 (CMBernet).": 0.2641509433962264,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.2553191489361702,
            "Study the BGP messages over the RouteViews TVC channel on the IPv4 Collector to retrieve the AS numbers associated with peer connections of AS4134 in the last 5 minutes.": 0.25,
            "Track real-time BGP data from multiple RouteViews collectors and access live stream data sources in order to analyze topological properties.": 0.25,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.25,
            "Collect BGP announcements from multiple remote peers and retrieve information associated with the source of the announcements. Use data from RIS and RouteViews collectors to analyze the MOAS (Multiple Origin AS) prefixes representing the origin of an announcement.": 0.24561403508771928
        },
        "avg_similarity_score": 0.13576280446286845
    },
    {
        "instruction": "Access live stream data sources from the RIS Project to analyse the current communities announced by AS65512.",
        "input": "Collector: RIS\nAS Number of Interest: 65512",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use RIS collector\nstream = pybgpstream.BGPStream(\n    project=\"ris\",\n    collectors=[\"rrc00\"],\n    record_type=\"updates\",\n)\n\n# Filter the BGP feed to retrieve only records matching the given ASN\nstream.add_filter(\"peer-asn\", 65512)\n\n# Analysis of Communities Announced by AS65512\nfor elem in stream:\n    if elem.type == \"A\":\n        community = elem.fields[\"communities\"]\n        prefix = elem.fields[\"prefix\"]\n        print(f\"Community: {community}, Prefix: {prefix}\")",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.5625,
            "Access live stream data sources and analyze the communities for AS1234.": 0.5,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.5,
            "Access live stream data sources from all RouteViews collectors.": 0.46153846153846156,
            "Using PyBGPStream Library, collect live stream data sources from RIS collectors to study the communities associated with a certain AS number (53514).": 0.46153846153846156,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.46153846153846156,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4324324324324324,
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.42424242424242425,
            "Access live stream data sources to analyse the AS relationships from October 25, 2019, to November 5, 2019 by collecting records from RouteViews and RIPE RIS.": 0.41860465116279066,
            "Access live stream data sources from the route-views2 collector and study the communities in BGP update data between April 30, 2017, and May 2, 2017.": 0.41860465116279066
        },
        "avg_similarity_score": 0.182935478080373
    },
    {
        "instruction": "Retrieve all the BGP update records worldwide for the prefix 2406:3FFF:101:100::/64 from June 8, 2020, 12:00:00 to June 11, 2020, 12:00:00.",
        "input": "Time window: June 8, 2020, 12:00:00 to June 11, 2020, 12:00:00\nCollectors: ris-any, route-views3\nRecord Type: updates\nPrefix of Interest: 2406:3FFF:101:100::/64",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2020-06-08 12:00:00\"\nend_time = \"2020-06-11 12:00:00\"\n\n# Initialize the BGPStream to use ris-any and route-views3 collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-any\", \"route-views3\"],\n    record_type=\"updates\",\n)\n\n# Filter the BGP feed to retrieve only records matching the given prefix\nstream.add_filter(\"prefix\", \"2406:3FFF:101:100::/64\")\n\nfor elem in stream:\n    if elem.type == \"A\":\n        print(f\"{elem.fields['prefix']:<20}: {elem.fields['as-path']}\" )",
        "most_similar_instructions": {
            "Retrieve all the MOAS (Multiple Origin AS) prefixes observed by the RouteViews Project between April 16, 2020, 12:00:00 and April 30, 2020, 12:00:00.": 0.4285714285714286,
            "Identify the top 10 Autonomous Systems (ASes) involved in announcing BGP routes from 2020-05-07 12:00:00 to 2020-05-07 15:00:00.": 0.4,
            "Collect BGP update records from multiple RouteViews (route-views.wil-chl-ipv4) and RIS (rrc10) collectors for attributes related to AS Path inflation during the time window from June 6, 2019, 12:00:00 UTC to June 6, 2019, 14:00:00 UTC.": 0.38888888888888895,
            "Access live stream data sources from RouteViews and RIPE NCC using the PyBGPStream library and collect BGP update records from the 2020-04-03 14:00:00 to 15:00:00 time window.": 0.3548387096774193,
            "Collect BGP update records from the RouteViews2 collector and analyze the MOAS prefixes from the 2020-03-20 16:00:00 time window ending at 17:00:00.": 0.3508771929824561,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3448275862068966,
            "Study the communities of prefixes from the collector rrc13 using the PyBGPStream library between the 2020-06-12 16:00:00 and 2020-06-12 17:00:00 time window.": 0.33898305084745767,
            "Collect BGP records from RouteViews (route-views.wil-chl-ipv4) collector to study the communities for the prefix 13.128.16.0/20 and all more specific prefixes during the time window from June 6, 2019, 11:00:00 UTC to June 6, 2019, 11:15:00 UTC.": 0.33766233766233766,
            "Collect all BGP MOAS (Multiple Origin AS) prefixes for ASN 22134 during the period between June 24, 2018, 11:00:00 to June 24, 2018, 13:00:00 and visualize the distribution of received and sent routes.": 0.33333333333333337,
            "Find out the AS paths length distribution of prefixes announced by AS20057 during the June 20, 2008 from 12:00:00 to 12:30:00 using PyBGPStream.": 0.32142857142857145
        },
        "avg_similarity_score": 0.14487937584361518
    },
    {
        "instruction": "Access live stream data sources from the RouteViews Project to analyze the current networks that announce the prefix 1.1.1.0/24.",
        "input": "Collector: Routeviews\nPrefix of Interest: 1.1.1.0/24",
        "output": "import pybgpstream\n\n# Initialize the BGPStream to use RouteViews collector\nstream = pybgpstream.BGPStream(\n    project=\"routeviews\",\n    record_type=\"updates\",\n)\n\n# Filter the BGP feed to retrieve only records matching the given prefix\nstream.add_filter(\"collector\", \"routeviews\")\nstream.add_filter(\"prefix\", \"1.1.1.0/24\")\n\n# Analysis of Current Networks Announcing Prefix 1.1.1.0/24\nfor elem in stream:\n    if elem.type == \"A\":\n        as_path = elem.fields[\"as-path\"].split(\" \")\n        announcing_as = elem.fields[\"as-path\"].split(\" \")[0]\n        prefix = elem.fields[\"prefix\"]\n        print(f\"Network Announcing AS: {announcing_as}, Prefix: {prefix}\")",
        "most_similar_instructions": {
            "Access live stream data sources from the RIS Project to analyse the current communities announced by AS65512.": 0.55,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4782608695652174,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.46511627906976744,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.4528301886792453,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.4390243902439025,
            "Access live stream data sources from all RouteViews collectors.": 0.43750000000000006,
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.4210526315789474,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.4186046511627907,
            "Access live stream data sources and analyze the communities for AS1234.": 0.411764705882353,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.4
        },
        "avg_similarity_score": 0.1920388458725149
    },
    {
        "instruction": "Collect BGP data from RIS RouteCollectors from 10 AM to 10 PM for the month of July, while focusing on AS Path lengths and their distribution.",
        "input": "Time window: July, 10 AM to 10 PM\nCollectors: ris-route",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = \"2020-07-01 10:00:00\"\nend_time = \"2020-07-31 22:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the count of AS Path lengths\npath_lengths = defaultdict(int)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  as_path = elem.fields[\"as-path\"]\n  as_path_length = len(as_path.split(\" \"))\n  path_lengths[as_path_length] += 1\n\n# Visualize the distribution of AS Path lengths\nx_vals = sorted(path_lengths.keys())\ny_vals = [path_lengths[x] for x in x_vals]\n\nplt.figure(figsize=(12, 6))\nplt.plot(x_vals, y_vals, marker='o', color='blue', linestyle='-')\nplt.xlabel('AS Path Length')\nplt.ylabel('Number of Occurrences')\nplt.title('Distribution of AS Path Lengths')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n\n# Print the counts for all AS Path lengths\nfor length, count in path_lengths.items():\n    print(f\"AS Path length {length}: {count} times\")",
        "most_similar_instructions": {
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.3703703703703704,
            "Collect BGP update data from the RIS project for the past 24 hours. Determine which ASes have the highest path lengths by calculating the mean of their paths.": 0.3703703703703704,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.35000000000000003,
            "Collect BGP update data from the RouteViews collector rrc05 for the month of January 2019 and identify and visualise the AS subnets with more than 15 origin ASes.": 0.3333333333333333,
            "Collect BGP RIB update data for the month of October 2018 from all available RouteViews collectors and measure AS path inflation for BGP prefixes 1.2.3.0/24 and 4.5.6.7/32.": 0.32786885245901637,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.32727272727272727,
            "Collect BGP update data from all RouteViews and RIS collectors for the prefix 91.198.174.0/24. Measure AS Path inflation for ASN 45690 (Linode) within this prefix.": 0.32727272727272727,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.32,
            "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.": 0.3181818181818182,
            "Collect BGP update data from November 21, 2019, to December 12, 2019, from RIPE RIS RouteCollectors to analyse v6 day one customers for ASN 3356.": 0.3137254901960784
        },
        "avg_similarity_score": 0.1759497695480911
    },
    {
        "instruction": "Use PyBGPStrem to identify all MOAS (Multi-Origin AS) prefixes seen from the Route-Views collector over the last hour.",
        "input": "Time window: Last hour\nCollectors: route-views",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\n# Define the time window around the incident\nstart_time = (datetime.utcnow() - timedelta(hours=1)).strftime('%Y-%m-%d %H:00:00')\nend_time = datetime.utcnow().strftime('%Y-%m-%d %H:49:59')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views\"],\n    record_type=\"updates\"\n)\n\n# Dictionary to store the seen prefixes\nseen_prefixes = set()\n\n# Dictionary to store the MOAS prefixes\nmoas_prefixes = defaultdict(list)\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":  # Check for BGP announcements\n  bgp_prefix = elem.fields[\"prefix\"]\n  as_path = elem.fields[\"as-path\"]\n  bgp_origin_as = elem.fields[\"as-path\"].split(\" \")[-1]\n  # if the prefix has already been seen, check if it is a MOAS prefix\n  if bgp_prefix in seen_prefixes:\n     moas_prefixes[bgp_prefix].append(bgp_origin_as)\n  # if the prefix is new, add it to the seen_prefixes\n  else:\n      seen_prefixes.add(bgp_prefix)\n\n# Print the MOAS prefixes\nprint(\"Multi-origin AS prefixes:\")\nfor prefix, origins in moas_prefixes.items():\n    print(f\"{prefix}: {', '.join(origins)}\")",
        "most_similar_instructions": {
            "Identify how many MOAS Prefixes were announced on February 24,7 2008 from the Route Views collector.": 0.4324324324324324,
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.37837837837837834,
            "Collect and analyze all AS Paths from Route Views collector 'route-views.amsix' to identify which AS Path has the strictest preference.": 0.3333333333333333,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.33333333333333326,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.3,
            "Retrieve the full list of active Measuring AS (MOAS) prefixes from the Routeviews collector.": 0.2941176470588235,
            "Perform MOAS (Multiple Origin AS) prefix analysis for sponsorships of prefixes from RouteViews collectors.": 0.2941176470588235,
            "Measure AS path inflation from the RouteViews collector.": 0.28571428571428575,
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.28571428571428575,
            "Use PyBGPStream to study the path length or preference analysis associated with route collector rrc02.": 0.28571428571428575
        },
        "avg_similarity_score": 0.15202721841579128
    },
    {
        "instruction": "Collect MOAS prefixes originating from Router C over the last 48 hours and generate a visual representation of the data.",
        "input": "Time window: 48 hours\nCollectors: routerc\nRecord Type: updates\nMOAS: true",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nnow = datetime.now()\nstart_time = datetime.strftime(now - timedelta(hours=48), '%Y-%m-%d %H:%M:%S')\nend_time = datetime.strftime(now, '%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"routerc\"],\n    record_type=\"updates\",\n    moas=True\n)\n\nmoas_prefixes = []\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  prefix = elem.fields[\"prefix\"]\n  moas_prefixes.append(prefix)\n\n# Generate Visual Representation\nplt.figure(figsize=(10, 7))\nplt.title(\"MOAS Prefixes Originating from Router C\")\nplt.xlabel(\"Prefixes\")\nplt.ylabel(\"Count\")\nplt.hist(moas_prefixes, color=\"darkgreen\")\nplt.show()",
        "most_similar_instructions": {
            "Collect MOAS (Multi Origin ASes) prefixes over the last week, perform topological analysis and visualize migration patterns.": 0.37837837837837834,
            "Collect all MOAS prefixes from RIS collectors over the past 2 days, study the communities associated with each MOAS prefix, and analyze the patterns in the communities.": 0.3404255319148936,
            "Collect Multiple Origin AS (MOAS) prefixes from the RIS-Karlsruhe peering point and compare the current AS Topology with historical AS Topology.": 0.3333333333333333,
            "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.": 0.3157894736842105,
            "Gather all MOAS (Multiple Origin AS) prefixes advertised by AS20057 during the last week using PyBGPStream and generate a report showing the number of unique announcements related to each MOAS prefix.": 0.3137254901960784,
            "Use PyBGPStrem to identify all MOAS (Multi-Origin AS) prefixes seen from the Route-Views collector over the last hour.": 0.3,
            "Collect data from multiple mirrors of the RouteViews project. Collect BGP updates from the mirrors, and perform topological analysis on the collected data.": 0.27906976744186046,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.2727272727272727,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.27027027027027023,
            "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.": 0.27027027027027023
        },
        "avg_similarity_score": 0.15637172870970076
    },
    {
        "instruction": "Use pyBGPStream to access live stream data sources, and collect BGP data for ASN 6667 for the past 24 hours. Use the data collected to measure AS path inflation for this particular AS.",
        "input": "Time window: 24 hours\nCollectors: all\nRecord Type: updates\nASN: 6667",
        "output": "import pybgpstream\nfrom datetime import datetime\nfrom collections import Counter\n\n# Define the time window around the incident\nnow = datetime.now()\nstart_time = datetime.strftime(now - timedelta(hours=24), '%Y-%m-%d %H:%M:%S')\nend_time = datetime.strftime(now, '%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=\"all\",\n    record_type=\"updates\"\n)\n\n# Measure AS path inflation for AS 6667\nas_paths = []\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n      as_path = elem.fields[\"as-path\"].split()\n      for asn in as_path:\n         if asn == \"6667\":\n        as_paths.append(as_path)\n\nas_path_counter = Counter()\n\nfor as_path in as_paths:\n    as_path_counter[len(as_path) - 1] += 1\n\nas_path_lengths = list(as_path_counter.keys())\nas_path_counts = list(as_path_counter.values())\n\n# Generate Visual Representation\nplt.figure(figsize=(10, 7))\nplt.title(\"AS Path Inflation for AS 6667\")\nplt.xlabel(\"AS Path Length\")\nplt.ylabel(\"Count\")\nplt.bar(as_path_lengths, as_path_counts, color=\"darkblue\")\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP update data for the past 24 hours. Measure AS path inflation using the ASN of the origin AS.": 0.490566037735849,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.44,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.43478260869565216,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.43333333333333324,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4210526315789474,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.41666666666666663,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.41379310344827586,
            "Use PyBGPStream library to access live stream data sources and calculate the BGP Path Inflation for 1.2.3.0/24 and analyze the communities on the associated Autonomous Systems (ASes).": 0.40625,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.3928571428571428,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.391304347826087
        },
        "avg_similarity_score": 0.19293844057547474
    },
    {
        "instruction": "Analyze the community data to identify the ASes which have configured the same community attributes using PyBGPStream library.",
        "input": "No Input",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\"\n)\n\n# Collect community data from the stream\ncommunity_attributes = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  community_attribute = elem.fields[\"community\"]\n  community_attributes[community_attribute].append(elem.peer_asn)\n\n# Analyze the community data to identify ASes\nsame_community_ases = []\n\nfor key in community_attributes.keys():\n    as_list = community_attributes[key]\n    as_count = Counter(as_list)\n    most_common_ases = as_count.most_common(2)\n\n    if len(most_common_ases) == 2 and most_common_ases[0][1] == most_common_ases[1][1]:\n   same_community_ases.append(most_common_ases[0][0])\n\n# Output\nprint(f\"The ASes that have configured the same community attributes are: {same_community_ases}\")",
        "most_similar_instructions": {
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.37209302325581395,
            "Analyze the community and policy for a given prefix to determine the origin AS of the prefix.": 0.34285714285714286,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.2926829268292683,
            "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.": 0.28571428571428575,
            "Use the BGPStream library to create a topological visualization of the ASes involved in the hijacking incident.": 0.28571428571428575,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.27906976744186046,
            "Collect BGP announcement data for AS 7922 from all available RIPE and ALTDB collectors. Analyze the data to identify and report any communities occurring in the AS path that are not observed in the announcements.": 0.2641509433962264,
            "Collect and analyze all AS Paths from Route Views collector 'route-views.amsix' to identify which AS Path has the strictest preference.": 0.25,
            "Use historic BGP data to evaluate AS preferences between two consecutive AS relationships and identify the most preferable path between the two.": 0.25,
            "Analyze the communities associated with the BGP announcements collected from the AS-KF project.": 0.25
        },
        "avg_similarity_score": 0.1376036571611862
    },
    {
        "instruction": "Analyze the network configuration and reliability of ASN 15169 over a specified time window using PyBGPStream library.",
        "input": "Time window: 72 hours \nCollectors: route-views.eqix\nRecord Type: ribs\nASN: 15169",
        "output": "import pybgpstream\nfrom datetime import datetime\n\n# Define the time window around the incident\nnow = datetime.now()\nstart_time = datetime.strftime(now - timedelta(hours=72), '%Y-%m-%d %H:%M:%S')\nend_time = datetime.strftime(now, '%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.eqix\"],\n    record_type=\"ribs\",\n    filter=\"peer 15169\"\n)\n\n# Obtain and analyze the network configuration\nlinks = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n   peer_ip = elem.peer_ip\n   prefix = elem.fields[\"prefix\"]\n\n   links[peer_ip].append(prefix)\n\n# Visualize the network configuration\nplt.figure(figsize=(10, 7))\nplt.title(\"Network Configuration for ASN 15169\")\nplt.xlabel(\"Prefixes\")\nplt.ylabel(\"Peer IPs\")\nplt.scatter(links.keys(), links.values())\n\n# Calculate network reliability\ntotal_links = 0\nactive_links = 0\n\nfor peer in links.keys():\n    total_links += len(links[peer])\n    active_links += 1\n\nreliability = float(active_links/total_links) * 100\n\n# Print network reliability\nprint(f\"Network reliability for ASN 15169 for the specified time window: {reliability}\")",
        "most_similar_instructions": {
            "Analyze the network configuration and reliability over the past two weeks.": 0.5,
            "Estimate the network configuration and reliability of the RouteViews collectors using BGPslurp to collect data for the date July 10, 2018.": 0.36842105263157887,
            "Analyze the network configuration and reliability of BGP announcements for the prefix 64.233.161.0/24 to detect any malicious activity.": 0.358974358974359,
            "Analyze topological behavior of ASes by computing the closeness centrality of ASes in a given region using PyBGPStream library and constructing a network visualization.": 0.34146341463414637,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.33333333333333337,
            "Analyze the topology of the BGP network using data from all RouteViews collectors over a two-day time window starting on August 14, 2017, 00:00:00.": 0.3181818181818182,
            "Analyze the community data to identify the ASes which have configured the same community attributes using PyBGPStream library.": 0.28571428571428575,
            "Measure the prevalence of AS path lengths using PyBGPStream Library and visualize the results in a line chart.": 0.28571428571428575,
            "Analyze the historical trends in BGP updates from the RouteViews collector over a one-week time window starting on October 8, 2016, 00:00:00.": 0.28571428571428564,
            "Analyze the security incidents that have taken place in the BGP network based on data from the RIS collector over a four-day time window starting on June 12, 2015, 00:00:00.": 0.27999999999999997
        },
        "avg_similarity_score": 0.13072429536005495
    },
    {
        "instruction": "Utilize PyBGPStream library to perform topological analysis on ASN 174 for the last 15 days and generate visual representation of the data.",
        "input": "Time window: 15 days\nCollectors: ris-route\nRecord Type: updates\nASN: 174",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nnow = datetime.now()\nstart_time = datetime.strftime(now - timedelta(days=15), '%Y-%m-%d %H:%M:%S')\nend_time = datetime.strftime(now, '%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"ris-route\"],\n    record_type=\"updates\",\n    filter=\"peer 174\"\n)\n\n# Collect and analyze topology data\nlinks = defaultdict(list)\n\nfor rec in stream.records():\n    for elem in rec:\n   peer_as = elem.peer_asn\n   prefix = elem.fields[\"prefix\"]\n\n   links[peer_as].append(prefix)\n\n# Generate Visual Representation\nplt.figure(figsize=(10, 7))\nplt.title(\"Topological Analysis of ASN 174\")\nplt.xlabel(\"Prefixes\")\nplt.ylabel(\"Peer ASs\")\nplt.scatter(links.keys(), links.values())\nplt.show()",
        "most_similar_instructions": {
            "Collect MOAS prefixes originating from Router C over the last 48 hours and generate a visual representation of the data.": 0.4285714285714286,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.3225806451612903,
            "Perform topological analysis on RIS data and compare the number of neighbours for AS64215 between the different RouteViews and RIPE RIS collectors.": 0.3181818181818182,
            "Perform topological analysis on the RouteViews collector rrc00 for a particular region, analyzing the AS paths of the BGP announcements from this region and the number of blanket announcements to study the formation of clustering and spokes-hub structures.": 0.29508196721311475,
            "Access PyBGPStream library to analyze topological and security parameters for all IPv6 prefixes announced by ASN 4668. Identify the type of announcements and BGP communities associated with these announcements.": 0.27450980392156865,
            "Use PyBGPStream library to access the live stream data sources and measure the number of unique ASNs that have made at least 10 announcements in the past 12 hours.": 0.27450980392156865,
            "Utilize the PyBGPStream library to gain insight about the communities of ASN 6461, this analysis should include time-series analysis, topological analysis, historical trends, visualization, and community and policy analysis.": 0.2692307692307693,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.2666666666666666,
            "Collect data from multiple mirrors of the RouteViews project. Collect BGP updates from the mirrors, and perform topological analysis on the collected data.": 0.2666666666666666,
            "Use the BGPStream library to create a topological visualization of the ASes involved in the hijacking incident.": 0.25641025641025644
        },
        "avg_similarity_score": 0.14351516156224026
    },
    {
        "instruction": "Collect and analyze historical trends using PyBGPStream library for ASN 2856 over the last 72 hours.",
        "input": "Time window: 72 hours\nCollectors: route-views.telxatl\nRecord Type: updates\nASN: 2856",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nnow = datetime.now()\nstart_time = datetime.strftime(now - timedelta(hours=72), '%Y-%m-%d %H:%M:%S')\nend_time = datetime.strftime(now, '%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views.telxatl\"],\n    record_type=\"updates\",\n    filter=\"peer 2856\"\n)\n\n# Collect and analyze data\nannouncements_over_time = defaultdict(int)\n\nfor rec in stream.records():\n    for elem in rec:\n   if elem.type == \"A\":\n  timestamp_hour = datetime.utcfromtimestamp(elem.time).strftime('%Y-%m-%d %H:00:00')\n  announcements_over_time[timestamp_hour] += 1\n\n# Generate Visual Representation\nplt.figure(figsize=(10, 7))\nplt.title(\"Historical Trends for ASN 2856\")\nplt.xlabel(\"Time (Hourly)\")\nplt.ylabel(\"Number of Announcements\")\nplt.plot(list(announcements_over_time.keys()), list(announcements_over_time.values()))\nplt.show()",
        "most_similar_instructions": {
            "Using the PyBGPStream library, measure AS inflation for ASN 32329.": 0.38461538461538464,
            "Analyze the historical trends of autonomous systems announcements for the prefix 72.1.0.0/16.": 0.375,
            "Collect BGP stream data from RouteViews for the last 24 hours and identify community information in each record.": 0.29411764705882354,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.2926829268292683,
            "Using the PyBGPStream library, collect BGP MOAS records related to ASN 54472.": 0.28571428571428575,
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.28571428571428575,
            "Perform historical trends analysis for the prefix 64.194.5.128/25.": 0.28571428571428575,
            "Collect MOAS prefixes originating from Router C over the last 48 hours and generate a visual representation of the data.": 0.2777777777777778,
            "Using the PyBGPStream library, access the live RIS Stream to analyze the fluctuations in IPv4 routing table entries during the last month.": 0.2631578947368421,
            "Utilize PyBGPStream library to perform topological analysis on ASN 174 for the last 15 days and generate visual representation of the data.": 0.2631578947368421
        },
        "avg_similarity_score": 0.13233203825891382
    },
    {
        "instruction": "Utilize the MOAS (Multiple Origin AS) prefixes to analyze path inflation on the global IPv4 unicast distribution from RouteViews collectors for November 15, 2018, to November 16, 2018.",
        "input": "Time window: November 15, 2018, 00:00:00 to November 16, 2018, 00:00:00\nCollectors: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n# Define the time window\nstart_time = \"2018-11-15 00:00:00\"\nend_time = \"2018-11-16 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\npath_lengths = []\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and elem.fields['prefix'] in pybgpstream.MOAS_PREFIXES:\n            as_path = elem.fields['as-path'].split()\n            length = len(as_path)\n            path_lengths.append(length)\n\n# Visualize the path lengths\nplt.figure(figsize=(12, 6))\nplt.hist(path_lengths, range=(1, max(path_lengths)))\nplt.xlabel('Path Lengths')\nplt.ylabel('Occurrences')\nplt.title('Path Lengths of BGP Announcements for MOAS Prefixes (Global IPv4 Unicast)')\nplt.xticks(range(1, max(path_lengths)))\nplt.show()",
        "most_similar_instructions": {
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.456140350877193,
            "Perform MOAS (Multiple Origin AS) prefix analysis for sponsorships of prefixes from RouteViews collectors.": 0.38095238095238093,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.36363636363636365,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.35555555555555557,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.3333333333333333,
            "Correlate the BGP announcements and updates for the AS path '6667 3549 1700 7311 26844' during the time window from November 12, 2018, 00:00:00 to November 14, 2018, 23:59:59.": 0.32786885245901637,
            "Retrieve all the MOAS (Multiple Origin AS) prefixes observed by the RouteViews Project between April 16, 2020, 12:00:00 and April 30, 2020, 12:00:00.": 0.32727272727272727,
            "Analyze the MOAS (Multiple Origin AS) prefixes generated in the time window from RouteViews2 and KDL collectors. Calculate and visualize the top 10 longest AS paths that cover the most routable addresses.": 0.30000000000000004,
            "Calculate the number of MOAS (Multiple Origin AS)prefixes observed during the past month and the MOAS prefix length inflation.": 0.2916666666666667,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.2857142857142857
        },
        "avg_similarity_score": 0.1556750955384721
    },
    {
        "instruction": "Access live stream data source from a collector route-views.eqix named \"rrc05\" and analyze the topology of AS 43960 (Enzo)",
        "input": "Project: route-views.eqix\nSource: rrc05",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    project=\"route-views.eqix\",\n    collector=\"rrc05\",\n    record_type=\"updates\"\n)\n\n# Process BGP records\nas_adj_matrix = {}\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields['as-path'].split()\n            if '43960' in as_path:\n                length = len(as_path)\n                if length == 1:\n                    if as_path[0] not in as_adj_matrix:\n                        as_adj_matrix[as_path[0]] = []\n                elif length > 1:\n                    if as_path[0] not in as_adj_matrix:\n                        as_adj_matrix[as_path[0]] = []\n                    if as_path[-1] not in as_adj_matrix:\n                        as_adj_matrix[as_path[-1]] = []\n                    as_adj_matrix[as_path[0]].append(as_path[-1])\n\n# Display the adjacency matrix\nfor asn in sorted(as_adj_matrix):\n    print(\"ASN: {}, Outbound ASNs: {}\".format(asn, sorted(as_adj_matrix[asn])))",
        "most_similar_instructions": {
            "Access the live streaming data source from a certain collector and visualize the top AS paths over time.": 0.5128205128205129,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.4782608695652174,
            "Live stream data from the RouteViews collector rrc00 and analyze the AS Path Inflation of Carefit ASN 65501.": 0.4615384615384615,
            "Access live stream data sources and analyze the communities for AS1234.": 0.43749999999999994,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.41176470588235287,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.4090909090909091,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.39999999999999997,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.39999999999999997,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.391304347826087,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.3902439024390244
        },
        "avg_similarity_score": 0.1837558352708229
    },
    {
        "instruction": "Use PyBGPStream to collect BGP update data from October 1, 2018, to October 7, 2018 and analyze the communities of AS12345 (ABC Corp).",
        "input": "Time window: October 1, 2018, 00:00:00 to October 7, 2018, 00:00:00\nCollectors: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\n\n# Define the time window\nstart_time = \"2018-10-01 00:00:00\"\nend_time = \"2018-10-07 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\ncommunities = set()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\" and \"12345\" in elem.fields['as-path'].split():\n            communities.add(elem.fields['communities'])\n\n# Display communities\nfor community in sorted(communities):\n    print(\"Community: \", community)",
        "most_similar_instructions": {
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.39999999999999997,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.3888888888888889,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.37500000000000006,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.37499999999999994,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.36363636363636365,
            "Collect BGP update data for the last week from rrc00 to rrc08 and identify BGP announcements made by AS3078 during the timespan.": 0.3555555555555555,
            "Using MOAS prefixes, collect BGP update data for August 1, 2018, to August 5, 2018, from RIS RRC01 and RIS BBOI. Examine the AS paths of MOAS prefixes to determine if they are validly originating from the corresponding ASN.": 0.3548387096774194,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.35,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3404255319148936,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.33333333333333337
        },
        "avg_similarity_score": 0.18436995188890423
    },
    {
        "instruction": "Using PyBGPStream, access live stream data source from RIS RRC11 and analyze security-related information for prefixes 1.0.0.0/8 announced by AS12345 (ABC Corp).",
        "input": "Project: ris\nSource: rrc11\nFilter:\nipversion: 4\npeer: 12345\nPrefix: prefix exact 1.0.0.0/8",
        "output": "import pybgpstream\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=None,\n    until_time=None,\n    project=\"ris\",\n    collector=\"rrc11\",\n    record_type=\"updates\"\n)\n\n# Filter records based on prefix and peer ASN\nstream.add_filter('ipversion', '4')\nstream.add_filter('peer', '12345')\nstream.add_filter('prefix', 'prefix exact 1.0.0.0/8')\n\n# Process BGP records\nfor rec in stream.records(timeout=2):\n    for elem in rec:\n        if elem.type == \"A\":\n            print(f\"Time: {rec.time}, AS Path: {elem.fields['as-path']}, Origin AS: {elem.fields['origin-as']}, MED: {elem.fields['med']}, Communities: {elem.fields['communities']}, Next-Hop: {elem.fields['next-hop']}\")",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.37209302325581395,
            "Access live stream data sources and analyze the communities for AS1234.": 0.368421052631579,
            "Access live stream data sources from the RIS Project to analyse the current communities announced by AS65512.": 0.3636363636363636,
            "Access live stream data from RouteViews and analyze AS relationships by gaining insight into the per-prefix relationship information provided by each collector.": 0.36,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.35000000000000003,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.34615384615384615,
            "Access live stream data source from a collector route-views.eqix named \"rrc05\" and analyze the topology of AS 43960 (Enzo)": 0.3333333333333333,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.32727272727272727,
            "Access live stream data sources from zebra based on the filter \u201cpeer 10.0.0.1 or peer 10.0.0.2\u201d.": 0.32653061224489793,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.32653061224489793
        },
        "avg_similarity_score": 0.1447126272258246
    },
    {
        "instruction": "Utilize the filter parameters to study the AS relationships in the past 24 hours from RouteViews collectors for IPv4 unicast distribution.",
        "input": "Time window: <noinput>\nCollectors: route-views2, route-views3, route-views4, ris-ripe",
        "output": "import pybgpstream\nfrom datetime import datetime, timedelta\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=str(datetime.utcnow() - timedelta(hours=24)),\n    until_time=str(datetime.utcnow()),\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Process BGP records\nas_relations = set()\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":\n            as_path = elem.fields['as-path'].split()\n            length = len(as_path)\n            if length > 1:\n                as_relations.add((as_path[0], as_path[-1]))\n\n# Display AS relationships\nfor as_rel in as_relations:\n    print(\"AS Relationship: {} -> {}\".format(as_rel[0], as_rel[1]))",
        "most_similar_instructions": {
            "Study the AS communities associated with the RouteViews collector.": 0.33333333333333326,
            "Utilize the MOAS (Multiple Origin AS) prefixes to analyze path inflation on the global IPv4 unicast distribution from RouteViews collectors for November 15, 2018, to November 16, 2018.": 0.32653061224489793,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.31578947368421056,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.2916666666666667,
            "Analyze the historical trends of AS relationship in the Internet by using the IP address field as the input with PyBGPStream and collect rib entries from RouteViews collectors.": 0.28571428571428575,
            "Calculate the average AS path inflation on a specific day in the RouteViews collector.": 0.2857142857142857,
            "Analyze the community attributes of BGP records from RouteViews to measure the standing or context that a given AS holds in the Internet.": 0.2727272727272727,
            "Use MOAS (Multiple Origin AS) prefixes to study the effect of AS path inflation in BGP.": 0.27027027027027023,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.2631578947368421,
            "Use the BGPStream library to create a topological visualization of the ASes involved in the hijacking incident.": 0.2631578947368421
        },
        "avg_similarity_score": 0.156353925231354
    },
    {
        "instruction": "Record MOAS (Multiple Origin AS) prefixes that originate from AS13335 for the time window from January 15, 2015, 00:00:00 to January 17, 2015, 23:59:00 and collect only RIB entries (ribs).",
        "input": "Time window: January 15, 2015, 00:00:00 to January 17, 2015, 23:59:00\nCollectors: All\nRecord Type: ribs\nPeer: AS13335",
        "output": "import pybgpstream\n\n# Define the time window around the TTNet incident\nstart_time = \"2015-01-15 00:00:00\"\nend_time = \"2015-01-17 23:59:00\"\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\", \n                \"rrc06\", \"rrc07\", \"rrc09\", \"rrc10\",\n                \"route-views.ajn\", \"route-views.eqix\",\n                \"route-views.ion\", \"route-views.jinx\",\n                \"route-views.kixp\", \"route-views.linx\", \n                \"route-views.nwax\", \"route-views.sg\",\n                \"route-views.telxatl\", \"route-views.wide\"],\n    record_type=\"ribs\",\n)\n\nmoas_data = []\n\nfor elem in stream:\n    if elem.peer_asn == 13335:\n        moas_data.append((elem.fields[\"prefix\"], elem.time))\n\n# Print the MOAS prefixes collected\nprint(\" MOAS Prefixes with Origin AS 13335 within the time-frame given:\")\nfor moas_prefix, timestamp in moas_data:\n    print(\"   \" + moas_prefix + \"\\tat timestamp \" + \n            datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S'))",
        "most_similar_instructions": {
            "Collect MOAS (Multiple Origin AS) prefixes that originate from AS65501 during the time window from March 3, 2021, 00:00:00 to March 3, 2021, 23:59:59.": 0.5806451612903226,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.4054054054054054,
            "Collect the ASN and prefix of all MOAS (Multiple Origin AS) prefixes that were announced during the time window from May 8, 2019, 8:00:00 UTC to May 8, 2019, 10:00:00 UTC. Collect from the RouteViews collector named route-views.jinx.": 0.38461538461538464,
            "Use the MOAS (Multiple Origin AS) prefixes to measure the AS path inflation from November 30, 2020, 00:00:00 UTC, to November 30, 2020, 05:59:59 UTC.": 0.38095238095238093,
            "Access live stream data source and identify the top 5 MOAS (Multiple Origin AS) prefixes for AS1234 for the time window between April 26, 2017, 22:00:00 and April 26, 2017, 23:00:00": 0.37681159420289856,
            "Collect MOAS prefixes from RouteViews' RIS project for the time window from August 11, 2019, 09:00:00 UTC, to August 11, 2019, 13:00:00 UTC. Include all entries with record types rib and updates only from the collector rrc06.": 0.37333333333333335,
            "Access data sources from RouteViews collector bview during the time window from June 25, 2018, 00:00:00 to June 27, 2018, 23:59:59.": 0.3728813559322034,
            "Analyze the effect of MOAS (Multiple Origin AS) prefixes on overall BGP network stability during the time window from February 11, 2021, 00:00:00 UTC, to February 11, 2021, 05:59:59 UTC, using data from the collector route-views.eqix. Select updates originated by MOAS prefixes only.": 0.3614457831325301,
            "Analyse the MOAS (Multiple Origin AS) prefixes from the route-views.nwax collector during a one hour window from February 13, 2021, 15:00:00 UTC, to February 13, 2021, 16:00:00 UTC for the ASN 7491. Collect BGP update records of type 'A' (Announcements) for this time window.": 0.35714285714285715,
            "Collect the BGP announcements and updates related to the MOAS prefix 195.70.160.0/20 during the time window from April 18, 2019, 00:00:00 to April 20, 2019, 23:59:00.": 0.35294117647058826
        },
        "avg_similarity_score": 0.1525873876220537
    },
    {
        "instruction": "Using PyBGPstream, measure the AS Path inflation for the prefix 65.207.180.157/32 over a 5-minute time-window.",
        "input": "Time window: 5 minutes prior to the moment of execution to the current execution time\nCollectors: All\nRecord Type: updates\nPrefix of Interest: 65.207.180.157/32",
        "output": "import pybgpstream\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.utcnow()\n\n# Define the time window to cover the past five minutes\nstart_time = (now - datetime.timedelta(minutes=5)).strftime('%Y-%m-%d %H:%M:%S')\nend_time = now.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\", \n                \"rrc06\", \"rrc07\", \"rrc09\", \"rrc10\",\n                \"route-views.ajn\", \"route-views.eqix\",\n                \"route-views.ion\", \"route-views.jinx\",\n                \"route-views.kixp\", \"route-views.linx\", \n                \"route-views.nwax\", \"route-views.sg\",\n                \"route-views.telxatl\", \"route-views.wide\"],\n    record_type=\"updates\",\n)\n\n# Track the origin of the prefix\npath_lengths_dict = {}\nfor elem in stream:\n    if elem.fields[\"prefix\"] == \"65.207.180.157/32\":\n        as_path = elem.fields[\"as-path\"].split(\" \")\n        origin = as_path[-1]\n        num_path_lengths = len(as_path)\n        if not origin in path_lengths_dict:\n            path_lengths_dict[origin] = [num_path_lengths]\n        else:\n            path_lengths_dict[origin].append(num_path_lengths)\n\n# Calculate the average AS Path length per origin\nprint(\"AS Path Inflation\")\nfor origin, paths in path_lengths_dict.items():\n    avg_path_length = sum(paths) / len(paths)\n    print(f\"Average path length from AS {origin}: {avg_path_length}\")",
        "most_similar_instructions": {
            "Using PyBGPStream library, measure AS path inflation for collector route-views.linx": 0.4242424242424242,
            "Using the PyBGPStream library, measure AS inflation for ASN 32329.": 0.3870967741935483,
            "Access live stream data sources from PyBGPStream, and analyze the data for topological analysis, perform AS relationship analysis, and measure the AS path inflation within a 5-minute interval.": 0.36000000000000004,
            "Use PyBGPStream to measure AS path inflation.": 0.35714285714285715,
            "Collect live stream data from a single RIS collector (rrc00) and measure the AS path inflation for the prefix 194.29.176.0/24 during the time window June 24, 2015 to June 30, 2015.": 0.3571428571428571,
            "Measure AS path inflation for the AS path '65013 3549 4609 14129 18436'.": 0.35294117647058826,
            "Measure AS path inflation for the prefix 72.4.0.0/16 over the time window from April 22, 2021, to May 22, 2021. Collect the BGP update records from the route-views2 and route-views6 collectors.": 0.3448275862068966,
            "Measure AS path inflation from the RouteViews collector.": 0.3448275862068965,
            "Use PyBGPStream with the \"from_time\" parameter to measure AS path inflation by monitoring the growth in the number of AS paths over a certain period.": 0.3404255319148936,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.3333333333333333
        },
        "avg_similarity_score": 0.159527850229666
    },
    {
        "instruction": "Access live stream data sources to analyze the event correlation between two different BGP updates for the same prefix over a two-day period.",
        "input": "Time window: Two days prior to the moment of execution to the current execution time\nCollectors: All\nRecord Type: updates\nPrefix of Interest: Any",
        "output": "import pybgpstream\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.utcnow()\n\n# Define the time window to cover the past two days\nstart_time = (now - datetime.timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S')\nend_time = now.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\", \n                \"rrc06\", \"rrc07\", \"rrc09\", \"rrc10\",\n                \"route-views.ajn\", \"route-views.eqix\",\n                \"route-views.ion\", \"route-views.jinx\",\n                \"route-views.kixp\", \"route-views.linx\", \n                \"route-views.nwax\", \"route-views.sg\",\n                \"route-views.telxatl\", \"route-views.wide\"],\n    record_type=\"updates\",\n)\n\n# Dictionary to hold the origin AS numbers and their event correlation\norigin_data = {}\n\n# Iterate over the stream of results\nfor elem in stream:\n    # Compare the current and previous timestamps\n    if elem.time < now.timestamp() and elem.prevtime > start_time:\n        # Calculate the difference in timestamps\n        time_difference = elem.time - elem.prevtime\n\n        # Get the origin AS for the prefix\n        as_path = elem.fields[\"as-path\"].split(\" \")\n        origin = as_path[-1]\n\n        # Save the time difference to the dict\n        if origin not in origin_data:\n            origin_data[origin] = [time_difference]\n        else:\n            origin_data[origin].append(time_difference)\n\n# Calculate and print the average time between events\n# per origin AS\nprint(\"Event Correlation\")\nfor origin, time_differences in origin_data.items():\n    avg_time_difference = sum(time_differences) / len(time_differences)\n    print(f\"Average time between BGP events for AS {origin}: {avg_time_difference} secs\")",
        "most_similar_instructions": {
            "Access live stream data sources from RIS collectors to study the relationships between different ASes.": 0.4615384615384615,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4571428571428572,
            "Access live stream data sources to collect announcements for a particular MOAS prefix and analyze the AS path inflation for the same using PyBGPStream library.": 0.4489795918367347,
            "Access live stream data sources to analyze the differences between the prefixes announced by AS19514 and AS21040 in the past one hour.": 0.43478260869565216,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.43243243243243246,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.42857142857142855,
            "Access live stream data sources from the RouteViews Project to analyze the current networks that announce the prefix 1.1.1.0/24.": 0.425531914893617,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.4102564102564102,
            "Access live stream data sources and analyze the BGP events that are currently taking place in the Asia Pacific region.": 0.4090909090909091,
            "Access live stream data sources from CAIDA to analyze the configurations of the customers of ISPs and study any updates.": 0.4090909090909091
        },
        "avg_similarity_score": 0.17766320285924878
    },
    {
        "instruction": "Use PyBGPStream to study the communities of the prefix 103.24.68.0/22 over a two-week period.",
        "input": "Time window: Two weeks prior to the moment of execution to the current execution time\nCollectors: All\nRecord Type: updates\nPrefix of Interest: 103.24.68.0/22",
        "output": "import pybgpstream\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.utcnow()\n\n# Define the time window to cover the past two weeks\nstart_time = (now - datetime.timedelta(days=14)).strftime('%Y-%m-%d %H:%M:%S')\nend_time = now.strftime('%Y-%m-%d %H:%M:%S')\n\n# Initialize the BGPStream to use multiple RouteViews collectors\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"rrc01\", \"rrc02\", \"rrc03\", \"rrc04\", \"rrc05\", \n                \"rrc06\", \"rrc07\", \"rrc09\", \"rrc10\",\n                \"route-views.ajn\", \"route-views.eqix\",\n                \"route-views.ion\", \"route-views.jinx\",\n                \"route-views.kixp\", \"route-views.linx\", \n                \"route-views.nwax\", \"route-views.sg\",\n                \"route-views.telxatl\", \"route-views.wide\"],\n    record_type=\"updates\",\n)\n\n# List to save the communities\ncommunities_list = []\n\n# Iterate over the stream of results\nfor elem in stream:\n    if elem.fields[\"prefix\"] == \"103.24.68.0/22\":\n        community = elem.fields[\"communities\"].split(\":\")[0]\n        if not community in communities_list:\n            communities_list.append(community)\n\nprint(\"Communities of Prefix 103.24.68.0/22 (over a two week period):\")\nfor community in communities_list:\n    print(\"   \" + community)",
        "most_similar_instructions": {
            "Study the communities of the prefix 64.236.160.0/19.": 0.4666666666666667,
            "Use PyBGPStream to access live stream data sources and study the communities over the past two years.": 0.4444444444444444,
            "Use PyBGPStream to analyze the topology of the Internet.": 0.42857142857142855,
            "Use PyBGPStream to analyze the communities present in the Internet's routing table.": 0.37499999999999994,
            "Access live stream data sources to analyze the event correlation between two different BGP updates for the same prefix over a two-day period.": 0.372093023255814,
            "Analyze the communities of autonomous systems that announce the prefix 75.125.0.0/16 over a specific period of time to study any malicious activity in the AS path.": 0.3673469387755102,
            "Use PyBGPStream with the \"from_time\" parameter to measure AS path inflation by monitoring the growth in the number of AS paths over a certain period.": 0.35555555555555557,
            "Use PyBGPStream to analyze the security events associated with the collector rrc12.": 0.3225806451612903,
            "Study the communities of ASN 65002 for the month of April 2018.": 0.3225806451612903,
            "Use PyBGPStream to analyze how the announced path lengths and AS path preferences of BGP records change over time.": 0.3157894736842105
        },
        "avg_similarity_score": 0.14198221596500932
    },
    {
        "instruction": "Gather route updates from RouteViews collectors between January 8, 2021, and January 12, 2021. Analyze data to generate a historical trend of the number of AS path changes for the prefix 2001:204:1A3::/48.",
        "input": "Time window: January 8, 2021, 00:00:00 to January 12, 2021, 00:00:00\nCollectors: route-views2, route-views3, route-views4, ris-ripe, bview\nRecord Type: updates\nFilter: prefix exact 2001:204:1A3::/48",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2021-01-08 00:00:00\"\nend_time = \"2021-01-12 00:00:00\"\n\n# Initialize the BGPStream\n... (rest of the code for data processing and plotting)\n\n# Initialize prefix variables\nprefix = \"2001:204:1A3::/48\"\n\n# Create graph for historical trends of as path changes\n... (code for creating and plotting graph with historical trends)\nplt.show()",
        "most_similar_instructions": {
            "Collect route updates from all RouteViews and RIS collectors for all prefixes within the 179.192.0.0/10 network. Analyze the results, generating a summary of the number of announcements observed from each AS peer originator for each prefix. Store the results in a SQLite database.": 0.34146341463414637,
            "Collect updates from RIS RRC00 and RRC01 between June 8th, 2018, 3:00am and June 8th, 2018, 3:10am. Use MOAS prefixes to analyze the AS path inflation of the prefix entries.": 0.29850746268656714,
            "Collect BGP records, exported from ASN 63572, and analyze the origin ASN attached to the BGP update records. Create a visualization of the AS path topology and record the connectivity between ASNs.": 0.29850746268656714,
            "Use PyBGPStream to collect BGP announcement data for the past 24 hour from RIS collectors. Analyze the data and calculate the number of paths for each prefix.": 0.2903225806451613,
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.2857142857142857,
            "Measure AS path inflation and Generate a summary of the average AS path length associated with the prefix 45.249.11.0/24 from the foundries.io collector.": 0.2857142857142857,
            "Collect updates from RouteViews BNA and TPA collectors between June 8th, 2020, 4:00am to June 8th, 2020, 4:10am. Study the AS paths and determine the AS relationships.": 0.28125,
            "Access live stream data sources and Generate a summary regarding the number of AS-to-prefix relationships for each AS in the list of ASNs [\"5511\", \"1201\", \"16217\", \"17477\"].": 0.28125,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.2777777777777778,
            "Collect data from the RouteViews (sunset) project and analyze the AS path lengths associated with the prefix 1.2.3.0/24 using manual filtering during the data collection loop.": 0.2769230769230769
        },
        "avg_similarity_score": 0.16484036120214632
    },
    {
        "instruction": "Collect BGP announcement data from <noinput>  between April 30, 2019, 12:00:00 and May 1 2019, 12:00:00 for IP Version 4. Analyze top 10 IPAddresses and their respective AS path length to detect AS path inflation.",
        "input": "Time window: April 30, 2019, 12:00:00 to May 1, 2019, 12:00:00\nCollectors: <noinput> \nRecord Type: updates\nIP version: 4",
        "output": "import pybgpstream\n... (rest of the code for data processing and visualization)\n\n# Initialize the BGPStream\n...\n# Set the collectors\n...\n# Set the time window \n...\n# Set the IP version\nfilter_rules = pybgpstream.ParseOptions(\"ipversion = 4\")\nstream.add_filter(filter_rules)\n\n# Push the filter\nstream.push_filter()\n\n# Get the BGP announcements\nanns = stream.get_next_announcements()\n\n# Create a table of each IP address and its AS path length\n... (code to compute and store the AS path length)\n\n# Create a bar chart to visualize the top 10 IP addresses and AS path length\n... (code to generate the bar chart)\n\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP data using the Collector's Choice option of the PyBGPStream library to measure the AS-Path inflation from June 6, 2019, 09:00:00 UTC, to June 6, 2019, 12:00:00 UTC. Output the average AS-Path length, the maximum AS-Path length, and the 95-percentile AS-Path length for each ASN.": 0.3368421052631579,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.32911392405063294,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.32835820895522383,
            "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.": 0.32835820895522383,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.326530612244898,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3235294117647059,
            "Use PyBGPStream to analyze the AS paths over IPv4 and IPv6 from RouteViews between 16:00:00 and 18:00:00 on April 11, 2014. Obtain the maximum and minimum AS path length per AS over the time window.": 0.3076923076923077,
            "Collect BGP update data from the route-views2 collector between April 30, 2017, and May 2, 2017. Identify the top 25 customers of AS65515 using communities.": 0.3076923076923077,
            "Retrieve all BGP update data from the route-views2 collector on April 26, 2017, between 19:30:00 and 23:00:00. Measure the AS path inflation by comparing the AS paths in the update's A and W fields.": 0.3037974683544304,
            "Collect BGP update data from all the RouteViews collectors and measure AS path inflation.": 0.3018867924528302
        },
        "avg_similarity_score": 0.15472468271268322
    },
    {
        "instruction": "Collect BGP announcement data for the time window between January 1, 2020, and January 8, 2020, from the route-views.isc collector, to analyze how AS Path lengths changed for prefixes related to BGP hijacking incidents.",
        "input": "Time window: January 1, 2020, 00:00:00 to January 8, 2020, 00:00:00\nCollector: route-views.isc\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2020-01-01 00:00:00\"\nend_time = \"2020-01-08 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collector=\"route-views.isc\",\n    record_type=\"updates\")\n\n# Set the filter rules\nfilter_rules = pybgpstream.ParseOptions(\"peerAS <peerASN related to hijacking>\")\nstream.add_filter(filter_rules)\n\n# Push the filter\nstream.push_filter()\n\n# Get the BGP announcements\nanns = stream.get_next_announcements()\n\n# Create a table of each IP address and its AS path length\n... (code to compute and store the AS path length)\n\n# Create a line plot to visualize the changes in AS Path lengths over time\n... (code to generate the line plot)\n\nplt.show()",
        "most_similar_instructions": {
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.36842105263157887,
            "Using PyBGPStream library, collect BGP data from route-views.bboi collector and apply a filter on AS path to analyze AS path inflation within 30 day time window.": 0.34375000000000006,
            "Collect BGP announcement data from route-views.jinx collector for the AS path length greater than 10. Analyze all data and produce a table of prefix, AS-Path length.": 0.3384615384615385,
            "Access BGP live stream data from Route-Views collector rrc00 to measure AS path inflation for AS45102 and analyze how it changes over time.": 0.33333333333333337,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.31250000000000006,
            "Collect and analyze all AS Paths from Route Views collector 'route-views.amsix' to identify which AS Path has the strictest preference.": 0.31034482758620685,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.3076923076923077,
            "Collect BGP update data from Moas prefixes for the period of January 1, 2017, until January 31, 2017. Extract the origin AS numbers from announcements collected from AS-RIPE.": 0.3076923076923077,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.30612244897959184,
            "Collect BGP announcement data from RouteViews and analyze AS relationship.": 0.30434782608695654
        },
        "avg_similarity_score": 0.1792077413821575
    },
    {
        "instruction": "Collect BGP announcement data from the route-views.amsix collector for the time window between May 5, 2018, 13:00:00 and May 6, 2018, 13:00:00. Analyze the MOAS (Multihoming Origin ASes) to detect if any of them is under attack.",
        "input": "Time window: May 5, 2018, 13:00:00 to May 6, 2018, 13:00:00\nCollector: route-views.amsix\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2018-05-05 13:00:00\"\nend_time = \"2018-05-06 13:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collector=\"route-views.amsix\",\n    record_type=\"updates\")\n\n# Set the filter rules\nfilter_rules = pybgpstream.ParseOptions(\"multi-origin-as True\")\nstream.add_filter(filter_rules)\n\n# Push the filter\nstream.push_filter()\n\n# Get the BGP announcements\nanns = stream.get_next_announcements()\n\n# Analyze the announcements to identify possible attacks\n...\n\n# Create a visualization of the announcement analysis \n... (code to generate the visualization)\n\nplt.show()",
        "most_similar_instructions": {
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.4155844155844156,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.4000000000000001,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.4,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.38888888888888895,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.38636363636363635,
            "Collect BGP update data from multiple RouteViews collectors for the time window between 18:00:00 and 22:00:00 on February 24, 2008. Focus on the prefix 208.65.153.0/24. Detect any unauthorized BGP announcements for this prefix. If any unauthorized announcements are detected, print the AS numbers responsible for these announcements.": 0.3673469387755102,
            "Collect BGP announcement data from <noinput>  between April 30, 2019, 12:00:00 and May 1 2019, 12:00:00 for IP Version 4. Analyze top 10 IPAddresses and their respective AS path length to detect AS path inflation.": 0.3658536585365854,
            "Collect BGP update data from the RIS route-views collector for the past 10 hours, and study the communities associated with each announcement prefix.": 0.3582089552238806,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between February 24, 2008, 18:00:00 and February 24, 2008, 22:00:00. Identify unauthorized BGP announcements for the prefix 208.65.153.0/24 and list the ASes responsible for these announcements. If unauthorized announcements are detected, print the list of ASes; otherwise, indicate that no unauthorized announcements were found.": 0.3551401869158879,
            "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.": 0.3513513513513513
        },
        "avg_similarity_score": 0.18338309271147715
    },
    {
        "instruction": "Collect BGP announcement data from the route-views2 and ris3 collectors for the time window between March 10, 2012, 00:00:00 and March 14, 2012, 00:00:00. Analyze the communities and perform security analysis on the data to detect possible malicious activity.",
        "input": "Time window: March 10, 2012, 00:00:00 to March 14, 2012, 00:00:00\nCollectors: route-views2, ris3\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2012-03-10 00:00:00\"\nend_time = \"2012-03-14 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collector=\"route-views2,ris3\",\n    record_type=\"updates\")\n\n# Get the BGP announcements\nanns = stream.get_next_announcements()\n\n# Analyze the communities for security concerns \n...\n\n# Create a visualization of the security analysis\n... (code to generate the visualization)\n\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP announcement data from the route-views.amsix collector for the time window between May 5, 2018, 13:00:00 and May 6, 2018, 13:00:00. Analyze the MOAS (Multihoming Origin ASes) to detect if any of them is under attack.": 0.4827586206896552,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.46913580246913583,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.4473684210526316,
            "Analyze the BGP messages from the Route Views collector for the time window between 16:00:00 and 17:00:00 on March 24, 2008 for malicious activity and generate a report about it.": 0.4358974358974359,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.41509433962264153,
            "Collect the raw BGP data for the prefix 212.68.135.0/24 for the time window between 12:00:00 and 15:00:00 on January 1, 2019.": 0.410958904109589,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.40449438202247195,
            "Measure AS path inflation from both RouteViews and RIS collectors for the time window between July 11, 2017, 00:00:00 and July 11, 2017, 00:15:00.": 0.3888888888888889,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.38181818181818183,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.380952380952381
        },
        "avg_similarity_score": 0.19186018841731076
    },
    {
        "instruction": "Analyze and Access live stream data sources for the path length and preference of AS 196706.",
        "input": "Collectors: <noinput>\nRecord Type: updates\nASN: 196706",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nimport datetime\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    record_type=\"updates\",\n    live=True)\n\n# Set the filter rules\nfilter_rules = pybgpstream.ParseOptions(\"peerAS 196706\")\nstream.add_filter(filter_rules)\n\n# Push the filter\nstream.push_filter()\n\n# Start the BGPStream\nfor elem in stream.get_elem():\n    ... (code to collect the data and process it)\n\n# Analyze the Path Length and Preference\n... (code to generate the analysis)\n\nplt.show()",
        "most_similar_instructions": {
            "Access the live stream data sources from RIS and RouteViews for an AS path length analysis.": 0.5,
            "Access live stream data sources, measure AS path inflation, and visualize the results.": 0.4827586206896552,
            "Access live stream data sources and perform a security analysis by examining the path length and preference count for the Prefix 81.185.112.0/22": 0.4761904761904762,
            "Access route view live stream data sources for ASN 65001 to analyze the paths and the end ASN.": 0.47058823529411764,
            "Access live stream data sources and measure AS path inflation over a 24 hours period.": 0.45161290322580644,
            "Access live stream data sources and analyze the communities for AS1234.": 0.4444444444444444,
            "Use PyBGPStream to access live stream data sources and analyze the BGP events.": 0.41379310344827586,
            "Access live stream data sources and perform topological analysis on data collected from RouteViews to identify the possible incidents of path length inflation.": 0.41025641025641024,
            "Access live stream data sources from the RouteViews collector connected to the incident. Calculate and visualize the number of BGP communities per view.": 0.41025641025641024,
            "Access live stream data sources from RouteViews and analyze all BGP prefixes collected. Identify AS path inflation and report all the inflated AS paths.": 0.4
        },
        "avg_similarity_score": 0.19641481647392928
    },
    {
        "instruction": "Collect BGP announcement data from route-collectors between January 4, 2016, 00:00:00 and January 6, 2016, 00:00:00. Analyze the historical trends of announcements to detect any unusual activity.",
        "input": "Time window: January 4, 2016, 00:00:00 to January 6, 2016, 00:00:00\nCollectors: route-collector\nRecord Type: updates",
        "output": "import pybgpstream\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2016-01-04 00:00:00\"\nend_time = \"2016-01-06 00:00:00\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collector=\"route-collector\",\n    record_type=\"updates\")\n\n# Get the BGP announcements\nanns = stream.get_next_announcements()\n\n# Analyze the announcements to identify possible trends\n...\n\n# Create a visualization of the historical trends in the announcement\n... (code to generate the visualization)\n\nplt.show()",
        "most_similar_instructions": {
            "Collect BGP announcement data from the route-views2 and ris3 collectors for the time window between March 10, 2012, 00:00:00 and March 14, 2012, 00:00:00. Analyze the communities and perform security analysis on the data to detect possible malicious activity.": 0.5263157894736842,
            "Collect BGP announcement data from the route-views.amsix collector for the time window between May 5, 2018, 13:00:00 and May 6, 2018, 13:00:00. Analyze the MOAS (Multihoming Origin ASes) to detect if any of them is under attack.": 0.48,
            "Lookup BGP data records for IPv4 prefixes from ASN 64399 between January 22, 2006, 00:00:00 and January 23, 2006,00:00:00. Calculate the total number of BGP announcements and AS paths of each prefix.": 0.463768115942029,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.425531914893617,
            "Collect BGP announcement data from <noinput>  between April 30, 2019, 12:00:00 and May 1 2019, 12:00:00 for IP Version 4. Analyze top 10 IPAddresses and their respective AS path length to detect AS path inflation.": 0.39436619718309857,
            "Analyse BGP update data from RouteViews collector rrc04 for the time window between October 10, 2011, 00:00:00 and October 12, 2011, 00:00:00 to perform topological analysis of the BGP announcements made by AS55330.": 0.37681159420289856,
            "Measure AS path inflation for prefixes learned from ASN 65547. Collect data for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00, and calculate the AS Path length for origin AS 65547.": 0.36111111111111116,
            "Access the live stream data source to collect BGP data from the RIS route collectors and analyze the community numbers of the recorded BGP announcement.": 0.3508771929824561,
            "Collect BGP update data from multiple RouteViews collectors for the time window between April 8, 2010, 00:00:00 and April 9, 2010, 00:00:00. Focus on AS23724 and analyze the number of BGP announcements made by AS23724 on an hourly basis during that time period. Additionally, identify the top 10 most common AS paths announced by AS23724 on April 8, 2010, and visualize them.": 0.3469387755102041,
            "Collect historical BGP updates from RIS collectors for the time window between October 5, 2006, 07:00:00 and October 5, 2006, 10:00:00 and perform a topological analysis of AS2131.": 0.34375
        },
        "avg_similarity_score": 0.17470603261597242
    },
    {
        "instruction": "Collect live stream data from the RouteViews and RIPE RIS collectors for the time window between December 26, 2018, 00:00:00 and December 28, 2018, 23:59:59. Analyze and visualize the AS relationships of all the prefixes announced by ASN74567 to determine if there is an AS path inflation.",
        "input": "Time window: December 26, 2018, 00:00:00 to December 28, 2018, 23:59:59\nCollectors: route-views2, route-views3, route-views4, ris-ripe\nRecord Type: updates",
        "output": "import pybgpstream\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the time window around the incident\nstart_time = \"2018-12-26 00:00:00\"\nend_time = \"2018-12-28 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\", \"route-views4\", \"ris-ripe\"],\n    record_type=\"updates\"\n)\n\n# Create a directed graph\nas_graph = nx.DiGraph()\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        if elem.type == \"A\":  # Check for BGP announcements\n            as_path = elem.fields[\"as-path\"]\n            ases = as_path.split()\n            for i in range(len(ases)-1):\n      if ases[i] == \"74567\":\n   # Add the edges to the graph\n   as_graph.add_edge(ases[i], ases[i+1])\n\n# Draw the AS relationship graph of ASNs announcing prefixes from ASN74567\nplt.figure(figsize=(12, 6))\nnx.draw_networkx(as_graph, node_color=\"C0\", font_color=\"w\")\nplt.title(\"ASN74567 Prefix AS Relationship Graph\")\nplt.tight_layout()\nplt.savefig(\"ASN74567_graph.png\")\nplt.close()",
        "most_similar_instructions": {
            "Collect BGP update data from multiple RouteViews collectors for the time window between July 3, 2013, 00:00:00 and July 3, 2013, 23:59:59. Focus on the prefix 46.166.163.0/24 and detect any spikes in BGP announcements. Visualize the hourly announcements and mark spikes in the plot.": 0.4077669902912621,
            "Collect BGP announcement data from the route-views.amsix collector for the time window between May 5, 2018, 13:00:00 and May 6, 2018, 13:00:00. Analyze the MOAS (Multihoming Origin ASes) to detect if any of them is under attack.": 0.4042553191489362,
            "Collect BGP announcement data from the route-views2 and ris3 collectors for the time window between March 10, 2012, 00:00:00 and March 14, 2012, 00:00:00. Analyze the communities and perform security analysis on the data to detect possible malicious activity.": 0.4,
            "For the AS17807, collect RIB data from RouteViews collector during the time window between July 7, 2018 00:00:00 and July 9, 2018 00:00:00. Analyze the most frequent path preference in the community field and include the preference amount in the output.": 0.37500000000000006,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between 09:00:00 and 23:59:00 on December 24, 2004. Analyze BGP announcements per AS per minute and create a time series plot showing the frequency of announcements for the top 10 ASes over time. Save the raw data in a CSV file named 'as_announcements.csv'.": 0.37499999999999994,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.3716814159292035,
            "Access data sources from RouteViews collector bview during the time window from June 25, 2018, 00:00:00 to June 27, 2018, 23:59:59.": 0.368421052631579,
            "Analyze the outdegrees from the RIS RIS rrc00 collector for top AS Number for the time window between December 26, 2015, 00:00:00 and December 29, 2015, 00:00:00.": 0.36585365853658536,
            "Collect BGP announcement and withdrawal data from multiple RouteViews collectors for the time window between February 1, 2014, 00:00:00 and February 28, 2014, 23:59:59. Generate a report-style summary of BGP activity for each day in February 2014, including the number of announcements and withdrawals per day. Additionally, provide the total number of announcements and withdrawals for the entire month. Save the results in a text document.": 0.360655737704918
        },
        "avg_similarity_score": 0.20174758600045817
    },
    {
        "instruction": "Collect RIB entries from RouteViews collectors for a given time interval. Analyze and output the top 5 longest prefixes announced by ASN40984.",
        "input": "Time window: January 2, 2011, 00:00:00 to January 4, 2011, 23:59:59\nCollectors: route-views2, route-views3",
        "output": "import pybgpstream\nfrom collections import Counter\n\n# Define the time window around the incident\nstart_time = \"2011-01-02 00:00:00\"\nend_time = \"2011-01-04 23:59:59\"\n\n# Initialize the BGPStream\nstream = pybgpstream.BGPStream(\n    from_time=start_time,\n    until_time=end_time,\n    collectors=[\"route-views2\", \"route-views3\"],\n    record_type=\"ribs\"\n)\n\n# Dictionary to store the prefix lengths\nprefix_lengths = {}\n\n# Process BGP records\nfor rec in stream.records():\n    for elem in rec:\n        # Check for ASN40984\n        if elem.fields[\"as-path\"].endswith(\"40984\"):\n            # Get the prefix length\n            prefix = elem.fields[\"prefix\"]\n            prefix_length = int(str(prefix).split(\"/\")[-1])\n            prefix_lengths[prefix] = prefix_length\n\n# Get and print the top 5 longest prefixes\nlongest_prefixes = Counter(prefix_lengths).most_common()\ntop_5_longest_prefixes = longest_prefixes[:5]\n\nprint(\"Top 5 longest prefixes announced by ASN 40984:\")\nfor prefix, length in top_5_longest_prefixes:\n    print(f\"  Prefix: {prefix} (Length: {length})\")",
        "most_similar_instructions": {
            "Collect live updates from ris-ripe collector for 10 minutes and analyze the communities of path length and preference for the top 5 BGP prefixes announced by AS25152.": 0.44,
            "Collect RIB entries from RouteViews collector from the time window connected to the incident, analyze and visualize the route-preference between RouteViews BGP peers.": 0.3913043478260869,
            "Collect all the BGP announcements for a specific prefix from RouteViews collectors and output the AS paths for these prefixes.": 0.380952380952381,
            "Collect live stream data from the RouteViews and RIPE RIS collectors for the time window between December 26, 2018, 00:00:00 and December 28, 2018, 23:59:59. Analyze and visualize the AS relationships of all the prefixes announced by ASN74567 to determine if there is an AS path inflation.": 0.3287671232876712,
            "Collect the MOAS prefixes for the ASN 4234 from RouteViews collectors for the date January 8, 2015.": 0.30769230769230765,
            "Collect all updates (announcements and withdrawals) from the RouteViews collectors for a month. Filter out all updates of prefixes that begin with \"54.0.0.0/8\".": 0.2857142857142857,
            "Collect historical BGP data from RouteViews and analyse the AS paths, using visualization.": 0.2857142857142857,
            "Collect BGP announcement data from multiple RouteViews collectors for the time window between January 22, 2006, 00:00:00 and January 23, 2006, 00:00:00. Identify BGP announcements by AS27506, analyze the most common prefixes announced by AS27506, and provide the count of announcements and the announcement time window for the top 5 prefixes. Save the results in a text document.": 0.2857142857142857,
            "Collect BGP RIB update data for the month of October 2018 from all available RouteViews collectors and measure AS path inflation for BGP prefixes 1.2.3.0/24 and 4.5.6.7/32.": 0.2807017543859649,
            "Collect BGP announcement data from RIS collectors for the AS path \"65501:1\". Analyze all BGP announcements sent by multiple origin AS (MOAS) and calculate the path inflation.": 0.28
        },
        "avg_similarity_score": 0.1552732721013368
    }
]